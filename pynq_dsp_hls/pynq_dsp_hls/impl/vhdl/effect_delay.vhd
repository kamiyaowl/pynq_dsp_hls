-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity effect_delay is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inData_l : IN STD_LOGIC_VECTOR (31 downto 0);
    inData_r : IN STD_LOGIC_VECTOR (31 downto 0);
    config_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    config_r_ce0 : OUT STD_LOGIC;
    config_r_we0 : OUT STD_LOGIC;
    config_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    config_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    config_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_AWVALID : OUT STD_LOGIC;
    m_axi_extMemPtr_V_AWREADY : IN STD_LOGIC;
    m_axi_extMemPtr_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_extMemPtr_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_extMemPtr_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_extMemPtr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_extMemPtr_V_WVALID : OUT STD_LOGIC;
    m_axi_extMemPtr_V_WREADY : IN STD_LOGIC;
    m_axi_extMemPtr_V_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_extMemPtr_V_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_WLAST : OUT STD_LOGIC;
    m_axi_extMemPtr_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_extMemPtr_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_extMemPtr_V_ARVALID : OUT STD_LOGIC;
    m_axi_extMemPtr_V_ARREADY : IN STD_LOGIC;
    m_axi_extMemPtr_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_extMemPtr_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_extMemPtr_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_extMemPtr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_extMemPtr_V_RVALID : IN STD_LOGIC;
    m_axi_extMemPtr_V_RREADY : OUT STD_LOGIC;
    m_axi_extMemPtr_V_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_extMemPtr_V_RLAST : IN STD_LOGIC;
    m_axi_extMemPtr_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_extMemPtr_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_extMemPtr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_BVALID : IN STD_LOGIC;
    m_axi_extMemPtr_V_BREADY : OUT STD_LOGIC;
    m_axi_extMemPtr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_extMemPtr_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of effect_delay is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal extMemPtr_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal extMemPtr_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal extMemPtr_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal extMemPtr_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal extMemPtr_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state13_io : BOOLEAN;
    signal tmp_16_fu_310_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_reg_790 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal memAddr_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal memSize_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_9_reg_826 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln368_fu_385_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln368_reg_837 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal wrIndex_reg_858 : STD_LOGIC_VECTOR (4 downto 0);
    signal rdIndex_reg_863 : STD_LOGIC_VECTOR (4 downto 0);
    signal volRatio_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal volRatio_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal periodRatio_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal periodRatio_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxIndex_V_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxIndex_V_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln879_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal wrIndex_load_reg_888 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ret_V_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln90_1_fu_457_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln90_1_reg_910 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln90_3_fu_472_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln90_3_reg_915 : STD_LOGIC_VECTOR (33 downto 0);
    signal extMemPtr_V_addr_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1354_fu_492_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1354_reg_926 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln92_fu_507_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln92_reg_931 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln91_fu_525_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln91_reg_938 : STD_LOGIC_VECTOR (33 downto 0);
    signal extMemPtr_V_addr_1_reg_943 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_949 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_reg_954 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_V_1_fu_568_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_960 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_581_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_965 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ush_fu_598_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_970 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln98_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal extMemPtr_V_addr_2_reg_980 : STD_LOGIC_VECTOR (31 downto 0);
    signal extMemPtr_V_addr_3_reg_986 : STD_LOGIC_VECTOR (31 downto 0);
    signal auxRawL_V_reg_992 : STD_LOGIC_VECTOR (31 downto 0);
    signal auxRawR_V_reg_997 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_l_reg_1012 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_r_reg_1017 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_2_reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_3_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_agg_result_l_write_a_phi_fu_267_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_l_write_a_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_phi_mux_agg_result_r_write_a_phi_fu_278_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_r_write_a_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_324_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_338_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_352_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_376_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_394_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_408_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_4_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_1_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln103_2_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln705_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln705_1_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln107_fu_761_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal or_ln71_fu_318_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln72_fu_333_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln73_fu_347_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln74_fu_371_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln75_fu_389_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln76_fu_403_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_s_fu_417_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_6_fu_428_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_18_fu_432_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_464_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln90_fu_476_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln90_2_fu_460_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln887_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln92_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln90_fu_516_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln91_fu_519_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln91_1_fu_529_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_11_fu_554_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln339_fu_572_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_575_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_589_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1311_fu_594_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_V_fu_606_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1311_1_fu_619_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_622_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_615_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_625_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_629_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_10_fu_641_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_635_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_649_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_653_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln97_1_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln97_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln97_fu_679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln97_fu_685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal currentPeriod_fu_690_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_V_fu_663_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_708_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln103_1_fu_716_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln103_fu_720_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln104_fu_735_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln103_fu_704_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln887_1_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln107_fu_755_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_ce : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_298_ce : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component pynq_dsp_hls_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_uitodEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    pynq_dsp_hls_faddbkb_U1 : component pynq_dsp_hls_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_286_p0,
        din1 => inData_l,
        ce => ap_const_logic_1,
        dout => grp_fu_286_p2);

    pynq_dsp_hls_faddbkb_U2 : component pynq_dsp_hls_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_290_p0,
        din1 => inData_r,
        ce => ap_const_logic_1,
        dout => grp_fu_290_p2);

    pynq_dsp_hls_fmulcud_U3 : component pynq_dsp_hls_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_294_p0,
        din1 => grp_fu_294_p1,
        ce => grp_fu_294_ce,
        dout => grp_fu_294_p2);

    pynq_dsp_hls_uitodEe_U4 : component pynq_dsp_hls_uitodEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => memSize_reg_820,
        ce => grp_fu_298_ce,
        dout => grp_fu_298_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    ap_return_0_preg <= ap_phi_mux_agg_result_l_write_a_phi_fu_267_p6;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    ap_return_1_preg <= ap_phi_mux_agg_result_r_write_a_phi_fu_278_p6;
                end if; 
            end if;
        end if;
    end process;


    agg_result_l_write_a_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln879_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln98_reg_976 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_extMemPtr_V_BVALID = ap_const_logic_1)))) then 
                agg_result_l_write_a_reg_264 <= inData_l;
            elsif (((icmp_ln98_reg_976 = ap_const_lv1_0) and (icmp_ln879_reg_884 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                agg_result_l_write_a_reg_264 <= dst_l_reg_1012;
            end if; 
        end if;
    end process;

    agg_result_r_write_a_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln879_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln98_reg_976 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_extMemPtr_V_BVALID = ap_const_logic_1)))) then 
                agg_result_r_write_a_reg_275 <= inData_r;
            elsif (((icmp_ln98_reg_976 = ap_const_lv1_0) and (icmp_ln879_reg_884 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                agg_result_r_write_a_reg_275 <= dst_r_reg_1017;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                if (((icmp_ln891_reg_893 = ap_const_lv1_1) and (grp_fu_301_p2 = ap_const_lv1_1))) then 
                    i_op_assign_2_reg_241 <= wrIndex_load_reg_888;
                elsif (((icmp_ln891_reg_893 = ap_const_lv1_0) or (grp_fu_301_p2 = ap_const_lv1_0))) then 
                    i_op_assign_2_reg_241 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                if (((icmp_ln891_reg_893 = ap_const_lv1_1) and (grp_fu_301_p2 = ap_const_lv1_1))) then 
                    i_op_assign_3_reg_252 <= config_r_q0;
                elsif (((icmp_ln891_reg_893 = ap_const_lv1_0) or (grp_fu_301_p2 = ap_const_lv1_0))) then 
                    i_op_assign_3_reg_252 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_extMemPtr_V_RVALID = ap_const_logic_1))) then
                auxRawL_V_reg_992 <= m_axi_extMemPtr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (m_axi_extMemPtr_V_RVALID = ap_const_logic_1))) then
                auxRawR_V_reg_997 <= m_axi_extMemPtr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                dst_l_reg_1012 <= grp_fu_286_p2;
                dst_r_reg_1017 <= grp_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_extMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                extMemPtr_V_addr_1_reg_943 <= zext_ln91_1_fu_534_p1(32 - 1 downto 0);
                tmp_reg_949 <= grp_fu_298_p1;
                    zext_ln91_reg_938(32 downto 0) <= zext_ln91_fu_525_p1(32 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_reg_976 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_extMemPtr_V_BVALID = ap_const_logic_1))) then
                extMemPtr_V_addr_2_reg_980 <= zext_ln103_2_fu_725_p1(32 - 1 downto 0);
                extMemPtr_V_addr_3_reg_986 <= zext_ln104_fu_740_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                extMemPtr_V_addr_reg_920 <= zext_ln90_4_fu_482_p1(32 - 1 downto 0);
                select_ln92_reg_931 <= select_ln92_fu_507_p3;
                sext_ln1354_reg_926 <= sext_ln1354_fu_492_p1;
                    zext_ln90_1_reg_910(31 downto 0) <= zext_ln90_1_fu_457_p1(31 downto 0);
                    zext_ln90_3_reg_915(32 downto 1) <= zext_ln90_3_fu_472_p1(32 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln879_reg_884 <= icmp_ln879_fu_447_p2;
                    maxIndex_V_reg_878(30 downto 0) <= maxIndex_V_fu_444_p1(30 downto 0);
                    periodRatio_reg_873(30 downto 0) <= periodRatio_fu_440_p1(30 downto 0);
                    rdIndex_reg_863(4 downto 3) <= tmp_21_fu_408_p3(5 - 1 downto 0)(4 downto 3);
                    volRatio_reg_868(30 downto 0) <= volRatio_fu_424_p1(30 downto 0);
                    wrIndex_reg_858(4 downto 3) <= tmp_20_fu_394_p3(5 - 1 downto 0)(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln891_reg_893 <= grp_fu_301_p2;
                wrIndex_load_reg_888 <= config_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (m_axi_extMemPtr_V_BVALID = ap_const_logic_1))) then
                icmp_ln98_reg_976 <= icmp_ln98_fu_698_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                isNeg_reg_965 <= add_ln339_fu_575_p2(8 downto 8);
                ush_reg_970 <= ush_fu_598_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                memAddr_reg_809 <= config_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                memSize_reg_820 <= config_r_q0;
                val_assign_9_reg_826 <= config_r_q0(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_boolean_0 = ap_block_state13_io)) or ((m_axi_extMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then
                reg_306 <= grp_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                ret_V_reg_905 <= ret_V_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_16_reg_790(5 downto 3) <= tmp_16_fu_310_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_V_1_reg_960 <= tmp_V_1_fu_568_p1;
                tmp_V_reg_954 <= p_Val2_11_fu_554_p1(30 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                trunc_ln368_reg_837 <= trunc_ln368_fu_385_p1;
            end if;
        end if;
    end process;
    tmp_16_reg_790(2 downto 0) <= "000";
    wrIndex_reg_858(2 downto 0) <= "101";
    rdIndex_reg_863(2 downto 0) <= "110";
    volRatio_reg_868(31) <= '0';
    periodRatio_reg_873(31) <= '0';
    maxIndex_V_reg_878(31) <= '0';
    zext_ln90_1_reg_910(33 downto 32) <= "00";
    zext_ln90_3_reg_915(0) <= '0';
    zext_ln90_3_reg_915(33) <= '0';
    zext_ln91_reg_938(33) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_extMemPtr_V_AWREADY, m_axi_extMemPtr_V_WREADY, m_axi_extMemPtr_V_ARREADY, m_axi_extMemPtr_V_RVALID, m_axi_extMemPtr_V_BVALID, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state21, ap_CS_fsm_state28, ap_block_state13_io, ap_CS_fsm_state5, icmp_ln879_fu_447_p2, icmp_ln98_reg_976)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln879_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((m_axi_extMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_boolean_0 = ap_block_state13_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((m_axi_extMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (m_axi_extMemPtr_V_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln98_reg_976 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_extMemPtr_V_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                elsif (((icmp_ln98_reg_976 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_extMemPtr_V_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((m_axi_extMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((m_axi_extMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_extMemPtr_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (m_axi_extMemPtr_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln103_fu_720_p2 <= std_logic_vector(unsigned(zext_ln90_1_reg_910) + unsigned(zext_ln103_1_fu_716_p1));
    add_ln104_fu_735_p2 <= std_logic_vector(unsigned(zext_ln91_reg_938) + unsigned(zext_ln103_1_fu_716_p1));
    add_ln107_fu_755_p2 <= std_logic_vector(unsigned(i_op_assign_3_reg_252) + unsigned(ap_const_lv32_1));
    add_ln339_fu_575_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_572_p1));
    add_ln90_fu_476_p2 <= std_logic_vector(unsigned(zext_ln90_1_fu_457_p1) + unsigned(zext_ln90_3_fu_472_p1));
    add_ln91_1_fu_529_p2 <= std_logic_vector(unsigned(zext_ln91_fu_525_p1) + unsigned(zext_ln90_3_reg_915));
    add_ln91_fu_519_p2 <= std_logic_vector(unsigned(ap_const_lv33_1) + unsigned(zext_ln90_fu_516_p1));
    add_ln92_fu_501_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_op_assign_2_reg_241));
    add_ln97_fu_679_p2 <= std_logic_vector(unsigned(i_op_assign_3_reg_252) + unsigned(sub_ln97_1_fu_675_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state13_io_assign_proc : process(m_axi_extMemPtr_V_AWREADY, m_axi_extMemPtr_V_WREADY)
    begin
                ap_block_state13_io <= ((m_axi_extMemPtr_V_WREADY = ap_const_logic_0) or (m_axi_extMemPtr_V_AWREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_agg_result_l_write_a_phi_fu_267_p6_assign_proc : process(icmp_ln879_reg_884, icmp_ln98_reg_976, dst_l_reg_1012, agg_result_l_write_a_reg_264, ap_CS_fsm_state36)
    begin
        if (((icmp_ln98_reg_976 = ap_const_lv1_0) and (icmp_ln879_reg_884 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            ap_phi_mux_agg_result_l_write_a_phi_fu_267_p6 <= dst_l_reg_1012;
        else 
            ap_phi_mux_agg_result_l_write_a_phi_fu_267_p6 <= agg_result_l_write_a_reg_264;
        end if; 
    end process;


    ap_phi_mux_agg_result_r_write_a_phi_fu_278_p6_assign_proc : process(icmp_ln879_reg_884, icmp_ln98_reg_976, dst_r_reg_1017, ap_CS_fsm_state36, agg_result_r_write_a_reg_275)
    begin
        if (((icmp_ln98_reg_976 = ap_const_lv1_0) and (icmp_ln879_reg_884 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            ap_phi_mux_agg_result_r_write_a_phi_fu_278_p6 <= dst_r_reg_1017;
        else 
            ap_phi_mux_agg_result_r_write_a_phi_fu_278_p6 <= agg_result_r_write_a_reg_275;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_phi_mux_agg_result_l_write_a_phi_fu_267_p6, ap_CS_fsm_state36, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_return_0 <= ap_phi_mux_agg_result_l_write_a_phi_fu_267_p6;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state36, ap_phi_mux_agg_result_r_write_a_phi_fu_278_p6, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_return_1 <= ap_phi_mux_agg_result_r_write_a_phi_fu_278_p6;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    bitcast_ln705_1_fu_549_p1 <= reg_306;
    bitcast_ln705_fu_544_p1 <= reg_306;

    config_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state19, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, wrIndex_reg_858, rdIndex_reg_863, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, tmp_17_fu_324_p3, tmp_18_fu_338_p3, tmp_19_fu_352_p3, tmp_s_fu_376_p3, tmp_20_fu_394_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            config_r_address0 <= wrIndex_reg_858;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            config_r_address0 <= rdIndex_reg_863;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            config_r_address0 <= tmp_20_fu_394_p3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            config_r_address0 <= tmp_s_fu_376_p3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            config_r_address0 <= tmp_19_fu_352_p3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            config_r_address0 <= tmp_18_fu_338_p3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            config_r_address0 <= tmp_17_fu_324_p3(5 - 1 downto 0);
        else 
            config_r_address0 <= "XXXXX";
        end if; 
    end process;


    config_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_extMemPtr_V_BVALID, ap_CS_fsm_state19, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_extMemPtr_V_BVALID = ap_const_logic_1)))) then 
            config_r_ce0 <= ap_const_logic_1;
        else 
            config_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    config_r_d0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state7, ap_CS_fsm_state11, select_ln92_fu_507_p3, select_ln107_fu_761_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            config_r_d0 <= select_ln107_fu_761_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            config_r_d0 <= select_ln92_fu_507_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            config_r_d0 <= ap_const_lv32_0;
        else 
            config_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    config_r_we0_assign_proc : process(m_axi_extMemPtr_V_BVALID, ap_CS_fsm_state19, grp_fu_301_p2, icmp_ln891_reg_893, ap_CS_fsm_state7, ap_CS_fsm_state11, icmp_ln98_reg_976)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state7) and ((icmp_ln891_reg_893 = ap_const_lv1_0) or (grp_fu_301_p2 = ap_const_lv1_0))) or ((icmp_ln98_reg_976 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_extMemPtr_V_BVALID = ap_const_logic_1)))) then 
            config_r_we0 <= ap_const_logic_1;
        else 
            config_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    currentPeriod_fu_690_p3 <= 
        add_ln97_fu_679_p2 when (icmp_ln97_fu_670_p2(0) = '1') else 
        sub_ln97_fu_685_p2;

    extMemPtr_V_blk_n_AR_assign_proc : process(m_axi_extMemPtr_V_ARREADY, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            extMemPtr_V_blk_n_AR <= m_axi_extMemPtr_V_ARREADY;
        else 
            extMemPtr_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    extMemPtr_V_blk_n_AW_assign_proc : process(m_axi_extMemPtr_V_AWREADY, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            extMemPtr_V_blk_n_AW <= m_axi_extMemPtr_V_AWREADY;
        else 
            extMemPtr_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    extMemPtr_V_blk_n_B_assign_proc : process(m_axi_extMemPtr_V_BVALID, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            extMemPtr_V_blk_n_B <= m_axi_extMemPtr_V_BVALID;
        else 
            extMemPtr_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    extMemPtr_V_blk_n_R_assign_proc : process(m_axi_extMemPtr_V_RVALID, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            extMemPtr_V_blk_n_R <= m_axi_extMemPtr_V_RVALID;
        else 
            extMemPtr_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    extMemPtr_V_blk_n_W_assign_proc : process(m_axi_extMemPtr_V_WREADY, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            extMemPtr_V_blk_n_W <= m_axi_extMemPtr_V_WREADY;
        else 
            extMemPtr_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_286_p0 <= auxRawL_V_reg_992;
    grp_fu_290_p0 <= auxRawR_V_reg_997;

    grp_fu_294_ce_assign_proc : process(m_axi_extMemPtr_V_AWREADY, m_axi_extMemPtr_V_WREADY, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_block_state13_io, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((m_axi_extMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_boolean_0 = ap_block_state13_io)) or ((m_axi_extMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            grp_fu_294_ce <= ap_const_logic_1;
        else 
            grp_fu_294_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_294_p0_assign_proc : process(ap_CS_fsm_state13, volRatio_reg_868, ap_CS_fsm_state10, tmp_reg_949, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_294_p0 <= tmp_reg_949;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_294_p0 <= volRatio_reg_868;
        else 
            grp_fu_294_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_294_p1_assign_proc : process(inData_l, inData_r, ap_CS_fsm_state13, periodRatio_reg_873, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_294_p1 <= periodRatio_reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_294_p1 <= inData_r;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_294_p1 <= inData_l;
        else 
            grp_fu_294_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_298_ce_assign_proc : process(m_axi_extMemPtr_V_AWREADY, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((m_axi_extMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            grp_fu_298_ce <= ap_const_logic_1;
        else 
            grp_fu_298_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_301_p2 <= "1" when (unsigned(config_r_q0) < unsigned(maxIndex_V_reg_878)) else "0";
    icmp_ln879_fu_447_p2 <= "1" when (val_assign_9_reg_826 = ap_const_lv31_0) else "0";
    icmp_ln887_1_fu_750_p2 <= "1" when (signed(zext_ln103_fu_704_p1) < signed(sext_ln1354_reg_926)) else "0";
    icmp_ln887_fu_495_p2 <= "1" when (signed(zext_ln90_2_fu_460_p1) < signed(sext_ln1354_fu_492_p1)) else "0";
    icmp_ln97_fu_670_p2 <= "1" when (unsigned(select_ln92_reg_931) < unsigned(i_op_assign_3_reg_252)) else "0";
    icmp_ln98_fu_698_p2 <= "1" when (unsigned(currentPeriod_fu_690_p3) < unsigned(val_V_fu_663_p3)) else "0";
    isNeg_fu_581_p3 <= add_ln339_fu_575_p2(8 downto 8);

    m_axi_extMemPtr_V_ARADDR_assign_proc : process(m_axi_extMemPtr_V_ARREADY, ap_CS_fsm_state20, ap_CS_fsm_state21, extMemPtr_V_addr_2_reg_980, extMemPtr_V_addr_3_reg_986)
    begin
        if ((m_axi_extMemPtr_V_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                m_axi_extMemPtr_V_ARADDR <= extMemPtr_V_addr_3_reg_986;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                m_axi_extMemPtr_V_ARADDR <= extMemPtr_V_addr_2_reg_980;
            else 
                m_axi_extMemPtr_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_extMemPtr_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_extMemPtr_V_ARBURST <= ap_const_lv2_0;
    m_axi_extMemPtr_V_ARCACHE <= ap_const_lv4_0;
    m_axi_extMemPtr_V_ARID <= ap_const_lv1_0;
    m_axi_extMemPtr_V_ARLEN <= ap_const_lv32_1;
    m_axi_extMemPtr_V_ARLOCK <= ap_const_lv2_0;
    m_axi_extMemPtr_V_ARPROT <= ap_const_lv3_0;
    m_axi_extMemPtr_V_ARQOS <= ap_const_lv4_0;
    m_axi_extMemPtr_V_ARREGION <= ap_const_lv4_0;
    m_axi_extMemPtr_V_ARSIZE <= ap_const_lv3_0;
    m_axi_extMemPtr_V_ARUSER <= ap_const_lv1_0;

    m_axi_extMemPtr_V_ARVALID_assign_proc : process(m_axi_extMemPtr_V_ARREADY, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if ((((m_axi_extMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((m_axi_extMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
            m_axi_extMemPtr_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_extMemPtr_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_extMemPtr_V_AWADDR_assign_proc : process(m_axi_extMemPtr_V_AWREADY, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_block_state13_io, extMemPtr_V_addr_reg_920, extMemPtr_V_addr_1_reg_943)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_boolean_0 = ap_block_state13_io))) then 
            m_axi_extMemPtr_V_AWADDR <= extMemPtr_V_addr_1_reg_943;
        elsif (((m_axi_extMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_extMemPtr_V_AWADDR <= extMemPtr_V_addr_reg_920;
        else 
            m_axi_extMemPtr_V_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_extMemPtr_V_AWBURST <= ap_const_lv2_0;
    m_axi_extMemPtr_V_AWCACHE <= ap_const_lv4_0;
    m_axi_extMemPtr_V_AWID <= ap_const_lv1_0;
    m_axi_extMemPtr_V_AWLEN <= ap_const_lv32_1;
    m_axi_extMemPtr_V_AWLOCK <= ap_const_lv2_0;
    m_axi_extMemPtr_V_AWPROT <= ap_const_lv3_0;
    m_axi_extMemPtr_V_AWQOS <= ap_const_lv4_0;
    m_axi_extMemPtr_V_AWREGION <= ap_const_lv4_0;
    m_axi_extMemPtr_V_AWSIZE <= ap_const_lv3_0;
    m_axi_extMemPtr_V_AWUSER <= ap_const_lv1_0;

    m_axi_extMemPtr_V_AWVALID_assign_proc : process(m_axi_extMemPtr_V_AWREADY, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_block_state13_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_boolean_0 = ap_block_state13_io)) or ((m_axi_extMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            m_axi_extMemPtr_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_extMemPtr_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_extMemPtr_V_BREADY_assign_proc : process(m_axi_extMemPtr_V_BVALID, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_extMemPtr_V_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (m_axi_extMemPtr_V_BVALID = ap_const_logic_1)))) then 
            m_axi_extMemPtr_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_extMemPtr_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_extMemPtr_V_RREADY_assign_proc : process(m_axi_extMemPtr_V_RVALID, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state28) and (m_axi_extMemPtr_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_extMemPtr_V_RVALID = ap_const_logic_1)))) then 
            m_axi_extMemPtr_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_extMemPtr_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_extMemPtr_V_WDATA_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, bitcast_ln705_fu_544_p1, bitcast_ln705_1_fu_549_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            m_axi_extMemPtr_V_WDATA <= bitcast_ln705_1_fu_549_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            m_axi_extMemPtr_V_WDATA <= bitcast_ln705_fu_544_p1;
        else 
            m_axi_extMemPtr_V_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_extMemPtr_V_WID <= ap_const_lv1_0;
    m_axi_extMemPtr_V_WLAST <= ap_const_logic_0;
    m_axi_extMemPtr_V_WSTRB <= ap_const_lv4_F;
    m_axi_extMemPtr_V_WUSER <= ap_const_lv1_0;

    m_axi_extMemPtr_V_WVALID_assign_proc : process(m_axi_extMemPtr_V_WREADY, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_block_state13_io)
    begin
        if ((((m_axi_extMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_boolean_0 = ap_block_state13_io)))) then 
            m_axi_extMemPtr_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_extMemPtr_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mantissa_V_fu_606_p4 <= ((ap_const_lv1_1 & tmp_V_1_reg_960) & ap_const_lv1_0);
    maxIndex_V_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_9_reg_826),32));
    or_ln71_fu_318_p2 <= (tmp_16_fu_310_p3 or ap_const_lv6_1);
    or_ln72_fu_333_p2 <= (tmp_16_reg_790 or ap_const_lv6_2);
    or_ln73_fu_347_p2 <= (tmp_16_reg_790 or ap_const_lv6_3);
    or_ln74_fu_371_p2 <= (tmp_16_reg_790 or ap_const_lv6_4);
    or_ln75_fu_389_p2 <= (tmp_16_reg_790 or ap_const_lv6_5);
    or_ln76_fu_403_p2 <= (tmp_16_reg_790 or ap_const_lv6_6);
    p_Result_18_fu_432_p3 <= (ap_const_lv1_0 & trunc_ln368_6_fu_428_p1);
    p_Result_s_fu_417_p3 <= (ap_const_lv1_0 & trunc_ln368_reg_837);
    p_Val2_11_fu_554_p1 <= grp_fu_294_p2;
    periodRatio_fu_440_p1 <= p_Result_18_fu_432_p3;
    r_V_1_fu_635_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_615_p1),to_integer(unsigned('0' & zext_ln1287_fu_625_p1(31-1 downto 0)))));
    r_V_fu_629_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_606_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_622_p1(25-1 downto 0)))));
    ret_V_fu_452_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFE) + signed(maxIndex_V_reg_878));
    select_ln107_fu_761_p3 <= 
        add_ln107_fu_755_p2 when (icmp_ln887_1_fu_750_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln92_fu_507_p3 <= 
        add_ln92_fu_501_p2 when (icmp_ln887_fu_495_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln1311_1_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_970),32));

        sext_ln1311_2_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_970),25));

        sext_ln1311_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_589_p2),9));

        sext_ln1354_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_reg_905),33));

    shl_ln1_fu_708_p3 <= (i_op_assign_3_reg_252 & ap_const_lv1_0);
    shl_ln_fu_464_p3 <= (i_op_assign_2_reg_241 & ap_const_lv1_0);
    sub_ln1311_fu_589_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_reg_954));
    sub_ln97_1_fu_675_p2 <= std_logic_vector(unsigned(select_ln92_reg_931) - unsigned(memSize_reg_820));
    sub_ln97_fu_685_p2 <= std_logic_vector(unsigned(select_ln92_reg_931) - unsigned(i_op_assign_3_reg_252));
    tmp_10_fu_641_p3 <= r_V_fu_629_p2(24 downto 24);
    tmp_16_fu_310_p3 <= (config_offset & ap_const_lv3_0);
    tmp_17_fu_324_p3 <= (ap_const_lv58_0 & or_ln71_fu_318_p2);
    tmp_18_fu_338_p3 <= (ap_const_lv58_0 & or_ln72_fu_333_p2);
    tmp_19_fu_352_p3 <= (ap_const_lv58_0 & or_ln73_fu_347_p2);
    tmp_20_fu_394_p3 <= (ap_const_lv58_0 & or_ln75_fu_389_p2);
    tmp_21_fu_408_p3 <= (ap_const_lv58_0 & or_ln76_fu_403_p2);
    tmp_22_fu_653_p4 <= r_V_1_fu_635_p2(55 downto 24);
    tmp_V_1_fu_568_p1 <= p_Val2_11_fu_554_p1(23 - 1 downto 0);
    tmp_s_fu_376_p3 <= (ap_const_lv58_0 & or_ln74_fu_371_p2);
    trunc_ln368_6_fu_428_p1 <= config_r_q0(31 - 1 downto 0);
    trunc_ln368_fu_385_p1 <= config_r_q0(31 - 1 downto 0);
    ush_fu_598_p3 <= 
        sext_ln1311_fu_594_p1 when (isNeg_fu_581_p3(0) = '1') else 
        add_ln339_fu_575_p2;
    val_V_fu_663_p3 <= 
        zext_ln662_fu_649_p1 when (isNeg_reg_965(0) = '1') else 
        tmp_22_fu_653_p4;
    volRatio_fu_424_p1 <= p_Result_s_fu_417_p3;
    zext_ln103_1_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_708_p3),34));
    zext_ln103_2_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln103_fu_720_p2),64));
    zext_ln103_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_3_reg_252),33));
    zext_ln104_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_fu_735_p2),64));
    zext_ln1287_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_619_p1),79));
    zext_ln339_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_954),9));
    zext_ln662_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_641_p3),32));
    zext_ln682_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_606_p4),79));
    zext_ln90_1_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(memAddr_reg_809),34));
    zext_ln90_2_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_2_reg_241),33));
    zext_ln90_3_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_464_p3),34));
    zext_ln90_4_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln90_fu_476_p2),64));
    zext_ln90_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(memAddr_reg_809),33));
    zext_ln91_1_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_1_fu_529_p2),64));
    zext_ln91_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_fu_519_p2),34));
end behav;
