-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynq_dsp_hls is
generic (
    C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    lrclk_V : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_physMemPtr_V_AWVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_AWREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_physMemPtr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_WREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH/8-1 downto 0);
    m_axi_physMemPtr_V_WLAST : OUT STD_LOGIC;
    m_axi_physMemPtr_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_ARREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_physMemPtr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RVALID : IN STD_LOGIC;
    m_axi_physMemPtr_V_RREADY : OUT STD_LOGIC;
    m_axi_physMemPtr_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RLAST : IN STD_LOGIC;
    m_axi_physMemPtr_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_BVALID : IN STD_LOGIC;
    m_axi_physMemPtr_V_BREADY : OUT STD_LOGIC;
    m_axi_physMemPtr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pynq_dsp_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pynq_dsp_hls,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=24,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=3,HLS_SYN_FF=3217,HLS_SYN_LUT=6415,HLS_VERSION=2019_1_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (51 downto 0) := "0000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (51 downto 0) := "0000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (51 downto 0) := "0000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (51 downto 0) := "0000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (51 downto 0) := "0000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (51 downto 0) := "0000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (51 downto 0) := "0001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (51 downto 0) := "0010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (51 downto 0) := "0100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (51 downto 0) := "1000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_34000000 : STD_LOGIC_VECTOR (31 downto 0) := "00110100000000000000000000000000";
    constant ap_const_lv32_4B000000 : STD_LOGIC_VECTOR (31 downto 0) := "01001011000000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv31_4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_lv32_FF000000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_17 : STD_LOGIC_VECTOR (11 downto 0) := "000000010111";
    constant ap_const_lv12_FE9 : STD_LOGIC_VECTOR (11 downto 0) := "111111101001";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal lrclk_V_0_data_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal lrclk_V_0_vld_reg : STD_LOGIC := '0';
    signal lrclk_V_0_ack_out : STD_LOGIC;
    signal basePhysAddr_V : STD_LOGIC_VECTOR (31 downto 0);
    signal readyRch : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal readyLch : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal physMemPtr_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal physMemPtr_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln761_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln100_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal physMemPtr_V_blk_n_AW : STD_LOGIC;
    signal physMemPtr_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal physMemPtr_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal icmp_ln761_reg_1987 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln100_reg_1996 : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_AWVALID : STD_LOGIC;
    signal physMemPtr_V_AWREADY : STD_LOGIC;
    signal physMemPtr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_WVALID : STD_LOGIC;
    signal physMemPtr_V_WREADY : STD_LOGIC;
    signal physMemPtr_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_ARVALID : STD_LOGIC;
    signal physMemPtr_V_ARREADY : STD_LOGIC;
    signal physMemPtr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_RVALID : STD_LOGIC;
    signal physMemPtr_V_RREADY : STD_LOGIC;
    signal physMemPtr_V_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_RLAST : STD_LOGIC;
    signal physMemPtr_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal physMemPtr_V_BVALID : STD_LOGIC;
    signal physMemPtr_V_BREADY : STD_LOGIC;
    signal physMemPtr_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal physMemPtr_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal icmp_ln935_reg_2203 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal icmp_ln935_1_reg_2254 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_295_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_reg_1953 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln215_fu_305_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln215_reg_1958 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_fu_309_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_reg_1963 : STD_LOGIC_VECTOR (30 downto 0);
    signal status_V_reg_1982 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op93_readreq_state10 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal xor_ln95_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_3_fu_381_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_3_reg_2006 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal lsignExt_V_1_fu_410_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsignExt_V_1_reg_2018 : STD_LOGIC_VECTOR (31 downto 0);
    signal rsignExt_V_1_fu_432_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rsignExt_V_1_reg_2023 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_2028 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_1_reg_2033 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal rsrcf_reg_2038 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal trunc_ln556_fu_444_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln556_reg_2044 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal p_Result_10_reg_2049 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln565_fu_470_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_2054 : STD_LOGIC_VECTOR (51 downto 0);
    signal F2_fu_474_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_2059 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_497_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_2067 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal sh_amt_fu_524_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_2072 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln583_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln583_reg_2077 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln585_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_reg_2082 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_reg_2087 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln585_fu_633_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln585_reg_2092 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln603_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_reg_2097 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln556_1_fu_663_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln556_1_reg_2102 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_12_reg_2107 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln565_1_fu_689_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_1_reg_2112 : STD_LOGIC_VECTOR (51 downto 0);
    signal F2_1_fu_693_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_1_reg_2117 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln581_fu_699_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln581_reg_2125 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal select_ln585_1_fu_719_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln585_1_reg_2130 : STD_LOGIC_VECTOR (31 downto 0);
    signal man_V_5_fu_743_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_5_reg_2135 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_1_fu_770_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_reg_2140 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln583_1_fu_783_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln583_1_reg_2145 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln585_1_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_1_reg_2150 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_1_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_1_reg_2155 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln585_2_fu_878_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln585_2_reg_2160 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln603_1_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_1_reg_2165 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_6_fu_908_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_6_reg_2170 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal sext_ln581_1_fu_914_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln581_1_reg_2176 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln585_3_fu_934_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln585_3_reg_2181 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_14_reg_2186 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_949_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_reg_2192 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_7_fu_959_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_7_reg_2197 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal icmp_ln935_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_8_fu_970_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_8_reg_2208 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_fu_993_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_2216 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln947_fu_999_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln947_reg_2223 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln943_fu_1003_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_2228 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_17_reg_2233 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_1015_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_4_reg_2239 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_1107_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_2244 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal icmp_ln958_fu_1115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_2249 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_1_fu_1121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_9_fu_1126_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_9_reg_2259 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_1_fu_1149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_1_reg_2267 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln947_1_fu_1155_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln947_1_reg_2274 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln943_1_fu_1159_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_1_reg_2279 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_2284 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_19_reg_2289 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_1_fu_1299_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_1_reg_2294 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_1_fu_1307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_1_reg_2299 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_1341_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_16_reg_2304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal m_s_reg_2309 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_23_reg_2314 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln739_fu_1403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal p_Result_19_fu_1435_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_19_reg_2324 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_1_fu_1447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal reg_V_fu_1455_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_reg_2334 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_20_reg_2339 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_fu_1488_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln270_reg_2344 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln278_fu_1492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_2349 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_2_fu_1498_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_2_reg_2356 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln282_fu_1504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_reg_2364 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_1510_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_reg_2370 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal icmp_ln285_fu_1525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_2375 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_3_fu_1530_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_3_reg_2380 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_fu_1585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_reg_2385 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_1597_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_reg_2390 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_fu_1617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_reg_2395 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_V_1_fu_1627_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_1_reg_2400 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_21_reg_2405 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_1_fu_1660_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln270_1_reg_2410 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln278_1_fu_1664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_1_reg_2415 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_4_fu_1670_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_4_reg_2422 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln282_1_fu_1676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_1_reg_2430 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_1_fu_1736_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln285_1_reg_2436 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_9_fu_1744_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_reg_2442 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln285_1_fu_1759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_1_reg_2447 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_5_fu_1764_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_5_reg_2452 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_1_fu_1819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_1_reg_2457 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_2_fu_1831_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_2_reg_2462 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_1_fu_1851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_1_reg_2467 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln303_fu_1862_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln303_reg_2472 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal select_ln285_3_fu_1922_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln285_3_reg_2477 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln303_1_fu_1935_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln303_1_reg_2483 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_readyRch_flag_1_phi_fu_234_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyRch_flag_1_reg_230 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op402_writeresp_state52 : BOOLEAN;
    signal ap_block_state52 : BOOLEAN;
    signal ap_phi_mux_readyRch_new_1_phi_fu_249_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyRch_new_1_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_readyLch_flag_1_phi_fu_264_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyLch_flag_1_reg_260 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln544_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_274_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_280_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln100_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln95_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln100_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln100_1_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_396_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_4_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_418_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_5_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_456_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln461_fu_466_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_480_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_11_fu_487_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_491_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln581_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_514_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_519_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_fu_547_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal bitcast_ln696_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_567_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln582_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_575_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln582_fu_595_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln581_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ireg_V_1_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_1_fu_675_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln461_1_fu_685_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln586_fu_702_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_706_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal and_ln585_1_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_fu_711_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_726_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_13_fu_733_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_4_fu_737_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln581_1_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_1_fu_760_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_1_fu_765_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_793_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal bitcast_ln696_2_fu_809_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_812_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_1_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_1_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_1_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln582_1_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_1_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_1_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_1_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_2_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_1_fu_820_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln582_1_fu_840_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln581_1_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_1_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_1_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_904_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_1_fu_917_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_1_fu_921_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal and_ln585_3_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_1_fu_926_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln604_1_fu_955_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_15_fu_975_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_985_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_1021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_1026_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln947_fu_1042_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_fu_1047_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_fu_1051_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_1057_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln947_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_1074_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_1088_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_1082_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_1068_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_2_fu_1101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_1131_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_1_fu_1141_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_fu_1163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_1173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_1168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_fu_1178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_2_fu_1183_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_3_fu_1190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_1_fu_1213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1218_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln947_1_fu_1234_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_1_fu_1239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_1_fu_1243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_1249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln947_2_fu_1228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_3_fu_1254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_1266_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_1280_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_1_fu_1274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_1_fu_1287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_1_fu_1260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_1293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_fu_1323_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_fu_1316_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_1328_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_11_fu_1313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1334_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln958_1_fu_1353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_1_fu_1363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_1_fu_1358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_1_fu_1368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_7_fu_1373_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_8_fu_1380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln964_1_fu_1417_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_1_fu_1410_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_1_fu_1422_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_12_fu_1407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1428_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln705_fu_1451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_14_fu_1474_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln262_fu_1462_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_fu_1484_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_25_fu_1535_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln281_fu_1517_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln278_fu_1557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_1562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln282_fu_1575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_1520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_1579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_1591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_fu_1551_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_fu_1567_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_fu_1605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_fu_1545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_1611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln705_1_fu_1623_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_fu_1646_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln262_1_fu_1634_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_1_fu_1656_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_26_fu_1688_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln283_fu_1682_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_fu_1685_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln297_fu_1703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln285_fu_1709_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln295_fu_1712_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln285_fu_1726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_1_fu_1731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_1695_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln278_fu_1719_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_1769_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln281_1_fu_1751_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln278_1_fu_1791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_1_fu_1796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln282_1_fu_1809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_fu_1754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_1_fu_1813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_2_fu_1825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_1_fu_1785_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_1_fu_1801_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_1_fu_1839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_1_fu_1779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_1_fu_1845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln461_fu_1857_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_1874_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln283_1_fu_1868_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_1_fu_1871_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln297_1_fu_1889_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln285_1_fu_1895_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln295_1_fu_1898_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln285_1_fu_1912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_3_fu_1917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_1_fu_1881_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln278_1_fu_1905_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln461_1_fu_1930_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (51 downto 0);

    component pynq_dsp_hls_fmulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_sitocud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fpexdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pynq_dsp_hls_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        basePhysAddr_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_physMemPtr_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    pynq_dsp_hls_AXILiteS_s_axi_U : component pynq_dsp_hls_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        basePhysAddr_V => basePhysAddr_V);

    pynq_dsp_hls_physMemPtr_V_m_axi_U : component pynq_dsp_hls_physMemPtr_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PHYSMEMPTR_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_PHYSMEMPTR_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_PHYSMEMPTR_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PHYSMEMPTR_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PHYSMEMPTR_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_physMemPtr_V_AWVALID,
        AWREADY => m_axi_physMemPtr_V_AWREADY,
        AWADDR => m_axi_physMemPtr_V_AWADDR,
        AWID => m_axi_physMemPtr_V_AWID,
        AWLEN => m_axi_physMemPtr_V_AWLEN,
        AWSIZE => m_axi_physMemPtr_V_AWSIZE,
        AWBURST => m_axi_physMemPtr_V_AWBURST,
        AWLOCK => m_axi_physMemPtr_V_AWLOCK,
        AWCACHE => m_axi_physMemPtr_V_AWCACHE,
        AWPROT => m_axi_physMemPtr_V_AWPROT,
        AWQOS => m_axi_physMemPtr_V_AWQOS,
        AWREGION => m_axi_physMemPtr_V_AWREGION,
        AWUSER => m_axi_physMemPtr_V_AWUSER,
        WVALID => m_axi_physMemPtr_V_WVALID,
        WREADY => m_axi_physMemPtr_V_WREADY,
        WDATA => m_axi_physMemPtr_V_WDATA,
        WSTRB => m_axi_physMemPtr_V_WSTRB,
        WLAST => m_axi_physMemPtr_V_WLAST,
        WID => m_axi_physMemPtr_V_WID,
        WUSER => m_axi_physMemPtr_V_WUSER,
        ARVALID => m_axi_physMemPtr_V_ARVALID,
        ARREADY => m_axi_physMemPtr_V_ARREADY,
        ARADDR => m_axi_physMemPtr_V_ARADDR,
        ARID => m_axi_physMemPtr_V_ARID,
        ARLEN => m_axi_physMemPtr_V_ARLEN,
        ARSIZE => m_axi_physMemPtr_V_ARSIZE,
        ARBURST => m_axi_physMemPtr_V_ARBURST,
        ARLOCK => m_axi_physMemPtr_V_ARLOCK,
        ARCACHE => m_axi_physMemPtr_V_ARCACHE,
        ARPROT => m_axi_physMemPtr_V_ARPROT,
        ARQOS => m_axi_physMemPtr_V_ARQOS,
        ARREGION => m_axi_physMemPtr_V_ARREGION,
        ARUSER => m_axi_physMemPtr_V_ARUSER,
        RVALID => m_axi_physMemPtr_V_RVALID,
        RREADY => m_axi_physMemPtr_V_RREADY,
        RDATA => m_axi_physMemPtr_V_RDATA,
        RLAST => m_axi_physMemPtr_V_RLAST,
        RID => m_axi_physMemPtr_V_RID,
        RUSER => m_axi_physMemPtr_V_RUSER,
        RRESP => m_axi_physMemPtr_V_RRESP,
        BVALID => m_axi_physMemPtr_V_BVALID,
        BREADY => m_axi_physMemPtr_V_BREADY,
        BRESP => m_axi_physMemPtr_V_BRESP,
        BID => m_axi_physMemPtr_V_BID,
        BUSER => m_axi_physMemPtr_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => physMemPtr_V_ARVALID,
        I_ARREADY => physMemPtr_V_ARREADY,
        I_ARADDR => physMemPtr_V_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => physMemPtr_V_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => physMemPtr_V_RVALID,
        I_RREADY => physMemPtr_V_RREADY,
        I_RDATA => physMemPtr_V_RDATA,
        I_RID => physMemPtr_V_RID,
        I_RUSER => physMemPtr_V_RUSER,
        I_RRESP => physMemPtr_V_RRESP,
        I_RLAST => physMemPtr_V_RLAST,
        I_AWVALID => physMemPtr_V_AWVALID,
        I_AWREADY => physMemPtr_V_AWREADY,
        I_AWADDR => physMemPtr_V_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_2,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => physMemPtr_V_WVALID,
        I_WREADY => physMemPtr_V_WREADY,
        I_WDATA => physMemPtr_V_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => physMemPtr_V_BVALID,
        I_BREADY => physMemPtr_V_BREADY,
        I_BRESP => physMemPtr_V_BRESP,
        I_BID => physMemPtr_V_BID,
        I_BUSER => physMemPtr_V_BUSER);

    pynq_dsp_hls_fmulbkb_U1 : component pynq_dsp_hls_fmulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_274_p0,
        din1 => grp_fu_274_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p2);

    pynq_dsp_hls_sitocud_U2 : component pynq_dsp_hls_sitocud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_280_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_280_p1);

    pynq_dsp_hls_fpexdEe_U3 : component pynq_dsp_hls_fpexdEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_283_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_283_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    lrclk_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    readyLch_flag_1_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln761_fu_325_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln100_fu_365_p2 = ap_const_lv1_1))) then 
                readyLch_flag_1_reg_260 <= xor_ln95_fu_343_p2;
            elsif ((not(((ap_predicate_op402_writeresp_state52 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (or_ln100_reg_1996 = ap_const_lv1_0) and (icmp_ln761_reg_1987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                readyLch_flag_1_reg_260 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln761_fu_325_p2 = ap_const_lv1_1))) then 
                readyLch_flag_1_reg_260 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    readyRch_flag_1_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln761_fu_325_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln100_fu_365_p2 = ap_const_lv1_1))) then 
                readyRch_flag_1_reg_230 <= lrclk_V_0_data_reg;
            elsif ((not(((ap_predicate_op402_writeresp_state52 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (or_ln100_reg_1996 = ap_const_lv1_0) and (icmp_ln761_reg_1987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                readyRch_flag_1_reg_230 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln761_fu_325_p2 = ap_const_lv1_1))) then 
                readyRch_flag_1_reg_230 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    readyRch_new_1_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln761_fu_325_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln100_fu_365_p2 = ap_const_lv1_1))) then 
                readyRch_new_1_reg_244 <= ap_const_lv1_1;
            elsif ((not(((ap_predicate_op402_writeresp_state52 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (or_ln100_reg_1996 = ap_const_lv1_0) and (icmp_ln761_reg_1987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                readyRch_new_1_reg_244 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                F2_1_reg_2117 <= F2_1_fu_693_p2;
                and_ln581_reg_2087 <= and_ln581_fu_615_p2;
                and_ln603_reg_2097 <= and_ln603_fu_653_p2;
                icmp_ln585_reg_2082 <= icmp_ln585_fu_541_p2;
                man_V_2_reg_2067 <= man_V_2_fu_497_p3;
                p_Result_12_reg_2107 <= ireg_V_1_fu_659_p1(63 downto 63);
                select_ln585_reg_2092 <= select_ln585_fu_633_p3;
                sh_amt_reg_2072 <= sh_amt_fu_524_p3;
                trunc_ln556_1_reg_2102 <= trunc_ln556_1_fu_663_p1;
                trunc_ln565_1_reg_2112 <= trunc_ln565_1_fu_689_p1;
                trunc_ln583_reg_2077 <= trunc_ln583_fu_537_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                F2_reg_2059 <= F2_fu_474_p2;
                p_Result_10_reg_2049 <= ireg_V_fu_440_p1(63 downto 63);
                trunc_ln556_reg_2044 <= trunc_ln556_fu_444_p1;
                trunc_ln565_reg_2054 <= trunc_ln565_fu_470_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                and_ln284_1_reg_2457 <= and_ln284_1_fu_1819_p2;
                icmp_ln285_1_reg_2447 <= icmp_ln285_1_fu_1759_p2;
                select_ln285_1_reg_2436 <= select_ln285_1_fu_1736_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                and_ln284_reg_2385 <= and_ln284_fu_1585_p2;
                icmp_ln278_1_reg_2415 <= icmp_ln278_1_fu_1664_p2;
                icmp_ln282_1_reg_2430 <= icmp_ln282_1_fu_1676_p2;
                icmp_ln285_reg_2375 <= icmp_ln285_fu_1525_p2;
                p_Result_21_reg_2405 <= reg_V_1_fu_1627_p3(31 downto 31);
                reg_V_1_reg_2400 <= reg_V_1_fu_1627_p3;
                sh_amt_4_reg_2422 <= sh_amt_4_fu_1670_p2;
                trunc_ln270_1_reg_2410 <= trunc_ln270_1_fu_1660_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln278_1_reg_2415 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                and_ln295_1_reg_2467 <= and_ln295_1_fu_1851_p2;
                select_ln285_2_reg_2462 <= select_ln285_2_fu_1831_p3;
                sh_amt_5_reg_2452 <= sh_amt_5_fu_1764_p2;
                    tmp_9_reg_2442(22 downto 0) <= tmp_9_fu_1744_p3(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln278_reg_2349 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                and_ln295_reg_2395 <= and_ln295_fu_1617_p2;
                select_ln285_reg_2390 <= select_ln285_fu_1597_p3;
                sh_amt_3_reg_2380 <= sh_amt_3_fu_1530_p2;
                    tmp_8_reg_2370(22 downto 0) <= tmp_8_fu_1510_p3(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                and_ln581_1_reg_2155 <= and_ln581_1_fu_860_p2;
                and_ln603_1_reg_2165 <= and_ln603_1_fu_898_p2;
                icmp_ln585_1_reg_2150 <= icmp_ln585_1_fu_787_p2;
                man_V_5_reg_2135 <= man_V_5_fu_743_p3;
                select_ln585_2_reg_2160 <= select_ln585_2_fu_878_p3;
                sext_ln581_reg_2125 <= sext_ln581_fu_699_p1;
                sh_amt_1_reg_2140 <= sh_amt_1_fu_770_p3;
                trunc_ln583_1_reg_2145 <= trunc_ln583_1_fu_783_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                icmp_ln278_reg_2349 <= icmp_ln278_fu_1492_p2;
                icmp_ln282_reg_2364 <= icmp_ln282_fu_1504_p2;
                p_Result_20_reg_2339 <= reg_V_fu_1455_p3(31 downto 31);
                reg_V_reg_2334 <= reg_V_fu_1455_p3;
                sh_amt_2_reg_2356 <= sh_amt_2_fu_1498_p2;
                trunc_ln270_reg_2344 <= trunc_ln270_fu_1488_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                icmp_ln761_reg_1987 <= icmp_ln761_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                icmp_ln935_1_reg_2254 <= icmp_ln935_1_fu_1121_p2;
                sub_ln944_1_reg_2267 <= sub_ln944_1_fu_1149_p2;
                tmp_V_9_reg_2259 <= tmp_V_9_fu_1126_p3;
                trunc_ln943_1_reg_2279 <= trunc_ln943_1_fu_1159_p1;
                trunc_ln947_1_reg_2274 <= trunc_ln947_1_fu_1155_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                icmp_ln935_reg_2203 <= icmp_ln935_fu_965_p2;
                p_Result_17_reg_2233 <= tmp_V_7_fu_959_p3(31 downto 31);
                sub_ln944_reg_2216 <= sub_ln944_fu_993_p2;
                tmp_V_4_reg_2239 <= tmp_V_4_fu_1015_p2;
                tmp_V_7_reg_2197 <= tmp_V_7_fu_959_p3;
                tmp_V_8_reg_2208 <= tmp_V_8_fu_970_p3;
                trunc_ln943_reg_2228 <= trunc_ln943_fu_1003_p1;
                trunc_ln947_reg_2223 <= trunc_ln947_fu_999_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_1_reg_2254 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                icmp_ln958_1_reg_2299 <= icmp_ln958_1_fu_1307_p2;
                    or_ln949_1_reg_2294(0) <= or_ln949_1_fu_1299_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_2203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                icmp_ln958_reg_2249 <= icmp_ln958_fu_1115_p2;
                    or_ln_reg_2244(0) <= or_ln_fu_1107_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lrclk_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lrclk_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (lrclk_V_0_vld_reg = ap_const_logic_1)))) then
                lrclk_V_0_data_reg <= lrclk_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                lsignExt_V_1_reg_2018 <= lsignExt_V_1_fu_410_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_2203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                m_reg_2284 <= m_3_fu_1190_p2(31 downto 1);
                tmp_19_reg_2289 <= m_3_fu_1190_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_1_reg_2254 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                m_s_reg_2309 <= m_8_fu_1380_p2(31 downto 1);
                tmp_23_reg_2314 <= m_8_fu_1380_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln761_fu_325_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                or_ln100_reg_1996 <= or_ln100_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                p_Result_14_reg_2186 <= tmp_V_6_fu_908_p3(31 downto 31);
                sext_ln581_1_reg_2176 <= sext_ln581_1_fu_914_p1;
                tmp_V_6_reg_2170 <= tmp_V_6_fu_908_p3;
                tmp_V_reg_2192 <= tmp_V_fu_949_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_2203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                p_Result_16_reg_2304 <= p_Result_16_fu_1341_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_1_reg_2254 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                p_Result_19_reg_2324 <= p_Result_19_fu_1435_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                r_V_reg_1953 <= basePhysAddr_V(31 downto 2);
                ret_V_reg_1963 <= ret_V_fu_309_p2;
                    zext_ln215_reg_1958(29 downto 0) <= zext_ln215_fu_305_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op402_writeresp_state52 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_phi_mux_readyLch_flag_1_phi_fu_264_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                readyLch <= ap_phi_mux_readyRch_new_1_phi_fu_249_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op402_writeresp_state52 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_phi_mux_readyRch_flag_1_phi_fu_234_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                readyRch <= ap_phi_mux_readyRch_new_1_phi_fu_249_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((physMemPtr_V_RVALID = ap_const_logic_0) or (physMemPtr_V_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then
                reg_286 <= physMemPtr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((icmp_ln935_1_reg_2254 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((icmp_ln935_reg_2203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then
                reg_290 <= grp_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                ret_V_3_reg_2006 <= ret_V_3_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                rsignExt_V_1_reg_2023 <= rsignExt_V_1_fu_432_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                rsrcf_reg_2038 <= grp_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                select_ln285_3_reg_2477 <= select_ln285_3_fu_1922_p3;
                select_ln303_reg_2472 <= select_ln303_fu_1862_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                select_ln303_1_reg_2483 <= select_ln303_1_fu_1935_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln603_reg_2097) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                select_ln585_1_reg_2130 <= select_ln585_1_fu_719_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln603_1_reg_2165) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                select_ln585_3_reg_2181 <= select_ln585_3_fu_934_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                status_V_reg_1982 <= physMemPtr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_1_reg_2033 <= grp_fu_280_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_reg_2028 <= grp_fu_280_p1;
            end if;
        end if;
    end process;
    zext_ln215_reg_1958(30) <= '0';
    or_ln_reg_2244(31 downto 1) <= "0000000000000000000000000000000";
    or_ln949_1_reg_2294(31 downto 1) <= "0000000000000000000000000000000";
    tmp_8_reg_2370(23) <= '1';
    tmp_9_reg_2442(23) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, icmp_ln761_fu_325_p2, or_ln100_fu_365_p2, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state52, physMemPtr_V_AWREADY, physMemPtr_V_WREADY, physMemPtr_V_ARREADY, physMemPtr_V_RVALID, physMemPtr_V_BVALID, ap_block_state10_io, ap_predicate_op402_writeresp_state52)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((or_ln100_fu_365_p2 = ap_const_lv1_0) and (icmp_ln761_fu_325_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and ((or_ln100_fu_365_p2 = ap_const_lv1_1) or (icmp_ln761_fu_325_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if ((not(((physMemPtr_V_RVALID = ap_const_logic_0) or (physMemPtr_V_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if ((not(((ap_predicate_op402_writeresp_state52 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_1_fu_693_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_1_fu_685_p1));
    F2_fu_474_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_466_p1));
    a_1_fu_1260_p2 <= (icmp_ln947_3_fu_1254_p2 and icmp_ln947_2_fu_1228_p2);
    a_fu_1068_p2 <= (icmp_ln947_fu_1036_p2 and icmp_ln947_1_fu_1062_p2);
    add_ln581_1_fu_760_p2 <= std_logic_vector(signed(ap_const_lv12_FE9) + signed(F2_1_reg_2117));
    add_ln581_fu_514_p2 <= std_logic_vector(signed(ap_const_lv12_FE9) + signed(F2_reg_2059));
    add_ln958_1_fu_1353_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_1_reg_2267));
    add_ln958_fu_1163_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_2216));
    add_ln964_1_fu_1422_p2 <= std_logic_vector(unsigned(sub_ln964_1_fu_1417_p2) + unsigned(select_ln964_1_fu_1410_p3));
    add_ln964_fu_1328_p2 <= std_logic_vector(unsigned(sub_ln964_fu_1323_p2) + unsigned(select_ln964_fu_1316_p3));
    and_ln100_fu_354_p2 <= (xor_ln100_fu_348_p2 and lrclk_V_0_data_reg);
    and_ln282_1_fu_1796_p2 <= (xor_ln278_1_fu_1791_p2 and icmp_ln282_1_reg_2430);
    and_ln282_fu_1562_p2 <= (xor_ln278_fu_1557_p2 and icmp_ln282_reg_2364);
    and_ln284_1_fu_1819_p2 <= (xor_ln282_1_fu_1813_p2 and icmp_ln284_1_fu_1754_p2);
    and_ln284_fu_1585_p2 <= (xor_ln282_fu_1579_p2 and icmp_ln284_fu_1520_p2);
    and_ln285_1_fu_1731_p2 <= (xor_ln285_fu_1726_p2 and and_ln284_reg_2385);
    and_ln285_2_fu_1825_p2 <= (icmp_ln285_1_fu_1759_p2 and and_ln284_1_fu_1819_p2);
    and_ln285_3_fu_1917_p2 <= (xor_ln285_1_fu_1912_p2 and and_ln284_1_reg_2457);
    and_ln285_fu_1591_p2 <= (icmp_ln285_fu_1525_p2 and and_ln284_fu_1585_p2);
    and_ln295_1_fu_1851_p2 <= (xor_ln284_1_fu_1845_p2 and icmp_ln295_1_fu_1779_p2);
    and_ln295_fu_1617_p2 <= (xor_ln284_fu_1611_p2 and icmp_ln295_fu_1545_p2);
    and_ln581_1_fu_860_p2 <= (xor_ln582_1_fu_854_p2 and icmp_ln581_1_fu_755_p2);
    and_ln581_fu_615_p2 <= (xor_ln582_fu_609_p2 and icmp_ln581_fu_509_p2);
    and_ln582_1_fu_834_p2 <= (xor_ln571_1_fu_828_p2 and icmp_ln582_1_fu_778_p2);
    and_ln582_fu_589_p2 <= (xor_ln571_fu_583_p2 and icmp_ln582_fu_532_p2);
    and_ln585_1_fu_715_p2 <= (icmp_ln585_reg_2082 and and_ln581_reg_2087);
    and_ln585_2_fu_872_p2 <= (xor_ln585_1_fu_866_p2 and and_ln581_1_fu_860_p2);
    and_ln585_3_fu_930_p2 <= (icmp_ln585_1_reg_2150 and and_ln581_1_reg_2155);
    and_ln585_fu_627_p2 <= (xor_ln585_fu_621_p2 and and_ln581_fu_615_p2);
    and_ln603_1_fu_898_p2 <= (xor_ln581_1_fu_892_p2 and icmp_ln603_1_fu_803_p2);
    and_ln603_fu_653_p2 <= (xor_ln581_fu_647_p2 and icmp_ln603_fu_557_p2);
    and_ln949_1_fu_1287_p2 <= (xor_ln949_1_fu_1274_p2 and p_Result_6_fu_1280_p3);
    and_ln949_fu_1095_p2 <= (xor_ln949_fu_1082_p2 and p_Result_1_fu_1088_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_io_assign_proc : process(physMemPtr_V_ARREADY, ap_predicate_op93_readreq_state10)
    begin
                ap_block_state10_io <= ((ap_predicate_op93_readreq_state10 = ap_const_boolean_1) and (physMemPtr_V_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state52_assign_proc : process(physMemPtr_V_BVALID, ap_predicate_op402_writeresp_state52)
    begin
                ap_block_state52 <= ((ap_predicate_op402_writeresp_state52 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state52, physMemPtr_V_BVALID, ap_predicate_op402_writeresp_state52)
    begin
        if ((not(((ap_predicate_op402_writeresp_state52 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_readyLch_flag_1_phi_fu_264_p6_assign_proc : process(ap_CS_fsm_state52, icmp_ln761_reg_1987, or_ln100_reg_1996, readyLch_flag_1_reg_260)
    begin
        if (((or_ln100_reg_1996 = ap_const_lv1_0) and (icmp_ln761_reg_1987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            ap_phi_mux_readyLch_flag_1_phi_fu_264_p6 <= ap_const_lv1_1;
        else 
            ap_phi_mux_readyLch_flag_1_phi_fu_264_p6 <= readyLch_flag_1_reg_260;
        end if; 
    end process;


    ap_phi_mux_readyRch_flag_1_phi_fu_234_p6_assign_proc : process(ap_CS_fsm_state52, icmp_ln761_reg_1987, or_ln100_reg_1996, readyRch_flag_1_reg_230)
    begin
        if (((or_ln100_reg_1996 = ap_const_lv1_0) and (icmp_ln761_reg_1987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            ap_phi_mux_readyRch_flag_1_phi_fu_234_p6 <= ap_const_lv1_1;
        else 
            ap_phi_mux_readyRch_flag_1_phi_fu_234_p6 <= readyRch_flag_1_reg_230;
        end if; 
    end process;


    ap_phi_mux_readyRch_new_1_phi_fu_249_p6_assign_proc : process(ap_CS_fsm_state52, icmp_ln761_reg_1987, or_ln100_reg_1996, readyRch_new_1_reg_244)
    begin
        if (((or_ln100_reg_1996 = ap_const_lv1_0) and (icmp_ln761_reg_1987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            ap_phi_mux_readyRch_new_1_phi_fu_249_p6 <= ap_const_lv1_0;
        else 
            ap_phi_mux_readyRch_new_1_phi_fu_249_p6 <= readyRch_new_1_reg_244;
        end if; 
    end process;


    ap_predicate_op402_writeresp_state52_assign_proc : process(icmp_ln761_reg_1987, or_ln100_reg_1996)
    begin
                ap_predicate_op402_writeresp_state52 <= ((or_ln100_reg_1996 = ap_const_lv1_0) and (icmp_ln761_reg_1987 = ap_const_lv1_0));
    end process;


    ap_predicate_op93_readreq_state10_assign_proc : process(icmp_ln761_fu_325_p2, or_ln100_fu_365_p2)
    begin
                ap_predicate_op93_readreq_state10 <= ((or_ln100_fu_365_p2 = ap_const_lv1_0) and (icmp_ln761_fu_325_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state52, physMemPtr_V_BVALID, ap_predicate_op402_writeresp_state52)
    begin
        if ((not(((ap_predicate_op402_writeresp_state52 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ashr_ln586_1_fu_921_p2 <= std_logic_vector(shift_right(signed(man_V_5_reg_2135),to_integer(unsigned('0' & zext_ln586_1_fu_917_p1(31-1 downto 0)))));
    ashr_ln586_fu_706_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_2067),to_integer(unsigned('0' & zext_ln586_fu_702_p1(31-1 downto 0)))));
    bitcast_ln696_2_fu_809_p1 <= rsrcf_reg_2038;
    bitcast_ln696_fu_563_p1 <= reg_290;
    bitcast_ln705_1_fu_1623_p1 <= reg_290;
    bitcast_ln705_fu_1451_p1 <= reg_290;
    bitcast_ln739_1_fu_1447_p1 <= p_Result_19_reg_2324;
    bitcast_ln739_fu_1403_p1 <= p_Result_16_reg_2304;
    exp_V_1_fu_1656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_3_fu_1646_p4),9));
    exp_V_fu_1484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_14_fu_1474_p4),9));
    exp_tmp_V_1_fu_675_p4 <= ireg_V_1_fu_659_p1(62 downto 52);
    exp_tmp_V_fu_456_p4 <= ireg_V_fu_440_p1(62 downto 52);

    grp_fu_274_p0_assign_proc : process(tmp_reg_2028, tmp_1_reg_2033, ap_CS_fsm_state25, bitcast_ln739_fu_1403_p1, ap_CS_fsm_state38, bitcast_ln739_1_fu_1447_p1, ap_CS_fsm_state39, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_274_p0 <= bitcast_ln739_1_fu_1447_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_274_p0 <= bitcast_ln739_fu_1403_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_274_p0 <= tmp_1_reg_2033;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_274_p0 <= tmp_reg_2028;
        else 
            grp_fu_274_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_274_p1_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_274_p1 <= ap_const_lv32_4B000000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_274_p1 <= ap_const_lv32_34000000;
        else 
            grp_fu_274_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_280_p0_assign_proc : process(lsignExt_V_1_reg_2018, rsignExt_V_1_reg_2023, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_280_p0 <= rsignExt_V_1_reg_2023;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_280_p0 <= lsignExt_V_1_reg_2018;
        else 
            grp_fu_280_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_283_p0_assign_proc : process(reg_290, rsrcf_reg_2038, ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_283_p0 <= rsrcf_reg_2038;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_283_p0 <= reg_290;
        else 
            grp_fu_283_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln278_1_fu_1664_p2 <= "1" when (trunc_ln262_1_fu_1634_p1 = ap_const_lv31_0) else "0";
    icmp_ln278_fu_1492_p2 <= "1" when (trunc_ln262_fu_1462_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_1_fu_1676_p2 <= "1" when (p_Result_3_fu_1646_p4 = ap_const_lv8_96) else "0";
    icmp_ln282_fu_1504_p2 <= "1" when (p_Result_s_14_fu_1474_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_1_fu_1754_p2 <= "1" when (signed(sh_amt_4_reg_2422) > signed(ap_const_lv9_0)) else "0";
    icmp_ln284_fu_1520_p2 <= "1" when (signed(sh_amt_2_reg_2356) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_1_fu_1759_p2 <= "1" when (signed(sh_amt_4_reg_2422) < signed(ap_const_lv9_19)) else "0";
    icmp_ln285_fu_1525_p2 <= "1" when (signed(sh_amt_2_reg_2356) < signed(ap_const_lv9_19)) else "0";
    icmp_ln295_1_fu_1779_p2 <= "1" when (signed(tmp_28_fu_1769_p4) < signed(ap_const_lv4_1)) else "0";
    icmp_ln295_fu_1545_p2 <= "1" when (signed(tmp_25_fu_1535_p4) < signed(ap_const_lv4_1)) else "0";
    icmp_ln571_1_fu_750_p2 <= "1" when (trunc_ln556_1_reg_2102 = ap_const_lv63_0) else "0";
    icmp_ln571_fu_504_p2 <= "1" when (trunc_ln556_reg_2044 = ap_const_lv63_0) else "0";
    icmp_ln581_1_fu_755_p2 <= "1" when (signed(F2_1_reg_2117) > signed(ap_const_lv12_17)) else "0";
    icmp_ln581_fu_509_p2 <= "1" when (signed(F2_reg_2059) > signed(ap_const_lv12_17)) else "0";
    icmp_ln582_1_fu_778_p2 <= "1" when (F2_1_reg_2117 = ap_const_lv12_17) else "0";
    icmp_ln582_fu_532_p2 <= "1" when (F2_reg_2059 = ap_const_lv12_17) else "0";
    icmp_ln585_1_fu_787_p2 <= "1" when (unsigned(sh_amt_1_fu_770_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln585_fu_541_p2 <= "1" when (unsigned(sh_amt_fu_524_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_1_fu_803_p2 <= "1" when (tmp_14_fu_793_p4 = ap_const_lv7_0) else "0";
    icmp_ln603_fu_557_p2 <= "1" when (tmp_11_fu_547_p4 = ap_const_lv7_0) else "0";
    icmp_ln761_fu_325_p2 <= "1" when (status_V_reg_1982 = ap_const_lv32_0) else "0";
    icmp_ln935_1_fu_1121_p2 <= "1" when (tmp_V_7_reg_2197 = ap_const_lv32_0) else "0";
    icmp_ln935_fu_965_p2 <= "1" when (tmp_V_6_reg_2170 = ap_const_lv32_0) else "0";
    icmp_ln947_1_fu_1062_p2 <= "0" when (p_Result_s_fu_1057_p2 = ap_const_lv32_0) else "1";
    icmp_ln947_2_fu_1228_p2 <= "1" when (signed(tmp_21_fu_1218_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln947_3_fu_1254_p2 <= "0" when (p_Result_5_fu_1249_p2 = ap_const_lv32_0) else "1";
    icmp_ln947_fu_1036_p2 <= "1" when (signed(tmp_17_fu_1026_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_1_fu_1307_p2 <= "1" when (signed(lsb_index_1_fu_1213_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_fu_1115_p2 <= "1" when (signed(lsb_index_fu_1021_p2) > signed(ap_const_lv32_0)) else "0";
    ireg_V_1_fu_659_p1 <= grp_fu_283_p1;
    ireg_V_fu_440_p1 <= grp_fu_283_p1;
    
    l_1_fu_1141_p3_proc : process(p_Result_18_fu_1131_p4)
    begin
        l_1_fu_1141_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_18_fu_1131_p4(i) = '1' then
                l_1_fu_1141_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_fu_985_p3_proc : process(p_Result_15_fu_975_p4)
    begin
        l_fu_985_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_15_fu_975_p4(i) = '1' then
                l_fu_985_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;


    lrclk_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state52, physMemPtr_V_ARREADY, physMemPtr_V_BVALID, ap_predicate_op402_writeresp_state52)
    begin
        if (((not(((ap_predicate_op402_writeresp_state52 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            lrclk_V_0_ack_out <= ap_const_logic_1;
        else 
            lrclk_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    lsb_index_1_fu_1213_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_1_reg_2267));
    lsb_index_fu_1021_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_reg_2216));
    lshr_ln286_1_fu_1785_p2 <= std_logic_vector(shift_right(unsigned(tmp_9_fu_1744_p3),to_integer(unsigned('0' & sext_ln281_1_fu_1751_p1(24-1 downto 0)))));
    lshr_ln286_fu_1551_p2 <= std_logic_vector(shift_right(unsigned(tmp_8_fu_1510_p3),to_integer(unsigned('0' & sext_ln281_fu_1517_p1(24-1 downto 0)))));
    lshr_ln947_1_fu_1243_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_1_fu_1239_p1(31-1 downto 0)))));
    lshr_ln947_fu_1051_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_1047_p1(31-1 downto 0)))));
    lshr_ln958_1_fu_1358_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_9_reg_2259),to_integer(unsigned('0' & add_ln958_1_fu_1353_p2(31-1 downto 0)))));
    lshr_ln958_fu_1168_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_8_reg_2208),to_integer(unsigned('0' & add_ln958_fu_1163_p2(31-1 downto 0)))));
    lsignExt_V_1_fu_410_p3 <= 
        ret_V_4_fu_404_p2 when (tmp_4_fu_396_p3(0) = '1') else 
        reg_286;
    m_11_fu_1313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_2284),32));
    m_12_fu_1407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_reg_2309),32));
    m_2_fu_1183_p3 <= 
        lshr_ln958_fu_1168_p2 when (icmp_ln958_reg_2249(0) = '1') else 
        shl_ln958_fu_1178_p2;
    m_3_fu_1190_p2 <= std_logic_vector(unsigned(or_ln_reg_2244) + unsigned(m_2_fu_1183_p3));
    m_7_fu_1373_p3 <= 
        lshr_ln958_1_fu_1358_p2 when (icmp_ln958_1_reg_2299(0) = '1') else 
        shl_ln958_1_fu_1368_p2;
    m_8_fu_1380_p2 <= std_logic_vector(unsigned(or_ln949_1_reg_2294) + unsigned(m_7_fu_1373_p3));
    man_V_1_fu_491_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_11_fu_487_p1));
    man_V_2_fu_497_p3 <= 
        man_V_1_fu_491_p2 when (p_Result_10_reg_2049(0) = '1') else 
        p_Result_11_fu_487_p1;
    man_V_4_fu_737_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_13_fu_733_p1));
    man_V_5_fu_743_p3 <= 
        man_V_4_fu_737_p2 when (p_Result_12_reg_2107(0) = '1') else 
        p_Result_13_fu_733_p1;
    or_ln100_fu_365_p2 <= (xor_ln100_1_fu_359_p2 or and_ln100_fu_354_p2);
    or_ln282_1_fu_1809_p2 <= (icmp_ln282_1_reg_2430 or icmp_ln278_1_reg_2415);
    or_ln282_fu_1575_p2 <= (icmp_ln282_reg_2364 or icmp_ln278_reg_2349);
    or_ln284_1_fu_1839_p2 <= (or_ln282_1_fu_1809_p2 or icmp_ln284_1_fu_1754_p2);
    or_ln284_fu_1605_p2 <= (or_ln282_fu_1575_p2 or icmp_ln284_fu_1520_p2);
    or_ln581_1_fu_886_p2 <= (or_ln582_1_fu_848_p2 or icmp_ln581_1_fu_755_p2);
    or_ln581_fu_641_p2 <= (or_ln582_fu_603_p2 or icmp_ln581_fu_509_p2);
    or_ln582_1_fu_848_p2 <= (icmp_ln582_1_fu_778_p2 or icmp_ln571_1_fu_750_p2);
    or_ln582_fu_603_p2 <= (icmp_ln582_fu_532_p2 or icmp_ln571_fu_504_p2);
    or_ln949_1_fu_1299_p3 <= (ap_const_lv31_0 & or_ln949_fu_1293_p2);
    or_ln949_2_fu_1101_p2 <= (and_ln949_fu_1095_p2 or a_fu_1068_p2);
    or_ln949_fu_1293_p2 <= (and_ln949_1_fu_1287_p2 or a_1_fu_1260_p2);
    or_ln95_fu_338_p2 <= (readyRch or lrclk_V_0_data_reg);
    or_ln_fu_1107_p3 <= (ap_const_lv31_0 & or_ln949_2_fu_1101_p2);
    p_Result_11_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_480_p3),54));
    p_Result_13_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_726_p3),54));
    
    p_Result_15_fu_975_p4_proc : process(tmp_V_8_fu_970_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_15_fu_975_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_8_fu_970_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_15_fu_975_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_15_fu_975_p4_i) := tmp_V_8_fu_970_p3(32-1-p_Result_15_fu_975_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_15_fu_975_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_16_fu_1341_p5 <= (tmp_5_fu_1334_p3 & m_11_fu_1313_p1(22 downto 0));
    
    p_Result_18_fu_1131_p4_proc : process(tmp_V_9_fu_1126_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_18_fu_1131_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_9_fu_1126_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_18_fu_1131_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_18_fu_1131_p4_i) := tmp_V_9_fu_1126_p3(32-1-p_Result_18_fu_1131_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_18_fu_1131_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_19_fu_1435_p5 <= (tmp_7_fu_1428_p3 & m_12_fu_1407_p1(22 downto 0));
    p_Result_1_fu_1088_p3 <= tmp_V_8_reg_2208(to_integer(unsigned(lsb_index_fu_1021_p2)) downto to_integer(unsigned(lsb_index_fu_1021_p2))) when (to_integer(unsigned(lsb_index_fu_1021_p2))>= 0 and to_integer(unsigned(lsb_index_fu_1021_p2))<=31) else "-";
    p_Result_3_fu_1646_p4 <= reg_V_1_fu_1627_p3(30 downto 23);
    p_Result_5_fu_1249_p2 <= (tmp_V_9_reg_2259 and lshr_ln947_1_fu_1243_p2);
    p_Result_6_fu_1280_p3 <= tmp_V_9_reg_2259(to_integer(unsigned(lsb_index_1_fu_1213_p2)) downto to_integer(unsigned(lsb_index_1_fu_1213_p2))) when (to_integer(unsigned(lsb_index_1_fu_1213_p2))>= 0 and to_integer(unsigned(lsb_index_1_fu_1213_p2))<=31) else "-";
    p_Result_s_14_fu_1474_p4 <= reg_V_fu_1455_p3(30 downto 23);
    p_Result_s_fu_1057_p2 <= (tmp_V_8_reg_2208 and lshr_ln947_fu_1051_p2);

    physMemPtr_V_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, physMemPtr_V_ARREADY, ap_predicate_op93_readreq_state10, ap_block_state10_io, zext_ln544_fu_315_p1, zext_ln544_1_fu_371_p1)
    begin
        if (((ap_predicate_op93_readreq_state10 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            physMemPtr_V_ARADDR <= zext_ln544_1_fu_371_p1(32 - 1 downto 0);
        elsif (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            physMemPtr_V_ARADDR <= zext_ln544_fu_315_p1(32 - 1 downto 0);
        else 
            physMemPtr_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, physMemPtr_V_ARREADY, ap_predicate_op93_readreq_state10, ap_block_state10_io)
    begin
        if (((ap_predicate_op93_readreq_state10 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            physMemPtr_V_ARLEN <= ap_const_lv32_2;
        elsif (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            physMemPtr_V_ARLEN <= ap_const_lv32_1;
        else 
            physMemPtr_V_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, physMemPtr_V_ARREADY, ap_predicate_op93_readreq_state10, ap_block_state10_io)
    begin
        if ((((ap_predicate_op93_readreq_state10 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            physMemPtr_V_ARVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    physMemPtr_V_AWADDR <= zext_ln544_2_fu_386_p1(32 - 1 downto 0);

    physMemPtr_V_AWVALID_assign_proc : process(ap_CS_fsm_state17, physMemPtr_V_AWREADY, physMemPtr_V_RVALID)
    begin
        if ((not(((physMemPtr_V_RVALID = ap_const_logic_0) or (physMemPtr_V_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            physMemPtr_V_AWVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_BREADY_assign_proc : process(ap_CS_fsm_state52, physMemPtr_V_BVALID, ap_predicate_op402_writeresp_state52)
    begin
        if ((not(((ap_predicate_op402_writeresp_state52 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_predicate_op402_writeresp_state52 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            physMemPtr_V_BREADY <= ap_const_logic_1;
        else 
            physMemPtr_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_RREADY_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state18, physMemPtr_V_AWREADY, physMemPtr_V_RVALID)
    begin
        if ((((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((physMemPtr_V_RVALID = ap_const_logic_0) or (physMemPtr_V_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            physMemPtr_V_RREADY <= ap_const_logic_1;
        else 
            physMemPtr_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_WDATA_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state47, select_ln303_reg_2472, select_ln303_1_reg_2483)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            physMemPtr_V_WDATA <= select_ln303_1_reg_2483;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            physMemPtr_V_WDATA <= select_ln303_reg_2472;
        else 
            physMemPtr_V_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_WVALID_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state47, physMemPtr_V_WREADY)
    begin
        if ((((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46)))) then 
            physMemPtr_V_WVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_blk_n_AR_assign_proc : process(m_axi_physMemPtr_V_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state10, icmp_ln761_fu_325_p2, or_ln100_fu_365_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((or_ln100_fu_365_p2 = ap_const_lv1_0) and (icmp_ln761_fu_325_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            physMemPtr_V_blk_n_AR <= m_axi_physMemPtr_V_ARREADY;
        else 
            physMemPtr_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_AW_assign_proc : process(m_axi_physMemPtr_V_AWREADY, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            physMemPtr_V_blk_n_AW <= m_axi_physMemPtr_V_AWREADY;
        else 
            physMemPtr_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_B_assign_proc : process(m_axi_physMemPtr_V_BVALID, ap_CS_fsm_state52, icmp_ln761_reg_1987, or_ln100_reg_1996)
    begin
        if (((or_ln100_reg_1996 = ap_const_lv1_0) and (icmp_ln761_reg_1987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            physMemPtr_V_blk_n_B <= m_axi_physMemPtr_V_BVALID;
        else 
            physMemPtr_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_R_assign_proc : process(m_axi_physMemPtr_V_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            physMemPtr_V_blk_n_R <= m_axi_physMemPtr_V_RVALID;
        else 
            physMemPtr_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_W_assign_proc : process(m_axi_physMemPtr_V_WREADY, ap_CS_fsm_state46, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            physMemPtr_V_blk_n_W <= m_axi_physMemPtr_V_WREADY;
        else 
            physMemPtr_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    r_V_fu_295_p4 <= basePhysAddr_V(31 downto 2);
    reg_V_1_fu_1627_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_1_reg_2254(0) = '1') else 
        bitcast_ln705_1_fu_1623_p1;
    reg_V_fu_1455_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_2203(0) = '1') else 
        bitcast_ln705_fu_1451_p1;
    ret_V_3_fu_381_p2 <= std_logic_vector(unsigned(ap_const_lv31_2) + unsigned(zext_ln215_reg_1958));
    ret_V_4_fu_404_p2 <= (reg_286 or ap_const_lv32_FF000000);
    ret_V_5_fu_426_p2 <= (reg_286 or ap_const_lv32_FF000000);
    ret_V_fu_309_p2 <= std_logic_vector(unsigned(zext_ln215_fu_305_p1) + unsigned(ap_const_lv31_4));
    rsignExt_V_1_fu_432_p3 <= 
        ret_V_5_fu_426_p2 when (tmp_6_fu_418_p3(0) = '1') else 
        reg_286;
    select_ln278_1_fu_1905_p3 <= 
        ap_const_lv32_0 when (icmp_ln278_1_reg_2415(0) = '1') else 
        select_ln295_1_fu_1898_p3;
    select_ln278_fu_1719_p3 <= 
        ap_const_lv32_0 when (icmp_ln278_reg_2349(0) = '1') else 
        select_ln295_fu_1712_p3;
    select_ln282_1_fu_1801_p3 <= 
        tmp_9_fu_1744_p3 when (and_ln282_1_fu_1796_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln282_fu_1567_p3 <= 
        tmp_8_fu_1510_p3 when (and_ln282_fu_1562_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln285_1_fu_1736_p3 <= 
        select_ln288_fu_1695_p3 when (and_ln285_1_fu_1731_p2(0) = '1') else 
        select_ln278_fu_1719_p3;
    select_ln285_2_fu_1831_p3 <= 
        lshr_ln286_1_fu_1785_p2 when (and_ln285_2_fu_1825_p2(0) = '1') else 
        select_ln282_1_fu_1801_p3;
    select_ln285_3_fu_1922_p3 <= 
        select_ln288_1_fu_1881_p3 when (and_ln285_3_fu_1917_p2(0) = '1') else 
        select_ln278_1_fu_1905_p3;
    select_ln285_fu_1597_p3 <= 
        lshr_ln286_fu_1551_p2 when (and_ln285_fu_1591_p2(0) = '1') else 
        select_ln282_fu_1567_p3;
    select_ln288_1_fu_1881_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_29_fu_1874_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln288_fu_1695_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_26_fu_1688_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln295_1_fu_1898_p3 <= 
        shl_ln297_1_fu_1889_p2 when (and_ln295_1_reg_2467(0) = '1') else 
        zext_ln285_1_fu_1895_p1;
    select_ln295_fu_1712_p3 <= 
        shl_ln297_fu_1703_p2 when (and_ln295_reg_2395(0) = '1') else 
        zext_ln285_fu_1709_p1;
    select_ln303_1_fu_1935_p3 <= 
        sub_ln461_1_fu_1930_p2 when (p_Result_21_reg_2405(0) = '1') else 
        select_ln285_3_reg_2477;
    select_ln303_fu_1862_p3 <= 
        sub_ln461_fu_1857_p2 when (p_Result_20_reg_2339(0) = '1') else 
        select_ln285_1_reg_2436;
    select_ln582_1_fu_840_p3 <= 
        trunc_ln583_1_fu_783_p1 when (and_ln582_1_fu_834_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln582_fu_595_p3 <= 
        trunc_ln583_fu_537_p1 when (and_ln582_fu_589_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln585_1_fu_719_p3 <= 
        trunc_ln586_fu_711_p1 when (and_ln585_1_fu_715_p2(0) = '1') else 
        select_ln585_reg_2092;
    select_ln585_2_fu_878_p3 <= 
        select_ln588_1_fu_820_p3 when (and_ln585_2_fu_872_p2(0) = '1') else 
        select_ln582_1_fu_840_p3;
    select_ln585_3_fu_934_p3 <= 
        trunc_ln586_1_fu_926_p1 when (and_ln585_3_fu_930_p2(0) = '1') else 
        select_ln585_2_reg_2160;
    select_ln585_fu_633_p3 <= 
        select_ln588_fu_575_p3 when (and_ln585_fu_627_p2(0) = '1') else 
        select_ln582_fu_595_p3;
    select_ln588_1_fu_820_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_15_fu_812_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln588_fu_575_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_12_fu_567_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln964_1_fu_1410_p3 <= 
        ap_const_lv8_7F when (tmp_23_reg_2314(0) = '1') else 
        ap_const_lv8_7E;
    select_ln964_fu_1316_p3 <= 
        ap_const_lv8_7F when (tmp_19_reg_2289(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln281_1_fu_1751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_4_reg_2422),24));

        sext_ln281_fu_1517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_reg_2356),24));

        sext_ln294_1_fu_1871_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_5_reg_2452),32));

        sext_ln294_fu_1685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_3_reg_2380),32));

        sext_ln581_1_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_2140),32));

        sext_ln581_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_2072),32));

    sh_amt_1_fu_770_p3 <= 
        add_ln581_1_fu_760_p2 when (icmp_ln581_1_fu_755_p2(0) = '1') else 
        sub_ln581_1_fu_765_p2;
    sh_amt_2_fu_1498_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_fu_1484_p1));
    sh_amt_3_fu_1530_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_2_reg_2356));
    sh_amt_4_fu_1670_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_1_fu_1656_p1));
    sh_amt_5_fu_1764_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_4_reg_2422));
    sh_amt_fu_524_p3 <= 
        add_ln581_fu_514_p2 when (icmp_ln581_fu_509_p2(0) = '1') else 
        sub_ln581_fu_519_p2;
    shl_ln297_1_fu_1889_p2 <= std_logic_vector(shift_left(unsigned(zext_ln283_1_fu_1868_p1),to_integer(unsigned('0' & sext_ln294_1_fu_1871_p1(31-1 downto 0)))));
    shl_ln297_fu_1703_p2 <= std_logic_vector(shift_left(unsigned(zext_ln283_fu_1682_p1),to_integer(unsigned('0' & sext_ln294_fu_1685_p1(31-1 downto 0)))));
    shl_ln604_1_fu_955_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_1_reg_2145),to_integer(unsigned('0' & sext_ln581_1_reg_2176(31-1 downto 0)))));
    shl_ln604_fu_904_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_2077),to_integer(unsigned('0' & sext_ln581_reg_2125(31-1 downto 0)))));
    shl_ln958_1_fu_1368_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_9_reg_2259),to_integer(unsigned('0' & sub_ln958_1_fu_1363_p2(31-1 downto 0)))));
    shl_ln958_fu_1178_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_8_reg_2208),to_integer(unsigned('0' & sub_ln958_fu_1173_p2(31-1 downto 0)))));
    sub_ln461_1_fu_1930_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln285_3_reg_2477));
    sub_ln461_fu_1857_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln285_1_reg_2436));
    sub_ln581_1_fu_765_p2 <= std_logic_vector(unsigned(ap_const_lv12_17) - unsigned(F2_1_reg_2117));
    sub_ln581_fu_519_p2 <= std_logic_vector(unsigned(ap_const_lv12_17) - unsigned(F2_reg_2059));
    sub_ln944_1_fu_1149_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_1_fu_1141_p3));
    sub_ln944_fu_993_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_fu_985_p3));
    sub_ln947_1_fu_1234_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_1_reg_2274));
    sub_ln947_fu_1042_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_reg_2223));
    sub_ln958_1_fu_1363_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_1_reg_2267));
    sub_ln958_fu_1173_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_2216));
    sub_ln964_1_fu_1417_p2 <= std_logic_vector(unsigned(ap_const_lv8_9) - unsigned(trunc_ln943_1_reg_2279));
    sub_ln964_fu_1323_p2 <= std_logic_vector(unsigned(ap_const_lv8_9) - unsigned(trunc_ln943_reg_2228));
    tmp_11_fu_547_p4 <= sh_amt_fu_524_p3(11 downto 5);
    tmp_12_fu_567_p3 <= bitcast_ln696_fu_563_p1(31 downto 31);
    tmp_14_fu_793_p4 <= sh_amt_1_fu_770_p3(11 downto 5);
    tmp_15_fu_812_p3 <= bitcast_ln696_2_fu_809_p1(31 downto 31);
    tmp_17_fu_1026_p4 <= lsb_index_fu_1021_p2(31 downto 1);
    tmp_18_fu_1074_p3 <= lsb_index_fu_1021_p2(31 downto 31);
    tmp_21_fu_1218_p4 <= lsb_index_1_fu_1213_p2(31 downto 1);
    tmp_22_fu_1266_p3 <= lsb_index_1_fu_1213_p2(31 downto 31);
    tmp_25_fu_1535_p4 <= sh_amt_3_fu_1530_p2(8 downto 5);
    tmp_26_fu_1688_p3 <= reg_V_reg_2334(31 downto 31);
    tmp_28_fu_1769_p4 <= sh_amt_5_fu_1764_p2(8 downto 5);
    tmp_29_fu_1874_p3 <= reg_V_1_reg_2400(31 downto 31);
    tmp_2_fu_480_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_2054);
    tmp_3_fu_726_p3 <= (ap_const_lv1_1 & trunc_ln565_1_reg_2112);
    tmp_4_fu_396_p3 <= reg_286(23 downto 23);
    tmp_5_fu_1334_p3 <= (p_Result_14_reg_2186 & add_ln964_fu_1328_p2);
    tmp_6_fu_418_p3 <= reg_286(23 downto 23);
    tmp_7_fu_1428_p3 <= (p_Result_17_reg_2233 & add_ln964_1_fu_1422_p2);
    tmp_8_fu_1510_p3 <= (ap_const_lv1_1 & trunc_ln270_reg_2344);
    tmp_9_fu_1744_p3 <= (ap_const_lv1_1 & trunc_ln270_1_reg_2410);
    tmp_V_4_fu_1015_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_V_7_fu_959_p3));
    tmp_V_6_fu_908_p3 <= 
        shl_ln604_fu_904_p2 when (and_ln603_reg_2097(0) = '1') else 
        select_ln585_1_reg_2130;
    tmp_V_7_fu_959_p3 <= 
        shl_ln604_1_fu_955_p2 when (and_ln603_1_reg_2165(0) = '1') else 
        select_ln585_3_reg_2181;
    tmp_V_8_fu_970_p3 <= 
        tmp_V_reg_2192 when (p_Result_14_reg_2186(0) = '1') else 
        tmp_V_6_reg_2170;
    tmp_V_9_fu_1126_p3 <= 
        tmp_V_4_reg_2239 when (p_Result_17_reg_2233(0) = '1') else 
        tmp_V_7_reg_2197;
    tmp_V_fu_949_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_V_6_fu_908_p3));
    trunc_ln262_1_fu_1634_p1 <= reg_V_1_fu_1627_p3(31 - 1 downto 0);
    trunc_ln262_fu_1462_p1 <= reg_V_fu_1455_p3(31 - 1 downto 0);
    trunc_ln270_1_fu_1660_p1 <= reg_V_1_fu_1627_p3(23 - 1 downto 0);
    trunc_ln270_fu_1488_p1 <= reg_V_fu_1455_p3(23 - 1 downto 0);
    trunc_ln556_1_fu_663_p1 <= ireg_V_1_fu_659_p1(63 - 1 downto 0);
    trunc_ln556_fu_444_p1 <= ireg_V_fu_440_p1(63 - 1 downto 0);
    trunc_ln565_1_fu_689_p1 <= ireg_V_1_fu_659_p1(52 - 1 downto 0);
    trunc_ln565_fu_470_p1 <= ireg_V_fu_440_p1(52 - 1 downto 0);
    trunc_ln583_1_fu_783_p1 <= man_V_5_fu_743_p3(32 - 1 downto 0);
    trunc_ln583_fu_537_p1 <= man_V_2_fu_497_p3(32 - 1 downto 0);
    trunc_ln586_1_fu_926_p1 <= ashr_ln586_1_fu_921_p2(32 - 1 downto 0);
    trunc_ln586_fu_711_p1 <= ashr_ln586_fu_706_p2(32 - 1 downto 0);
    trunc_ln943_1_fu_1159_p1 <= l_1_fu_1141_p3(8 - 1 downto 0);
    trunc_ln943_fu_1003_p1 <= l_fu_985_p3(8 - 1 downto 0);
    trunc_ln947_1_fu_1155_p1 <= sub_ln944_1_fu_1149_p2(6 - 1 downto 0);
    trunc_ln947_fu_999_p1 <= sub_ln944_fu_993_p2(6 - 1 downto 0);
    xor_ln100_1_fu_359_p2 <= (or_ln95_fu_338_p2 xor ap_const_lv1_1);
    xor_ln100_fu_348_p2 <= (readyLch xor ap_const_lv1_1);
    xor_ln278_1_fu_1791_p2 <= (icmp_ln278_1_reg_2415 xor ap_const_lv1_1);
    xor_ln278_fu_1557_p2 <= (icmp_ln278_reg_2349 xor ap_const_lv1_1);
    xor_ln282_1_fu_1813_p2 <= (or_ln282_1_fu_1809_p2 xor ap_const_lv1_1);
    xor_ln282_fu_1579_p2 <= (or_ln282_fu_1575_p2 xor ap_const_lv1_1);
    xor_ln284_1_fu_1845_p2 <= (or_ln284_1_fu_1839_p2 xor ap_const_lv1_1);
    xor_ln284_fu_1611_p2 <= (or_ln284_fu_1605_p2 xor ap_const_lv1_1);
    xor_ln285_1_fu_1912_p2 <= (icmp_ln285_1_reg_2447 xor ap_const_lv1_1);
    xor_ln285_fu_1726_p2 <= (icmp_ln285_reg_2375 xor ap_const_lv1_1);
    xor_ln571_1_fu_828_p2 <= (icmp_ln571_1_fu_750_p2 xor ap_const_lv1_1);
    xor_ln571_fu_583_p2 <= (icmp_ln571_fu_504_p2 xor ap_const_lv1_1);
    xor_ln581_1_fu_892_p2 <= (or_ln581_1_fu_886_p2 xor ap_const_lv1_1);
    xor_ln581_fu_647_p2 <= (or_ln581_fu_641_p2 xor ap_const_lv1_1);
    xor_ln582_1_fu_854_p2 <= (or_ln582_1_fu_848_p2 xor ap_const_lv1_1);
    xor_ln582_fu_609_p2 <= (or_ln582_fu_603_p2 xor ap_const_lv1_1);
    xor_ln585_1_fu_866_p2 <= (icmp_ln585_1_fu_787_p2 xor ap_const_lv1_1);
    xor_ln585_fu_621_p2 <= (icmp_ln585_fu_541_p2 xor ap_const_lv1_1);
    xor_ln949_1_fu_1274_p2 <= (tmp_22_fu_1266_p3 xor ap_const_lv1_1);
    xor_ln949_fu_1082_p2 <= (tmp_18_fu_1074_p3 xor ap_const_lv1_1);
    xor_ln95_fu_343_p2 <= (lrclk_V_0_data_reg xor ap_const_lv1_1);
    zext_ln215_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_295_p4),31));
    zext_ln283_1_fu_1868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_2442),32));
    zext_ln283_fu_1682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_2370),32));
    zext_ln285_1_fu_1895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln285_2_reg_2462),32));
    zext_ln285_fu_1709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln285_reg_2390),32));
    zext_ln461_1_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_1_fu_675_p4),12));
    zext_ln461_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_456_p4),12));
    zext_ln544_1_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_1953),64));
    zext_ln544_2_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_3_reg_2006),64));
    zext_ln544_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_1963),64));
    zext_ln586_1_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_1_fu_914_p1),54));
    zext_ln586_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_699_p1),54));
    zext_ln947_1_fu_1239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_1_fu_1234_p2),32));
    zext_ln947_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_1042_p2),32));
end behav;
