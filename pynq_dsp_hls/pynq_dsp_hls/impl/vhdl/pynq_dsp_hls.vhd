-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynq_dsp_hls is
generic (
    C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_EXTMEMPTR_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_EXTMEMPTR_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_EXTMEMPTR_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_EXTMEMPTR_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_EXTMEMPTR_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_EXTMEMPTR_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    lrclk_V : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_physMemPtr_V_AWVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_AWREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_physMemPtr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_WREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH/8-1 downto 0);
    m_axi_physMemPtr_V_WLAST : OUT STD_LOGIC;
    m_axi_physMemPtr_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_ARREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_physMemPtr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RVALID : IN STD_LOGIC;
    m_axi_physMemPtr_V_RREADY : OUT STD_LOGIC;
    m_axi_physMemPtr_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RLAST : IN STD_LOGIC;
    m_axi_physMemPtr_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_BVALID : IN STD_LOGIC;
    m_axi_physMemPtr_V_BREADY : OUT STD_LOGIC;
    m_axi_physMemPtr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_AWVALID : OUT STD_LOGIC;
    m_axi_extMemPtr_V_AWREADY : IN STD_LOGIC;
    m_axi_extMemPtr_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_extMemPtr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_AWUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_WVALID : OUT STD_LOGIC;
    m_axi_extMemPtr_V_WREADY : IN STD_LOGIC;
    m_axi_extMemPtr_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_DATA_WIDTH/8-1 downto 0);
    m_axi_extMemPtr_V_WLAST : OUT STD_LOGIC;
    m_axi_extMemPtr_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_WUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_ARVALID : OUT STD_LOGIC;
    m_axi_extMemPtr_V_ARREADY : IN STD_LOGIC;
    m_axi_extMemPtr_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_extMemPtr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ARUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_RVALID : IN STD_LOGIC;
    m_axi_extMemPtr_V_RREADY : OUT STD_LOGIC;
    m_axi_extMemPtr_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_RLAST : IN STD_LOGIC;
    m_axi_extMemPtr_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_RUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_BVALID : IN STD_LOGIC;
    m_axi_extMemPtr_V_BREADY : OUT STD_LOGIC;
    m_axi_extMemPtr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pynq_dsp_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pynq_dsp_hls,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=38,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=13,HLS_SYN_FF=7858,HLS_SYN_LUT=12007,HLS_VERSION=2019_1_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (69 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (69 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (69 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (69 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (69 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (69 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (69 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (69 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (69 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (69 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_4AFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "01001010111111111111111111111110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv9_18 : STD_LOGIC_VECTOR (8 downto 0) := "000011000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal lrclk_V_0_data_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal lrclk_V_0_vld_reg : STD_LOGIC := '0';
    signal lrclk_V_0_ack_out : STD_LOGIC;
    signal basePhysAddr_V : STD_LOGIC_VECTOR (31 downto 0);
    signal basePhysAddr_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal basePhysAddr_V_0_vld_reg : STD_LOGIC := '0';
    signal basePhysAddr_V_0_ack_out : STD_LOGIC;
    signal monitorSrcL_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal monitorSrcL_1_vld_reg : STD_LOGIC := '0';
    signal monitorSrcL_1_vld_in : STD_LOGIC;
    signal monitorSrcR_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal monitorSrcR_1_vld_reg : STD_LOGIC := '0';
    signal monitorSrcR_1_vld_in : STD_LOGIC;
    signal monitorDstL_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal monitorDstL_1_vld_reg : STD_LOGIC := '0';
    signal monitorDstL_1_vld_in : STD_LOGIC;
    signal monitorDstR_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal monitorDstR_1_vld_reg : STD_LOGIC := '0';
    signal monitorDstR_1_vld_in : STD_LOGIC;
    signal counter_i : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal counter_0_vld_reg : STD_LOGIC := '0';
    signal counter_0_ack_out : STD_LOGIC;
    signal counter_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal counter_1_vld_reg : STD_LOGIC := '0';
    signal counter_1_vld_in : STD_LOGIC;
    signal numOfStage_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal numOfStage_1_vld_reg : STD_LOGIC := '0';
    signal numOfStage_1_vld_in : STD_LOGIC;
    signal configSizePerStage_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal configSizePerStage_1_vld_reg : STD_LOGIC := '0';
    signal configSizePerStage_1_vld_in : STD_LOGIC;
    signal configReg_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal configReg_ce0 : STD_LOGIC;
    signal configReg_we0 : STD_LOGIC;
    signal configReg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readyRch : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal readyLch : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal physMemPtr_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal physMemPtr_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln761_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln164_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal physMemPtr_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal physMemPtr_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal physMemPtr_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal icmp_ln761_reg_1602 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln164_reg_1611 : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_AWVALID : STD_LOGIC;
    signal physMemPtr_V_AWREADY : STD_LOGIC;
    signal physMemPtr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_WVALID : STD_LOGIC;
    signal physMemPtr_V_WREADY : STD_LOGIC;
    signal physMemPtr_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_ARVALID : STD_LOGIC;
    signal physMemPtr_V_ARREADY : STD_LOGIC;
    signal physMemPtr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_RVALID : STD_LOGIC;
    signal physMemPtr_V_RREADY : STD_LOGIC;
    signal physMemPtr_V_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_RLAST : STD_LOGIC;
    signal physMemPtr_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal physMemPtr_V_BVALID : STD_LOGIC;
    signal physMemPtr_V_BREADY : STD_LOGIC;
    signal physMemPtr_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal physMemPtr_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal extMemPtr_V_AWVALID : STD_LOGIC;
    signal extMemPtr_V_AWREADY : STD_LOGIC;
    signal extMemPtr_V_WVALID : STD_LOGIC;
    signal extMemPtr_V_WREADY : STD_LOGIC;
    signal extMemPtr_V_ARVALID : STD_LOGIC;
    signal extMemPtr_V_ARREADY : STD_LOGIC;
    signal extMemPtr_V_RVALID : STD_LOGIC;
    signal extMemPtr_V_RREADY : STD_LOGIC;
    signal extMemPtr_V_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal extMemPtr_V_RLAST : STD_LOGIC;
    signal extMemPtr_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal extMemPtr_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal extMemPtr_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal extMemPtr_V_BVALID : STD_LOGIC;
    signal extMemPtr_V_BREADY : STD_LOGIC;
    signal extMemPtr_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal extMemPtr_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal extMemPtr_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal icmp_ln887_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_V_fu_483_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_reg_1576 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln215_fu_493_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln215_reg_1581 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_fu_497_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_reg_1586 : STD_LOGIC_VECTOR (30 downto 0);
    signal status_V_reg_1597 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op134_readreq_state11 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal xor_ln159_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal srcL_V_fu_569_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal srcL_V_reg_1639 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln173_fu_585_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal srcR_V_fu_594_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal srcR_V_reg_1649 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1664 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1669 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal floatSrcL_reg_1674 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal floatSrcR_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal stageIndex_V_fu_620_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal stageIndex_V_reg_1689 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_626_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_reg_1694 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal trunc_ln189_fu_667_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln189_reg_1715 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln368_3_fu_689_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln368_3_reg_1719 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ratio_fu_700_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal absL_fu_726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal absR_fu_751_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln63_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_1740 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_1_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_1_reg_1745 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1750 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_1_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_1_reg_1755 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_l_1_fu_810_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_l_1_reg_1760 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal dst_r_1_fu_828_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_r_1_reg_1765 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_fu_844_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln368_reg_1770 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal or_ln257_1_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_1_reg_1775 : STD_LOGIC_VECTOR (0 downto 0);
    signal thresh_fu_887_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresh_reg_1781 : STD_LOGIC_VECTOR (31 downto 0);
    signal absL_1_fu_913_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal absL_1_reg_1789 : STD_LOGIC_VECTOR (31 downto 0);
    signal absR_1_fu_938_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal absR_1_reg_1795 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln257_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_reg_1801 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_2_fu_993_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_2_reg_1807 : STD_LOGIC_VECTOR (0 downto 0);
    signal monitorDstL_1_fu_1009_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal monitorDstL_1_reg_1813 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal monitorDstR_1_fu_1025_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal monitorDstR_1_reg_1819 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1825 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1830 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal floatDstL_reg_1835 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal floatDstR_reg_1841 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal reg_V_fu_1089_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_reg_1847 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_16_reg_1852 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_fu_1118_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln270_reg_1857 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln278_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_1862 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_1128_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_reg_1869 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln282_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_reg_1877 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1140_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_reg_1883 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal icmp_ln285_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_1889 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1_fu_1160_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_1_reg_1894 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_reg_1899 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_1199_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_reg_1904 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_fu_1219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_reg_1909 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_V_1_fu_1225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_1_reg_1914 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_17_reg_1919 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_1_fu_1254_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln270_1_reg_1924 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln278_1_fu_1258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_1_reg_1929 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_2_fu_1264_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_2_reg_1936 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln282_1_fu_1270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_1_reg_1944 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln282_fu_1344_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_reg_1950 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal tmp_6_fu_1351_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_reg_1956 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln285_1_fu_1366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_1_reg_1962 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_3_fu_1371_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_3_reg_1967 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_1_fu_1398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_1_reg_1972 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_2_fu_1410_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_2_reg_1977 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_1_fu_1430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_1_reg_1982 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_1436_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_1_reg_1987 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln303_fu_1446_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln303_reg_1992 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_1_fu_1520_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_1_reg_1997 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln303_1_fu_1542_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln303_1_reg_2010 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_effect_delay_fu_396_ap_start : STD_LOGIC;
    signal grp_effect_delay_fu_396_ap_done : STD_LOGIC;
    signal grp_effect_delay_fu_396_ap_idle : STD_LOGIC;
    signal grp_effect_delay_fu_396_ap_ready : STD_LOGIC;
    signal grp_effect_delay_fu_396_config_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_effect_delay_fu_396_config_r_ce0 : STD_LOGIC;
    signal grp_effect_delay_fu_396_config_r_we0 : STD_LOGIC;
    signal grp_effect_delay_fu_396_config_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWVALID : STD_LOGIC;
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_WVALID : STD_LOGIC;
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_WLAST : STD_LOGIC;
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARVALID : STD_LOGIC;
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_RREADY : STD_LOGIC;
    signal grp_effect_delay_fu_396_m_axi_extMemPtr_V_BREADY : STD_LOGIC;
    signal grp_effect_delay_fu_396_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_396_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_reg_340 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_phi_mux_readyRch_flag_1_phi_fu_356_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyRch_flag_1_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op439_writeresp_state70 : BOOLEAN;
    signal monitorSrcL_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal monitorSrcR_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal monitorDstL_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal monitorDstR_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal counter_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal numOfStage_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal configSizePerStage_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state70 : BOOLEAN;
    signal ap_phi_mux_readyRch_new_1_phi_fu_371_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyRch_new_1_reg_366 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_readyLch_flag_1_phi_fu_386_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyLch_flag_1_reg_382 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_396_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal zext_ln189_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_644_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_658_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_1527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln214_fu_1548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln214_1_fu_1552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_fu_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_r_fu_1072_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal x_assign_4_fu_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_l_fu_1048_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_408_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_413_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_427_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_430_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_433_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_437_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln164_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln159_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln164_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln164_1_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln173_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln44_fu_639_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln58_fu_653_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_13_fu_693_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_fu_706_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_4_fu_710_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_14_fu_718_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_fu_731_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_5_fu_735_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_15_fu_743_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_756_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln63_fu_714_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_17_fu_778_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln64_fu_739_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln63_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln63_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln64_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln64_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_852_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln257_fu_848_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_3_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln257_2_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_fu_880_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_893_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_1_fu_897_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_11_fu_905_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_918_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_2_fu_922_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_12_fu_930_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_943_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln257_1_fu_901_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_1_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln257_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_971_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln257_2_fu_926_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_5_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln257_4_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_1_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_2_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_3_fu_1019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln51_fu_1035_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln51_fu_1038_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln51_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln51_1_fu_1044_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln52_fu_1059_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln52_fu_1062_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln52_fu_1055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln52_1_fu_1068_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_1104_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln262_fu_1092_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_fu_1114_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln281_fu_1147_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln282_fu_1177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_1193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_fu_1171_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_1213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_1240_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln262_1_fu_1228_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_1_fu_1250_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_1279_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln294_fu_1276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294cast_fu_1294_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln297_fu_1298_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln295_fu_1303_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln285_fu_1316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_1_fu_1321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_1286_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln278_fu_1309_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln278_fu_1334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_1339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_1_fu_1326_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln281_1_fu_1358_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln282_1_fu_1388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_fu_1361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_1_fu_1392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_2_fu_1404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_1_fu_1382_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_1_fu_1418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_1_fu_1376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_1_fu_1424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln461_fu_1441_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_1455_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln294_1_fu_1452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_1cast_fu_1470_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln297_1_fu_1474_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln295_1_fu_1479_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln285_1_fu_1492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_3_fu_1497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_1_fu_1462_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln278_1_fu_1485_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln278_1_fu_1510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_1_fu_1515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_3_fu_1502_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln461_1_fu_1537_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_433_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_437_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (69 downto 0);

    component effect_delay IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inData_l : IN STD_LOGIC_VECTOR (31 downto 0);
        inData_r : IN STD_LOGIC_VECTOR (31 downto 0);
        config_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        config_r_ce0 : OUT STD_LOGIC;
        config_r_we0 : OUT STD_LOGIC;
        config_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        config_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        config_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_AWVALID : OUT STD_LOGIC;
        m_axi_extMemPtr_V_AWREADY : IN STD_LOGIC;
        m_axi_extMemPtr_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_WVALID : OUT STD_LOGIC;
        m_axi_extMemPtr_V_WREADY : IN STD_LOGIC;
        m_axi_extMemPtr_V_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_WLAST : OUT STD_LOGIC;
        m_axi_extMemPtr_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_ARVALID : OUT STD_LOGIC;
        m_axi_extMemPtr_V_ARREADY : IN STD_LOGIC;
        m_axi_extMemPtr_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_RVALID : IN STD_LOGIC;
        m_axi_extMemPtr_V_RREADY : OUT STD_LOGIC;
        m_axi_extMemPtr_V_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_RLAST : IN STD_LOGIC;
        m_axi_extMemPtr_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_BVALID : IN STD_LOGIC;
        m_axi_extMemPtr_V_BREADY : OUT STD_LOGIC;
        m_axi_extMemPtr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fdiveOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_sitofYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fcmpg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pynq_dsp_hls_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        basePhysAddr_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        monitorSrcL : IN STD_LOGIC_VECTOR (31 downto 0);
        monitorSrcL_ap_vld : IN STD_LOGIC;
        monitorSrcR : IN STD_LOGIC_VECTOR (31 downto 0);
        monitorSrcR_ap_vld : IN STD_LOGIC;
        monitorDstL : IN STD_LOGIC_VECTOR (31 downto 0);
        monitorDstL_ap_vld : IN STD_LOGIC;
        monitorDstR : IN STD_LOGIC_VECTOR (31 downto 0);
        monitorDstR_ap_vld : IN STD_LOGIC;
        counter_o : IN STD_LOGIC_VECTOR (31 downto 0);
        counter_o_ap_vld : IN STD_LOGIC;
        counter_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        numOfStage : IN STD_LOGIC_VECTOR (31 downto 0);
        numOfStage_ap_vld : IN STD_LOGIC;
        configSizePerStage : IN STD_LOGIC_VECTOR (31 downto 0);
        configSizePerStage_ap_vld : IN STD_LOGIC;
        configReg_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        configReg_ce0 : IN STD_LOGIC;
        configReg_we0 : IN STD_LOGIC;
        configReg_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        configReg_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_physMemPtr_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pynq_dsp_hls_extMemPtr_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    pynq_dsp_hls_AXILiteS_s_axi_U : component pynq_dsp_hls_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        basePhysAddr_V => basePhysAddr_V,
        monitorSrcL => monitorSrcL_1_data_reg,
        monitorSrcL_ap_vld => monitorSrcL_1_vld_reg,
        monitorSrcR => monitorSrcR_1_data_reg,
        monitorSrcR_ap_vld => monitorSrcR_1_vld_reg,
        monitorDstL => monitorDstL_1_data_reg,
        monitorDstL_ap_vld => monitorDstL_1_vld_reg,
        monitorDstR => monitorDstR_1_data_reg,
        monitorDstR_ap_vld => monitorDstR_1_vld_reg,
        counter_o => counter_1_data_reg,
        counter_o_ap_vld => counter_1_vld_reg,
        counter_i => counter_i,
        numOfStage => numOfStage_1_data_reg,
        numOfStage_ap_vld => numOfStage_1_vld_reg,
        configSizePerStage => configSizePerStage_1_data_reg,
        configSizePerStage_ap_vld => configSizePerStage_1_vld_reg,
        configReg_address0 => configReg_address0,
        configReg_ce0 => configReg_ce0,
        configReg_we0 => configReg_we0,
        configReg_d0 => grp_effect_delay_fu_396_config_r_d0,
        configReg_q0 => configReg_q0);

    pynq_dsp_hls_physMemPtr_V_m_axi_U : component pynq_dsp_hls_physMemPtr_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PHYSMEMPTR_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_PHYSMEMPTR_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_PHYSMEMPTR_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PHYSMEMPTR_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PHYSMEMPTR_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_physMemPtr_V_AWVALID,
        AWREADY => m_axi_physMemPtr_V_AWREADY,
        AWADDR => m_axi_physMemPtr_V_AWADDR,
        AWID => m_axi_physMemPtr_V_AWID,
        AWLEN => m_axi_physMemPtr_V_AWLEN,
        AWSIZE => m_axi_physMemPtr_V_AWSIZE,
        AWBURST => m_axi_physMemPtr_V_AWBURST,
        AWLOCK => m_axi_physMemPtr_V_AWLOCK,
        AWCACHE => m_axi_physMemPtr_V_AWCACHE,
        AWPROT => m_axi_physMemPtr_V_AWPROT,
        AWQOS => m_axi_physMemPtr_V_AWQOS,
        AWREGION => m_axi_physMemPtr_V_AWREGION,
        AWUSER => m_axi_physMemPtr_V_AWUSER,
        WVALID => m_axi_physMemPtr_V_WVALID,
        WREADY => m_axi_physMemPtr_V_WREADY,
        WDATA => m_axi_physMemPtr_V_WDATA,
        WSTRB => m_axi_physMemPtr_V_WSTRB,
        WLAST => m_axi_physMemPtr_V_WLAST,
        WID => m_axi_physMemPtr_V_WID,
        WUSER => m_axi_physMemPtr_V_WUSER,
        ARVALID => m_axi_physMemPtr_V_ARVALID,
        ARREADY => m_axi_physMemPtr_V_ARREADY,
        ARADDR => m_axi_physMemPtr_V_ARADDR,
        ARID => m_axi_physMemPtr_V_ARID,
        ARLEN => m_axi_physMemPtr_V_ARLEN,
        ARSIZE => m_axi_physMemPtr_V_ARSIZE,
        ARBURST => m_axi_physMemPtr_V_ARBURST,
        ARLOCK => m_axi_physMemPtr_V_ARLOCK,
        ARCACHE => m_axi_physMemPtr_V_ARCACHE,
        ARPROT => m_axi_physMemPtr_V_ARPROT,
        ARQOS => m_axi_physMemPtr_V_ARQOS,
        ARREGION => m_axi_physMemPtr_V_ARREGION,
        ARUSER => m_axi_physMemPtr_V_ARUSER,
        RVALID => m_axi_physMemPtr_V_RVALID,
        RREADY => m_axi_physMemPtr_V_RREADY,
        RDATA => m_axi_physMemPtr_V_RDATA,
        RLAST => m_axi_physMemPtr_V_RLAST,
        RID => m_axi_physMemPtr_V_RID,
        RUSER => m_axi_physMemPtr_V_RUSER,
        RRESP => m_axi_physMemPtr_V_RRESP,
        BVALID => m_axi_physMemPtr_V_BVALID,
        BREADY => m_axi_physMemPtr_V_BREADY,
        BRESP => m_axi_physMemPtr_V_BRESP,
        BID => m_axi_physMemPtr_V_BID,
        BUSER => m_axi_physMemPtr_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => physMemPtr_V_ARVALID,
        I_ARREADY => physMemPtr_V_ARREADY,
        I_ARADDR => physMemPtr_V_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => physMemPtr_V_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => physMemPtr_V_RVALID,
        I_RREADY => physMemPtr_V_RREADY,
        I_RDATA => physMemPtr_V_RDATA,
        I_RID => physMemPtr_V_RID,
        I_RUSER => physMemPtr_V_RUSER,
        I_RRESP => physMemPtr_V_RRESP,
        I_RLAST => physMemPtr_V_RLAST,
        I_AWVALID => physMemPtr_V_AWVALID,
        I_AWREADY => physMemPtr_V_AWREADY,
        I_AWADDR => physMemPtr_V_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_2,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => physMemPtr_V_WVALID,
        I_WREADY => physMemPtr_V_WREADY,
        I_WDATA => physMemPtr_V_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => physMemPtr_V_BVALID,
        I_BREADY => physMemPtr_V_BREADY,
        I_BRESP => physMemPtr_V_BRESP,
        I_BID => physMemPtr_V_BID,
        I_BUSER => physMemPtr_V_BUSER);

    pynq_dsp_hls_extMemPtr_V_m_axi_U : component pynq_dsp_hls_extMemPtr_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_EXTMEMPTR_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_EXTMEMPTR_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_EXTMEMPTR_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_EXTMEMPTR_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_EXTMEMPTR_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_EXTMEMPTR_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_EXTMEMPTR_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_extMemPtr_V_AWVALID,
        AWREADY => m_axi_extMemPtr_V_AWREADY,
        AWADDR => m_axi_extMemPtr_V_AWADDR,
        AWID => m_axi_extMemPtr_V_AWID,
        AWLEN => m_axi_extMemPtr_V_AWLEN,
        AWSIZE => m_axi_extMemPtr_V_AWSIZE,
        AWBURST => m_axi_extMemPtr_V_AWBURST,
        AWLOCK => m_axi_extMemPtr_V_AWLOCK,
        AWCACHE => m_axi_extMemPtr_V_AWCACHE,
        AWPROT => m_axi_extMemPtr_V_AWPROT,
        AWQOS => m_axi_extMemPtr_V_AWQOS,
        AWREGION => m_axi_extMemPtr_V_AWREGION,
        AWUSER => m_axi_extMemPtr_V_AWUSER,
        WVALID => m_axi_extMemPtr_V_WVALID,
        WREADY => m_axi_extMemPtr_V_WREADY,
        WDATA => m_axi_extMemPtr_V_WDATA,
        WSTRB => m_axi_extMemPtr_V_WSTRB,
        WLAST => m_axi_extMemPtr_V_WLAST,
        WID => m_axi_extMemPtr_V_WID,
        WUSER => m_axi_extMemPtr_V_WUSER,
        ARVALID => m_axi_extMemPtr_V_ARVALID,
        ARREADY => m_axi_extMemPtr_V_ARREADY,
        ARADDR => m_axi_extMemPtr_V_ARADDR,
        ARID => m_axi_extMemPtr_V_ARID,
        ARLEN => m_axi_extMemPtr_V_ARLEN,
        ARSIZE => m_axi_extMemPtr_V_ARSIZE,
        ARBURST => m_axi_extMemPtr_V_ARBURST,
        ARLOCK => m_axi_extMemPtr_V_ARLOCK,
        ARCACHE => m_axi_extMemPtr_V_ARCACHE,
        ARPROT => m_axi_extMemPtr_V_ARPROT,
        ARQOS => m_axi_extMemPtr_V_ARQOS,
        ARREGION => m_axi_extMemPtr_V_ARREGION,
        ARUSER => m_axi_extMemPtr_V_ARUSER,
        RVALID => m_axi_extMemPtr_V_RVALID,
        RREADY => m_axi_extMemPtr_V_RREADY,
        RDATA => m_axi_extMemPtr_V_RDATA,
        RLAST => m_axi_extMemPtr_V_RLAST,
        RID => m_axi_extMemPtr_V_RID,
        RUSER => m_axi_extMemPtr_V_RUSER,
        RRESP => m_axi_extMemPtr_V_RRESP,
        BVALID => m_axi_extMemPtr_V_BVALID,
        BREADY => m_axi_extMemPtr_V_BREADY,
        BRESP => m_axi_extMemPtr_V_BRESP,
        BID => m_axi_extMemPtr_V_BID,
        BUSER => m_axi_extMemPtr_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => extMemPtr_V_ARVALID,
        I_ARREADY => extMemPtr_V_ARREADY,
        I_ARADDR => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARADDR,
        I_ARID => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARID,
        I_ARLEN => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARLEN,
        I_ARSIZE => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARSIZE,
        I_ARLOCK => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARLOCK,
        I_ARCACHE => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARCACHE,
        I_ARQOS => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARQOS,
        I_ARPROT => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARPROT,
        I_ARUSER => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARUSER,
        I_ARBURST => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARBURST,
        I_ARREGION => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARREGION,
        I_RVALID => extMemPtr_V_RVALID,
        I_RREADY => extMemPtr_V_RREADY,
        I_RDATA => extMemPtr_V_RDATA,
        I_RID => extMemPtr_V_RID,
        I_RUSER => extMemPtr_V_RUSER,
        I_RRESP => extMemPtr_V_RRESP,
        I_RLAST => extMemPtr_V_RLAST,
        I_AWVALID => extMemPtr_V_AWVALID,
        I_AWREADY => extMemPtr_V_AWREADY,
        I_AWADDR => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWADDR,
        I_AWID => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWID,
        I_AWLEN => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWLEN,
        I_AWSIZE => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWSIZE,
        I_AWLOCK => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWLOCK,
        I_AWCACHE => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWCACHE,
        I_AWQOS => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWQOS,
        I_AWPROT => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWPROT,
        I_AWUSER => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWUSER,
        I_AWBURST => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWBURST,
        I_AWREGION => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWREGION,
        I_WVALID => extMemPtr_V_WVALID,
        I_WREADY => extMemPtr_V_WREADY,
        I_WDATA => grp_effect_delay_fu_396_m_axi_extMemPtr_V_WDATA,
        I_WID => grp_effect_delay_fu_396_m_axi_extMemPtr_V_WID,
        I_WUSER => grp_effect_delay_fu_396_m_axi_extMemPtr_V_WUSER,
        I_WLAST => grp_effect_delay_fu_396_m_axi_extMemPtr_V_WLAST,
        I_WSTRB => grp_effect_delay_fu_396_m_axi_extMemPtr_V_WSTRB,
        I_BVALID => extMemPtr_V_BVALID,
        I_BREADY => extMemPtr_V_BREADY,
        I_BRESP => extMemPtr_V_BRESP,
        I_BID => extMemPtr_V_BID,
        I_BUSER => extMemPtr_V_BUSER);

    grp_effect_delay_fu_396 : component effect_delay
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_effect_delay_fu_396_ap_start,
        ap_done => grp_effect_delay_fu_396_ap_done,
        ap_idle => grp_effect_delay_fu_396_ap_idle,
        ap_ready => grp_effect_delay_fu_396_ap_ready,
        inData_l => reg_465,
        inData_r => reg_474,
        config_r_address0 => grp_effect_delay_fu_396_config_r_address0,
        config_r_ce0 => grp_effect_delay_fu_396_config_r_ce0,
        config_r_we0 => grp_effect_delay_fu_396_config_r_we0,
        config_r_d0 => grp_effect_delay_fu_396_config_r_d0,
        config_r_q0 => configReg_q0,
        config_offset => t_V_reg_340,
        m_axi_extMemPtr_V_AWVALID => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWVALID,
        m_axi_extMemPtr_V_AWREADY => extMemPtr_V_AWREADY,
        m_axi_extMemPtr_V_AWADDR => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWADDR,
        m_axi_extMemPtr_V_AWID => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWID,
        m_axi_extMemPtr_V_AWLEN => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWLEN,
        m_axi_extMemPtr_V_AWSIZE => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWSIZE,
        m_axi_extMemPtr_V_AWBURST => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWBURST,
        m_axi_extMemPtr_V_AWLOCK => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWLOCK,
        m_axi_extMemPtr_V_AWCACHE => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWCACHE,
        m_axi_extMemPtr_V_AWPROT => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWPROT,
        m_axi_extMemPtr_V_AWQOS => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWQOS,
        m_axi_extMemPtr_V_AWREGION => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWREGION,
        m_axi_extMemPtr_V_AWUSER => grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWUSER,
        m_axi_extMemPtr_V_WVALID => grp_effect_delay_fu_396_m_axi_extMemPtr_V_WVALID,
        m_axi_extMemPtr_V_WREADY => extMemPtr_V_WREADY,
        m_axi_extMemPtr_V_WDATA => grp_effect_delay_fu_396_m_axi_extMemPtr_V_WDATA,
        m_axi_extMemPtr_V_WSTRB => grp_effect_delay_fu_396_m_axi_extMemPtr_V_WSTRB,
        m_axi_extMemPtr_V_WLAST => grp_effect_delay_fu_396_m_axi_extMemPtr_V_WLAST,
        m_axi_extMemPtr_V_WID => grp_effect_delay_fu_396_m_axi_extMemPtr_V_WID,
        m_axi_extMemPtr_V_WUSER => grp_effect_delay_fu_396_m_axi_extMemPtr_V_WUSER,
        m_axi_extMemPtr_V_ARVALID => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARVALID,
        m_axi_extMemPtr_V_ARREADY => extMemPtr_V_ARREADY,
        m_axi_extMemPtr_V_ARADDR => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARADDR,
        m_axi_extMemPtr_V_ARID => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARID,
        m_axi_extMemPtr_V_ARLEN => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARLEN,
        m_axi_extMemPtr_V_ARSIZE => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARSIZE,
        m_axi_extMemPtr_V_ARBURST => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARBURST,
        m_axi_extMemPtr_V_ARLOCK => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARLOCK,
        m_axi_extMemPtr_V_ARCACHE => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARCACHE,
        m_axi_extMemPtr_V_ARPROT => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARPROT,
        m_axi_extMemPtr_V_ARQOS => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARQOS,
        m_axi_extMemPtr_V_ARREGION => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARREGION,
        m_axi_extMemPtr_V_ARUSER => grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARUSER,
        m_axi_extMemPtr_V_RVALID => extMemPtr_V_RVALID,
        m_axi_extMemPtr_V_RREADY => grp_effect_delay_fu_396_m_axi_extMemPtr_V_RREADY,
        m_axi_extMemPtr_V_RDATA => extMemPtr_V_RDATA,
        m_axi_extMemPtr_V_RLAST => extMemPtr_V_RLAST,
        m_axi_extMemPtr_V_RID => extMemPtr_V_RID,
        m_axi_extMemPtr_V_RUSER => extMemPtr_V_RUSER,
        m_axi_extMemPtr_V_RRESP => extMemPtr_V_RRESP,
        m_axi_extMemPtr_V_BVALID => extMemPtr_V_BVALID,
        m_axi_extMemPtr_V_BREADY => grp_effect_delay_fu_396_m_axi_extMemPtr_V_BREADY,
        m_axi_extMemPtr_V_BRESP => extMemPtr_V_BRESP,
        m_axi_extMemPtr_V_BID => extMemPtr_V_BID,
        m_axi_extMemPtr_V_BUSER => extMemPtr_V_BUSER,
        ap_return_0 => grp_effect_delay_fu_396_ap_return_0,
        ap_return_1 => grp_effect_delay_fu_396_ap_return_1);

    pynq_dsp_hls_fmulcud_U13 : component pynq_dsp_hls_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_408_p0,
        din1 => grp_fu_408_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_408_p2);

    pynq_dsp_hls_fmulcud_U14 : component pynq_dsp_hls_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_413_p0,
        din1 => x_assign_fu_186,
        ce => ap_const_logic_1,
        dout => grp_fu_413_p2);

    pynq_dsp_hls_fdiveOg_U15 : component pynq_dsp_hls_fdiveOg
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_1664,
        din1 => ap_const_lv32_4AFFFFFE,
        ce => ap_const_logic_1,
        dout => grp_fu_417_p2);

    pynq_dsp_hls_fdiveOg_U16 : component pynq_dsp_hls_fdiveOg
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_1_reg_1669,
        din1 => ap_const_lv32_4AFFFFFE,
        ce => ap_const_logic_1,
        dout => grp_fu_422_p2);

    pynq_dsp_hls_sitofYi_U17 : component pynq_dsp_hls_sitofYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_427_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_427_p1);

    pynq_dsp_hls_sitofYi_U18 : component pynq_dsp_hls_sitofYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_430_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_430_p1);

    pynq_dsp_hls_fcmpg8j_U19 : component pynq_dsp_hls_fcmpg8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_433_p0,
        din1 => grp_fu_433_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_433_opcode,
        dout => grp_fu_433_p2);

    pynq_dsp_hls_fcmpg8j_U20 : component pynq_dsp_hls_fcmpg8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_437_p0,
        din1 => grp_fu_437_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_437_opcode,
        dout => grp_fu_437_p2);

    pynq_dsp_hls_fcmpg8j_U21 : component pynq_dsp_hls_fcmpg8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x_assign_4_fu_190,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_441_p2);

    pynq_dsp_hls_fcmpg8j_U22 : component pynq_dsp_hls_fcmpg8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x_assign_fu_186,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_446_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_effect_delay_fu_396_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_effect_delay_fu_396_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    grp_effect_delay_fu_396_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_effect_delay_fu_396_ap_ready = ap_const_logic_1)) then 
                    grp_effect_delay_fu_396_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    basePhysAddr_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    configSizePerStage_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    configSizePerStage_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (configSizePerStage_1_vld_reg = ap_const_logic_0) and (configSizePerStage_1_vld_in = ap_const_logic_1))) then 
                configSizePerStage_1_vld_reg <= ap_const_logic_1;
            elsif (((configSizePerStage_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (configSizePerStage_1_vld_reg = ap_const_logic_1))) then 
                configSizePerStage_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    counter_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    counter_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    counter_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (counter_1_vld_reg = ap_const_logic_0) and (counter_1_vld_in = ap_const_logic_1))) then 
                counter_1_vld_reg <= ap_const_logic_1;
            elsif (((counter_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (counter_1_vld_reg = ap_const_logic_1))) then 
                counter_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    lrclk_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorDstL_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorDstL_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorDstL_1_vld_reg = ap_const_logic_0) and (monitorDstL_1_vld_in = ap_const_logic_1))) then 
                monitorDstL_1_vld_reg <= ap_const_logic_1;
            elsif (((monitorDstL_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (monitorDstL_1_vld_reg = ap_const_logic_1))) then 
                monitorDstL_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    monitorDstR_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorDstR_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorDstR_1_vld_reg = ap_const_logic_0) and (monitorDstR_1_vld_in = ap_const_logic_1))) then 
                monitorDstR_1_vld_reg <= ap_const_logic_1;
            elsif (((monitorDstR_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (monitorDstR_1_vld_reg = ap_const_logic_1))) then 
                monitorDstR_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    monitorSrcL_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorSrcL_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorSrcL_1_vld_reg = ap_const_logic_0) and (monitorSrcL_1_vld_in = ap_const_logic_1))) then 
                monitorSrcL_1_vld_reg <= ap_const_logic_1;
            elsif (((monitorSrcL_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (monitorSrcL_1_vld_reg = ap_const_logic_1))) then 
                monitorSrcL_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    monitorSrcR_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorSrcR_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorSrcR_1_vld_reg = ap_const_logic_0) and (monitorSrcR_1_vld_in = ap_const_logic_1))) then 
                monitorSrcR_1_vld_reg <= ap_const_logic_1;
            elsif (((monitorSrcR_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (monitorSrcR_1_vld_reg = ap_const_logic_1))) then 
                monitorSrcR_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    numOfStage_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    numOfStage_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (numOfStage_1_vld_reg = ap_const_logic_0) and (numOfStage_1_vld_in = ap_const_logic_1))) then 
                numOfStage_1_vld_reg <= ap_const_logic_1;
            elsif (((numOfStage_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (numOfStage_1_vld_reg = ap_const_logic_1))) then 
                numOfStage_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    readyLch_flag_1_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_io) and (or_ln164_fu_553_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln761_fu_513_p2 = ap_const_lv1_0))) then 
                readyLch_flag_1_reg_382 <= xor_ln159_fu_531_p2;
            elsif ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)) or ((ap_predicate_op439_writeresp_state70 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state70) and (or_ln164_reg_1611 = ap_const_lv1_0) and (icmp_ln761_reg_1602 = ap_const_lv1_0))) then 
                readyLch_flag_1_reg_382 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_state11_io) and (icmp_ln761_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                readyLch_flag_1_reg_382 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    readyRch_flag_1_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_io) and (or_ln164_fu_553_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln761_fu_513_p2 = ap_const_lv1_0))) then 
                readyRch_flag_1_reg_352 <= lrclk_V_0_data_reg;
            elsif ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)) or ((ap_predicate_op439_writeresp_state70 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state70) and (or_ln164_reg_1611 = ap_const_lv1_0) and (icmp_ln761_reg_1602 = ap_const_lv1_0))) then 
                readyRch_flag_1_reg_352 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_state11_io) and (icmp_ln761_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                readyRch_flag_1_reg_352 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    readyRch_new_1_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_io) and (or_ln164_fu_553_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln761_fu_513_p2 = ap_const_lv1_0))) then 
                readyRch_new_1_reg_366 <= ap_const_lv1_1;
            elsif ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)) or ((ap_predicate_op439_writeresp_state70 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state70) and (or_ln164_reg_1611 = ap_const_lv1_0) and (icmp_ln761_reg_1602 = ap_const_lv1_0))) then 
                readyRch_new_1_reg_366 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    t_V_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                t_V_reg_340 <= stageIndex_V_reg_1689;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                t_V_reg_340 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    x_assign_4_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                x_assign_4_fu_190 <= dst_l_fu_1048_p3;
            elsif (((trunc_ln189_reg_1715 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                x_assign_4_fu_190 <= dst_l_1_reg_1760;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_effect_delay_fu_396_ap_done = ap_const_logic_1))) then 
                x_assign_4_fu_190 <= grp_effect_delay_fu_396_ap_return_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                x_assign_4_fu_190 <= floatSrcL_reg_1674;
            end if; 
        end if;
    end process;

    x_assign_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                x_assign_fu_186 <= dst_r_fu_1072_p3;
            elsif (((trunc_ln189_reg_1715 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                x_assign_fu_186 <= dst_r_1_reg_1765;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_effect_delay_fu_396_ap_done = ap_const_logic_1))) then 
                x_assign_fu_186 <= grp_effect_delay_fu_396_ap_return_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                x_assign_fu_186 <= floatSrcR_reg_1680;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                    absL_1_reg_1789(30 downto 0) <= absL_1_fu_913_p1(30 downto 0);
                    absR_1_reg_1795(30 downto 0) <= absR_1_fu_938_p1(30 downto 0);
                or_ln257_2_reg_1807 <= or_ln257_2_fu_993_p2;
                or_ln257_reg_1801 <= or_ln257_fu_965_p2;
                    thresh_reg_1781(30 downto 0) <= thresh_fu_887_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                and_ln284_1_reg_1972 <= and_ln284_1_fu_1398_p2;
                icmp_ln285_1_reg_1962 <= icmp_ln285_1_fu_1366_p2;
                ret_V_1_reg_1987 <= ret_V_1_fu_1436_p2;
                select_ln282_reg_1950 <= select_ln282_fu_1344_p3;
                    tmp_6_reg_1956(22 downto 0) <= tmp_6_fu_1351_p3(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                and_ln284_reg_1899 <= and_ln284_fu_1187_p2;
                icmp_ln278_1_reg_1929 <= icmp_ln278_1_fu_1258_p2;
                icmp_ln282_1_reg_1944 <= icmp_ln282_1_fu_1270_p2;
                icmp_ln285_reg_1889 <= icmp_ln285_fu_1155_p2;
                p_Result_17_reg_1919 <= reg_V_1_fu_1225_p1(31 downto 31);
                reg_V_1_reg_1914 <= reg_V_1_fu_1225_p1;
                sh_amt_2_reg_1936 <= sh_amt_2_fu_1264_p2;
                    tmp_2_reg_1883(22 downto 0) <= tmp_2_fu_1140_p3(22 downto 0);
                trunc_ln270_1_reg_1924 <= trunc_ln270_1_fu_1254_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state62) and (icmp_ln278_1_reg_1929 = ap_const_lv1_0))) then
                and_ln295_1_reg_1982 <= and_ln295_1_fu_1430_p2;
                select_ln285_2_reg_1977 <= select_ln285_2_fu_1410_p3;
                sh_amt_3_reg_1967 <= sh_amt_3_fu_1371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state61) and (icmp_ln278_reg_1862 = ap_const_lv1_0))) then
                and_ln295_reg_1909 <= and_ln295_fu_1219_p2;
                select_ln285_reg_1904 <= select_ln285_fu_1199_p3;
                sh_amt_1_reg_1894 <= sh_amt_1_fu_1160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (basePhysAddr_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (basePhysAddr_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (basePhysAddr_V_0_vld_reg = ap_const_logic_1)))) then
                basePhysAddr_V_0_data_reg <= basePhysAddr_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (configSizePerStage_1_vld_reg = ap_const_logic_0) and (configSizePerStage_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (configSizePerStage_1_vld_in = ap_const_logic_1) and (configSizePerStage_1_vld_reg = ap_const_logic_1)))) then
                configSizePerStage_1_data_reg(3) <= '1';
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (counter_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (counter_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (counter_0_vld_reg = ap_const_logic_1)))) then
                counter_0_data_reg <= counter_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (counter_1_vld_reg = ap_const_logic_0) and (counter_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (counter_1_vld_in = ap_const_logic_1) and (counter_1_vld_reg = ap_const_logic_1)))) then
                counter_1_data_reg <= select_ln173_fu_585_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                dst_l_1_reg_1760 <= dst_l_1_fu_810_p3;
                dst_r_1_reg_1765 <= dst_r_1_fu_828_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                floatDstL_reg_1835 <= grp_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                floatDstR_reg_1841 <= grp_fu_408_p2;
                icmp_ln278_reg_1862 <= icmp_ln278_fu_1122_p2;
                icmp_ln282_reg_1877 <= icmp_ln282_fu_1134_p2;
                p_Result_16_reg_1852 <= reg_V_fu_1089_p1(31 downto 31);
                reg_V_reg_1847 <= reg_V_fu_1089_p1;
                sh_amt_reg_1869 <= sh_amt_fu_1128_p2;
                trunc_ln270_reg_1857 <= trunc_ln270_fu_1118_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                floatSrcL_reg_1674 <= grp_fu_417_p2;
                floatSrcR_reg_1680 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                icmp_ln63_1_reg_1745 <= icmp_ln63_1_fu_772_p2;
                icmp_ln63_reg_1740 <= icmp_ln63_fu_766_p2;
                icmp_ln64_1_reg_1755 <= icmp_ln64_1_fu_794_p2;
                icmp_ln64_reg_1750 <= icmp_ln64_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                icmp_ln761_reg_1602 <= icmp_ln761_fu_513_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lrclk_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (lrclk_V_0_vld_reg = ap_const_logic_1) and (lrclk_V_0_ack_out = ap_const_logic_1)))) then
                lrclk_V_0_data_reg <= lrclk_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorDstL_1_vld_reg = ap_const_logic_0) and (monitorDstL_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (monitorDstL_1_vld_in = ap_const_logic_1) and (monitorDstL_1_vld_reg = ap_const_logic_1)))) then
                monitorDstL_1_data_reg <= floatDstL_reg_1835;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                    monitorDstL_1_reg_1813(30 downto 0) <= monitorDstL_1_fu_1009_p3(30 downto 0);
                    monitorDstR_1_reg_1819(30 downto 0) <= monitorDstR_1_fu_1025_p3(30 downto 0);
                tmp_13_reg_1825 <= grp_fu_441_p2;
                tmp_14_reg_1830 <= grp_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorDstR_1_vld_reg = ap_const_logic_0) and (monitorDstR_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (monitorDstR_1_vld_in = ap_const_logic_1) and (monitorDstR_1_vld_reg = ap_const_logic_1)))) then
                monitorDstR_1_data_reg <= floatDstR_reg_1841;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorSrcL_1_vld_reg = ap_const_logic_0) and (monitorSrcL_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (monitorSrcL_1_vld_in = ap_const_logic_1) and (monitorSrcL_1_vld_reg = ap_const_logic_1)))) then
                monitorSrcL_1_data_reg <= floatSrcL_reg_1674;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorSrcR_1_vld_reg = ap_const_logic_0) and (monitorSrcR_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (monitorSrcR_1_vld_in = ap_const_logic_1) and (monitorSrcR_1_vld_reg = ap_const_logic_1)))) then
                monitorSrcR_1_data_reg <= floatSrcR_reg_1680;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (numOfStage_1_vld_reg = ap_const_logic_0) and (numOfStage_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (numOfStage_1_vld_in = ap_const_logic_1) and (numOfStage_1_vld_reg = ap_const_logic_1)))) then
                numOfStage_1_data_reg(2) <= '1';
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln761_fu_513_p2 = ap_const_lv1_0))) then
                or_ln164_reg_1611 <= or_ln164_fu_553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                or_ln257_1_reg_1775 <= or_ln257_1_fu_874_p2;
                trunc_ln368_reg_1770 <= trunc_ln368_fu_844_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_V_reg_1576 <= basePhysAddr_V_0_data_reg(31 downto 2);
                ret_V_reg_1586 <= ret_V_fu_497_p2;
                    zext_ln215_reg_1581(29 downto 0) <= zext_ln215_fu_493_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)) or ((ap_predicate_op439_writeresp_state70 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0)))) and (ap_phi_mux_readyLch_flag_1_phi_fu_386_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                readyLch <= ap_phi_mux_readyRch_new_1_phi_fu_371_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)) or ((ap_predicate_op439_writeresp_state70 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0)))) and (ap_phi_mux_readyRch_flag_1_phi_fu_356_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                readyRch <= ap_phi_mux_readyRch_new_1_phi_fu_371_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state45) or ((icmp_ln887_fu_614_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43)))) then
                reg_465 <= x_assign_4_fu_190;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state45))) then
                reg_474 <= x_assign_fu_186;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                select_ln282_1_reg_1997 <= select_ln282_1_fu_1520_p3;
                select_ln303_reg_1992 <= select_ln303_fu_1446_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                select_ln303_1_reg_2010 <= select_ln303_1_fu_1542_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                srcL_V_reg_1639 <= srcL_V_fu_569_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                srcR_V_reg_1649 <= srcR_V_fu_594_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                stageIndex_V_reg_1689 <= stageIndex_V_fu_620_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                status_V_reg_1597 <= physMemPtr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_1_reg_1669 <= grp_fu_430_p1;
                tmp_reg_1664 <= grp_fu_427_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (icmp_ln887_fu_614_p2 = ap_const_lv1_0))) then
                    tmp_5_reg_1694(5 downto 3) <= tmp_5_fu_626_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                trunc_ln189_reg_1715 <= trunc_ln189_fu_667_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                trunc_ln368_3_reg_1719 <= trunc_ln368_3_fu_689_p1;
            end if;
        end if;
    end process;
    numOfStage_1_data_reg(1 downto 0) <= "00";
    numOfStage_1_data_reg(31 downto 3) <= "00000000000000000000000000000";
    configSizePerStage_1_data_reg(2 downto 0) <= "000";
    configSizePerStage_1_data_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln215_reg_1581(30) <= '0';
    tmp_5_reg_1694(2 downto 0) <= "000";
    thresh_reg_1781(31) <= '0';
    absL_1_reg_1789(31) <= '0';
    absR_1_reg_1795(31) <= '0';
    monitorDstL_1_reg_1813(31) <= '0';
    monitorDstR_1_reg_1819(31) <= '0';
    tmp_2_reg_1883(23) <= '1';
    tmp_6_reg_1956(23) <= '1';
    monitorSrcL_1_state(1 downto 0) <= "00";
    monitorSrcR_1_state(1 downto 0) <= "00";
    monitorDstL_1_state(1 downto 0) <= "00";
    monitorDstR_1_state(1 downto 0) <= "00";
    counter_1_state(1 downto 0) <= "00";
    numOfStage_1_state(1 downto 0) <= "00";
    configSizePerStage_1_state(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state11, icmp_ln761_fu_513_p2, or_ln164_fu_553_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state70, physMemPtr_V_AWREADY, physMemPtr_V_WREADY, physMemPtr_V_ARREADY, physMemPtr_V_RVALID, physMemPtr_V_BVALID, ap_CS_fsm_state43, icmp_ln887_fu_614_p2, ap_block_state11_io, ap_CS_fsm_state44, trunc_ln189_fu_667_p1, grp_effect_delay_fu_396_ap_done, ap_predicate_op439_writeresp_state70, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state, ap_CS_fsm_state46)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and (or_ln164_fu_553_p2 = ap_const_lv1_0) and (icmp_ln761_fu_513_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and ((or_ln164_fu_553_p2 = ap_const_lv1_1) or (icmp_ln761_fu_513_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((icmp_ln887_fu_614_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                if (((trunc_ln189_fu_667_p1 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                elsif ((not((trunc_ln189_fu_667_p1 = ap_const_lv4_5)) and not((trunc_ln189_fu_667_p1 = ap_const_lv4_1)) and not((trunc_ln189_fu_667_p1 = ap_const_lv4_2)) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                elsif (((trunc_ln189_fu_667_p1 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_effect_delay_fu_396_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)) or ((ap_predicate_op439_writeresp_state70 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    absL_1_fu_913_p1 <= p_Result_11_fu_905_p3;
    absL_fu_726_p1 <= p_Result_14_fu_718_p3;
    absR_1_fu_938_p1 <= p_Result_12_fu_930_p3;
    absR_fu_751_p1 <= p_Result_15_fu_743_p3;
    add_ln173_fu_579_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(counter_0_data_reg));
    and_ln164_fu_542_p2 <= (xor_ln164_fu_536_p2 and lrclk_V_0_data_reg);
    and_ln257_1_fu_1003_p2 <= (grp_fu_433_p2 and and_ln257_fu_999_p2);
    and_ln257_2_fu_1015_p2 <= (or_ln257_2_reg_1807 and or_ln257_1_reg_1775);
    and_ln257_3_fu_1019_p2 <= (grp_fu_437_p2 and and_ln257_2_fu_1015_p2);
    and_ln257_fu_999_p2 <= (or_ln257_reg_1801 and or_ln257_1_reg_1775);
    and_ln282_1_fu_1515_p2 <= (xor_ln278_1_fu_1510_p2 and icmp_ln282_1_reg_1944);
    and_ln282_fu_1339_p2 <= (xor_ln278_fu_1334_p2 and icmp_ln282_reg_1877);
    and_ln284_1_fu_1398_p2 <= (xor_ln282_1_fu_1392_p2 and icmp_ln284_1_fu_1361_p2);
    and_ln284_fu_1187_p2 <= (xor_ln282_fu_1181_p2 and icmp_ln284_fu_1150_p2);
    and_ln285_1_fu_1321_p2 <= (xor_ln285_fu_1316_p2 and and_ln284_reg_1899);
    and_ln285_2_fu_1404_p2 <= (icmp_ln285_1_fu_1366_p2 and and_ln284_1_fu_1398_p2);
    and_ln285_3_fu_1497_p2 <= (xor_ln285_1_fu_1492_p2 and and_ln284_1_reg_1972);
    and_ln285_fu_1193_p2 <= (icmp_ln285_fu_1155_p2 and and_ln284_fu_1187_p2);
    and_ln295_1_fu_1430_p2 <= (xor_ln284_1_fu_1424_p2 and icmp_ln295_1_fu_1376_p2);
    and_ln295_fu_1219_p2 <= (xor_ln284_fu_1213_p2 and icmp_ln295_fu_1165_p2);
    and_ln51_fu_1031_p2 <= (tmp_13_reg_1825 and or_ln257_reg_1801);
    and_ln52_fu_1055_p2 <= (tmp_14_reg_1830 and or_ln257_2_reg_1807);
    and_ln63_fu_804_p2 <= (or_ln63_fu_800_p2 and grp_fu_433_p2);
    and_ln64_fu_822_p2 <= (or_ln64_fu_818_p2 and grp_fu_437_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);

    ap_block_state11_io_assign_proc : process(physMemPtr_V_ARREADY, ap_predicate_op134_readreq_state11)
    begin
                ap_block_state11_io <= ((ap_predicate_op134_readreq_state11 = ap_const_boolean_1) and (physMemPtr_V_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state70_assign_proc : process(physMemPtr_V_BVALID, ap_predicate_op439_writeresp_state70, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
                ap_block_state70 <= ((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)) or ((ap_predicate_op439_writeresp_state70 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state70, physMemPtr_V_BVALID, ap_predicate_op439_writeresp_state70, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)) or ((ap_predicate_op439_writeresp_state70 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_readyLch_flag_1_phi_fu_386_p6_assign_proc : process(ap_CS_fsm_state70, icmp_ln761_reg_1602, or_ln164_reg_1611, readyLch_flag_1_reg_382)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) and (or_ln164_reg_1611 = ap_const_lv1_0) and (icmp_ln761_reg_1602 = ap_const_lv1_0))) then 
            ap_phi_mux_readyLch_flag_1_phi_fu_386_p6 <= ap_const_lv1_1;
        else 
            ap_phi_mux_readyLch_flag_1_phi_fu_386_p6 <= readyLch_flag_1_reg_382;
        end if; 
    end process;


    ap_phi_mux_readyRch_flag_1_phi_fu_356_p6_assign_proc : process(ap_CS_fsm_state70, icmp_ln761_reg_1602, or_ln164_reg_1611, readyRch_flag_1_reg_352)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) and (or_ln164_reg_1611 = ap_const_lv1_0) and (icmp_ln761_reg_1602 = ap_const_lv1_0))) then 
            ap_phi_mux_readyRch_flag_1_phi_fu_356_p6 <= ap_const_lv1_1;
        else 
            ap_phi_mux_readyRch_flag_1_phi_fu_356_p6 <= readyRch_flag_1_reg_352;
        end if; 
    end process;


    ap_phi_mux_readyRch_new_1_phi_fu_371_p6_assign_proc : process(ap_CS_fsm_state70, icmp_ln761_reg_1602, or_ln164_reg_1611, readyRch_new_1_reg_366)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) and (or_ln164_reg_1611 = ap_const_lv1_0) and (icmp_ln761_reg_1602 = ap_const_lv1_0))) then 
            ap_phi_mux_readyRch_new_1_phi_fu_371_p6 <= ap_const_lv1_0;
        else 
            ap_phi_mux_readyRch_new_1_phi_fu_371_p6 <= readyRch_new_1_reg_366;
        end if; 
    end process;


    ap_predicate_op134_readreq_state11_assign_proc : process(icmp_ln761_fu_513_p2, or_ln164_fu_553_p2)
    begin
                ap_predicate_op134_readreq_state11 <= ((or_ln164_fu_553_p2 = ap_const_lv1_0) and (icmp_ln761_fu_513_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op439_writeresp_state70_assign_proc : process(icmp_ln761_reg_1602, or_ln164_reg_1611)
    begin
                ap_predicate_op439_writeresp_state70 <= ((or_ln164_reg_1611 = ap_const_lv1_0) and (icmp_ln761_reg_1602 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state70, physMemPtr_V_BVALID, ap_predicate_op439_writeresp_state70, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)) or ((ap_predicate_op439_writeresp_state70 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    basePhysAddr_V_0_ack_out_assign_proc : process(ap_CS_fsm_state70, physMemPtr_V_BVALID, ap_CS_fsm_state2, ap_predicate_op439_writeresp_state70, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)) or ((ap_predicate_op439_writeresp_state70 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state70)))) then 
            basePhysAddr_V_0_ack_out <= ap_const_logic_1;
        else 
            basePhysAddr_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln51_1_fu_1044_p1 <= xor_ln51_fu_1038_p2;
    bitcast_ln51_fu_1035_p1 <= monitorDstL_1_reg_1813;
    bitcast_ln52_1_fu_1068_p1 <= xor_ln52_fu_1062_p2;
    bitcast_ln52_fu_1059_p1 <= monitorDstR_1_reg_1819;

    configReg_address0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state44, trunc_ln189_fu_667_p1, grp_effect_delay_fu_396_config_r_address0, ap_CS_fsm_state46, zext_ln189_fu_634_p1, tmp_3_fu_644_p3, tmp_7_fu_658_p3)
    begin
        if (((trunc_ln189_fu_667_p1 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            configReg_address0 <= tmp_3_fu_644_p3(5 - 1 downto 0);
        elsif (((trunc_ln189_fu_667_p1 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            configReg_address0 <= tmp_7_fu_658_p3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            configReg_address0 <= zext_ln189_fu_634_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            configReg_address0 <= grp_effect_delay_fu_396_config_r_address0;
        else 
            configReg_address0 <= "XXXXX";
        end if; 
    end process;


    configReg_ce0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state44, trunc_ln189_fu_667_p1, grp_effect_delay_fu_396_config_r_ce0, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((trunc_ln189_fu_667_p1 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((trunc_ln189_fu_667_p1 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            configReg_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            configReg_ce0 <= grp_effect_delay_fu_396_config_r_ce0;
        else 
            configReg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    configReg_we0_assign_proc : process(grp_effect_delay_fu_396_config_r_we0, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            configReg_we0 <= grp_effect_delay_fu_396_config_r_we0;
        else 
            configReg_we0 <= ap_const_logic_0;
        end if; 
    end process;


    configSizePerStage_1_vld_in_assign_proc : process(ap_CS_fsm_state10, physMemPtr_V_RVALID)
    begin
        if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            configSizePerStage_1_vld_in <= ap_const_logic_1;
        else 
            configSizePerStage_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    counter_0_ack_out_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state70, physMemPtr_V_RVALID, physMemPtr_V_BVALID, ap_predicate_op439_writeresp_state70, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if (((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)) or ((ap_predicate_op439_writeresp_state70 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state70)) or ((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            counter_0_ack_out <= ap_const_logic_1;
        else 
            counter_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    counter_1_vld_in_assign_proc : process(ap_CS_fsm_state19, physMemPtr_V_RVALID)
    begin
        if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            counter_1_vld_in <= ap_const_logic_1;
        else 
            counter_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_l_1_fu_810_p3 <= 
        reg_465 when (and_ln63_fu_804_p2(0) = '1') else 
        grp_fu_408_p2;
    dst_l_fu_1048_p3 <= 
        bitcast_ln51_1_fu_1044_p1 when (and_ln51_fu_1031_p2(0) = '1') else 
        monitorDstL_1_reg_1813;
    dst_r_1_fu_828_p3 <= 
        reg_474 when (and_ln64_fu_822_p2(0) = '1') else 
        grp_fu_413_p2;
    dst_r_fu_1072_p3 <= 
        bitcast_ln52_1_fu_1068_p1 when (and_ln52_fu_1055_p2(0) = '1') else 
        monitorDstR_1_reg_1819;
    exp_V_1_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_fu_1240_p4),9));
    exp_V_fu_1114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_1104_p4),9));

    extMemPtr_V_ARVALID_assign_proc : process(ap_CS_fsm_state45, grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARVALID, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            extMemPtr_V_ARVALID <= grp_effect_delay_fu_396_m_axi_extMemPtr_V_ARVALID;
        else 
            extMemPtr_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    extMemPtr_V_AWVALID_assign_proc : process(ap_CS_fsm_state45, grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWVALID, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            extMemPtr_V_AWVALID <= grp_effect_delay_fu_396_m_axi_extMemPtr_V_AWVALID;
        else 
            extMemPtr_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    extMemPtr_V_BREADY_assign_proc : process(ap_CS_fsm_state45, grp_effect_delay_fu_396_m_axi_extMemPtr_V_BREADY, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            extMemPtr_V_BREADY <= grp_effect_delay_fu_396_m_axi_extMemPtr_V_BREADY;
        else 
            extMemPtr_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    extMemPtr_V_RREADY_assign_proc : process(ap_CS_fsm_state45, grp_effect_delay_fu_396_m_axi_extMemPtr_V_RREADY, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            extMemPtr_V_RREADY <= grp_effect_delay_fu_396_m_axi_extMemPtr_V_RREADY;
        else 
            extMemPtr_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    extMemPtr_V_WVALID_assign_proc : process(ap_CS_fsm_state45, grp_effect_delay_fu_396_m_axi_extMemPtr_V_WVALID, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            extMemPtr_V_WVALID <= grp_effect_delay_fu_396_m_axi_extMemPtr_V_WVALID;
        else 
            extMemPtr_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_effect_delay_fu_396_ap_start <= grp_effect_delay_fu_396_ap_start_reg;

    grp_fu_408_p0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state57, ratio_fu_700_p1, x_assign_fu_186, x_assign_4_fu_190)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_408_p0 <= x_assign_fu_186;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_408_p0 <= ratio_fu_700_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_408_p0 <= x_assign_4_fu_190;
        else 
            grp_fu_408_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_408_p1_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state57, x_assign_4_fu_190)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_408_p1 <= x_assign_4_fu_190;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            grp_fu_408_p1 <= ap_const_lv32_4AFFFFFE;
        else 
            grp_fu_408_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_413_p0 <= p_Result_13_fu_693_p3;
        grp_fu_427_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(srcL_V_reg_1639),32));

        grp_fu_430_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(srcR_V_reg_1649),32));


    grp_fu_433_opcode_assign_proc : process(ap_CS_fsm_state54, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_433_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_433_opcode <= ap_const_lv5_2;
        else 
            grp_fu_433_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_433_p0_assign_proc : process(ap_CS_fsm_state54, absL_fu_726_p1, ap_CS_fsm_state50, absL_1_fu_913_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_433_p0 <= absL_1_fu_913_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_433_p0 <= absL_fu_726_p1;
        else 
            grp_fu_433_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_433_p1_assign_proc : process(reg_465, ap_CS_fsm_state54, ap_CS_fsm_state50, thresh_fu_887_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_433_p1 <= thresh_fu_887_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_433_p1 <= reg_465;
        else 
            grp_fu_433_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_437_opcode_assign_proc : process(ap_CS_fsm_state54, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_437_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_437_opcode <= ap_const_lv5_2;
        else 
            grp_fu_437_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_437_p0_assign_proc : process(ap_CS_fsm_state54, ap_CS_fsm_state50, absR_fu_751_p1, absR_1_fu_938_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_437_p0 <= absR_1_fu_938_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_437_p0 <= absR_fu_751_p1;
        else 
            grp_fu_437_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_437_p1_assign_proc : process(ap_CS_fsm_state54, reg_474, ap_CS_fsm_state50, thresh_fu_887_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_437_p1 <= thresh_fu_887_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_437_p1 <= reg_474;
        else 
            grp_fu_437_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln173_fu_573_p2 <= "1" when (unsigned(counter_0_data_reg) < unsigned(ap_const_lv32_FFFFFFFE)) else "0";
    icmp_ln257_1_fu_959_p2 <= "1" when (trunc_ln257_1_fu_901_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_2_fu_862_p2 <= "0" when (tmp_s_fu_852_p4 = ap_const_lv8_FF) else "1";
    icmp_ln257_3_fu_868_p2 <= "1" when (trunc_ln257_fu_848_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_4_fu_981_p2 <= "0" when (tmp_11_fu_971_p4 = ap_const_lv8_FF) else "1";
    icmp_ln257_5_fu_987_p2 <= "1" when (trunc_ln257_2_fu_926_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_fu_953_p2 <= "0" when (tmp_9_fu_943_p4 = ap_const_lv8_FF) else "1";
    icmp_ln278_1_fu_1258_p2 <= "1" when (trunc_ln262_1_fu_1228_p1 = ap_const_lv31_0) else "0";
    icmp_ln278_fu_1122_p2 <= "1" when (trunc_ln262_fu_1092_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_1_fu_1270_p2 <= "1" when (p_Result_4_fu_1240_p4 = ap_const_lv8_96) else "0";
    icmp_ln282_fu_1134_p2 <= "1" when (p_Result_s_fu_1104_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_1_fu_1361_p2 <= "1" when (signed(sh_amt_2_reg_1936) > signed(ap_const_lv9_0)) else "0";
    icmp_ln284_fu_1150_p2 <= "1" when (signed(sh_amt_reg_1869) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_1_fu_1366_p2 <= "1" when (signed(sh_amt_2_reg_1936) < signed(ap_const_lv9_19)) else "0";
    icmp_ln285_fu_1155_p2 <= "1" when (signed(sh_amt_reg_1869) < signed(ap_const_lv9_19)) else "0";
    icmp_ln295_1_fu_1376_p2 <= "1" when (signed(sh_amt_3_fu_1371_p2) < signed(ap_const_lv9_18)) else "0";
    icmp_ln295_fu_1165_p2 <= "1" when (signed(sh_amt_1_fu_1160_p2) < signed(ap_const_lv9_18)) else "0";
    icmp_ln63_1_fu_772_p2 <= "1" when (trunc_ln63_fu_714_p1 = ap_const_lv23_0) else "0";
    icmp_ln63_fu_766_p2 <= "0" when (tmp_15_fu_756_p4 = ap_const_lv8_FF) else "1";
    icmp_ln64_1_fu_794_p2 <= "1" when (trunc_ln64_fu_739_p1 = ap_const_lv23_0) else "0";
    icmp_ln64_fu_788_p2 <= "0" when (tmp_17_fu_778_p4 = ap_const_lv8_FF) else "1";
    icmp_ln761_fu_513_p2 <= "1" when (status_V_reg_1597 = ap_const_lv32_0) else "0";
    icmp_ln887_fu_614_p2 <= "1" when (t_V_reg_340 = ap_const_lv3_4) else "0";

    lrclk_V_0_ack_out_assign_proc : process(ap_CS_fsm_state70, physMemPtr_V_BVALID, ap_CS_fsm_state2, ap_predicate_op439_writeresp_state70, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)) or ((ap_predicate_op439_writeresp_state70 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state70)))) then 
            lrclk_V_0_ack_out <= ap_const_logic_1;
        else 
            lrclk_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln286_1_fu_1382_p2 <= std_logic_vector(shift_right(unsigned(tmp_6_fu_1351_p3),to_integer(unsigned('0' & sext_ln281_1_fu_1358_p1(24-1 downto 0)))));
    lshr_ln286_fu_1171_p2 <= std_logic_vector(shift_right(unsigned(tmp_2_fu_1140_p3),to_integer(unsigned('0' & sext_ln281_fu_1147_p1(24-1 downto 0)))));
    monitorDstL_1_fu_1009_p3 <= 
        absL_1_reg_1789 when (and_ln257_1_fu_1003_p2(0) = '1') else 
        thresh_reg_1781;

    monitorDstL_1_vld_in_assign_proc : process(ap_CS_fsm_state64, physMemPtr_V_WREADY)
    begin
        if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            monitorDstL_1_vld_in <= ap_const_logic_1;
        else 
            monitorDstL_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    monitorDstR_1_fu_1025_p3 <= 
        absR_1_reg_1795 when (and_ln257_3_fu_1019_p2(0) = '1') else 
        thresh_reg_1781;

    monitorDstR_1_vld_in_assign_proc : process(ap_CS_fsm_state64, physMemPtr_V_WREADY)
    begin
        if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            monitorDstR_1_vld_in <= ap_const_logic_1;
        else 
            monitorDstR_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    monitorSrcL_1_vld_in_assign_proc : process(ap_CS_fsm_state64, physMemPtr_V_WREADY)
    begin
        if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            monitorSrcL_1_vld_in <= ap_const_logic_1;
        else 
            monitorSrcL_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    monitorSrcR_1_vld_in_assign_proc : process(ap_CS_fsm_state64, physMemPtr_V_WREADY)
    begin
        if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            monitorSrcR_1_vld_in <= ap_const_logic_1;
        else 
            monitorSrcR_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    numOfStage_1_vld_in_assign_proc : process(ap_CS_fsm_state10, physMemPtr_V_RVALID)
    begin
        if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            numOfStage_1_vld_in <= ap_const_logic_1;
        else 
            numOfStage_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    or_ln159_fu_526_p2 <= (readyRch or lrclk_V_0_data_reg);
    or_ln164_fu_553_p2 <= (xor_ln164_1_fu_547_p2 or and_ln164_fu_542_p2);
    or_ln257_1_fu_874_p2 <= (icmp_ln257_3_fu_868_p2 or icmp_ln257_2_fu_862_p2);
    or_ln257_2_fu_993_p2 <= (icmp_ln257_5_fu_987_p2 or icmp_ln257_4_fu_981_p2);
    or_ln257_fu_965_p2 <= (icmp_ln257_fu_953_p2 or icmp_ln257_1_fu_959_p2);
    or_ln282_1_fu_1388_p2 <= (icmp_ln282_1_reg_1944 or icmp_ln278_1_reg_1929);
    or_ln282_fu_1177_p2 <= (icmp_ln282_reg_1877 or icmp_ln278_reg_1862);
    or_ln284_1_fu_1418_p2 <= (or_ln282_1_fu_1388_p2 or icmp_ln284_1_fu_1361_p2);
    or_ln284_fu_1207_p2 <= (or_ln282_fu_1177_p2 or icmp_ln284_fu_1150_p2);
    or_ln44_fu_639_p2 <= (tmp_5_reg_1694 or ap_const_lv6_1);
    or_ln58_fu_653_p2 <= (tmp_5_reg_1694 or ap_const_lv6_2);
    or_ln63_fu_800_p2 <= (icmp_ln63_reg_1740 or icmp_ln63_1_reg_1745);
    or_ln64_fu_818_p2 <= (icmp_ln64_reg_1750 or icmp_ln64_1_reg_1755);
    p_Result_10_fu_880_p3 <= (ap_const_lv1_0 & trunc_ln368_reg_1770);
    p_Result_11_fu_905_p3 <= (ap_const_lv1_0 & trunc_ln368_1_fu_897_p1);
    p_Result_12_fu_930_p3 <= (ap_const_lv1_0 & trunc_ln368_2_fu_922_p1);
    p_Result_13_fu_693_p3 <= (ap_const_lv1_0 & trunc_ln368_3_reg_1719);
    p_Result_14_fu_718_p3 <= (ap_const_lv1_0 & trunc_ln368_4_fu_710_p1);
    p_Result_15_fu_743_p3 <= (ap_const_lv1_0 & trunc_ln368_5_fu_735_p1);
    p_Result_4_fu_1240_p4 <= reg_V_1_fu_1225_p1(30 downto 23);
    p_Result_s_fu_1104_p4 <= reg_V_fu_1089_p1(30 downto 23);
    p_Val2_5_fu_893_p1 <= x_assign_4_fu_190;
    p_Val2_6_fu_918_p1 <= x_assign_fu_186;
    p_Val2_8_fu_706_p1 <= reg_465;
    p_Val2_9_fu_731_p1 <= reg_474;

    physMemPtr_V_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, physMemPtr_V_ARREADY, ap_predicate_op134_readreq_state11, ap_block_state11_io, zext_ln544_fu_503_p1, zext_ln544_1_fu_559_p1)
    begin
        if (((ap_predicate_op134_readreq_state11 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            physMemPtr_V_ARADDR <= zext_ln544_1_fu_559_p1(32 - 1 downto 0);
        elsif (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            physMemPtr_V_ARADDR <= zext_ln544_fu_503_p1(32 - 1 downto 0);
        else 
            physMemPtr_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, physMemPtr_V_ARREADY, ap_predicate_op134_readreq_state11, ap_block_state11_io)
    begin
        if (((ap_predicate_op134_readreq_state11 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            physMemPtr_V_ARLEN <= ap_const_lv32_2;
        elsif (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            physMemPtr_V_ARLEN <= ap_const_lv32_1;
        else 
            physMemPtr_V_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, physMemPtr_V_ARREADY, ap_predicate_op134_readreq_state11, ap_block_state11_io)
    begin
        if ((((ap_predicate_op134_readreq_state11 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            physMemPtr_V_ARVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    physMemPtr_V_AWADDR <= zext_ln544_2_fu_1527_p1(32 - 1 downto 0);

    physMemPtr_V_AWVALID_assign_proc : process(ap_CS_fsm_state63, physMemPtr_V_AWREADY)
    begin
        if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            physMemPtr_V_AWVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_BREADY_assign_proc : process(ap_CS_fsm_state70, physMemPtr_V_BVALID, ap_predicate_op439_writeresp_state70, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)) or ((ap_predicate_op439_writeresp_state70 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0)))) and (ap_predicate_op439_writeresp_state70 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            physMemPtr_V_BREADY <= ap_const_logic_1;
        else 
            physMemPtr_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state19, physMemPtr_V_RVALID)
    begin
        if ((((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            physMemPtr_V_RREADY <= ap_const_logic_1;
        else 
            physMemPtr_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_WDATA_assign_proc : process(ap_CS_fsm_state64, ap_CS_fsm_state65, sext_ln214_fu_1548_p1, sext_ln214_1_fu_1552_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            physMemPtr_V_WDATA <= sext_ln214_1_fu_1552_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            physMemPtr_V_WDATA <= sext_ln214_fu_1548_p1;
        else 
            physMemPtr_V_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_WVALID_assign_proc : process(ap_CS_fsm_state64, ap_CS_fsm_state65, physMemPtr_V_WREADY)
    begin
        if ((((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state64)))) then 
            physMemPtr_V_WVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_blk_n_AR_assign_proc : process(m_axi_physMemPtr_V_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state11, icmp_ln761_fu_513_p2, or_ln164_fu_553_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (or_ln164_fu_553_p2 = ap_const_lv1_0) and (icmp_ln761_fu_513_p2 = ap_const_lv1_0)))) then 
            physMemPtr_V_blk_n_AR <= m_axi_physMemPtr_V_ARREADY;
        else 
            physMemPtr_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_AW_assign_proc : process(m_axi_physMemPtr_V_AWREADY, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            physMemPtr_V_blk_n_AW <= m_axi_physMemPtr_V_AWREADY;
        else 
            physMemPtr_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_B_assign_proc : process(m_axi_physMemPtr_V_BVALID, ap_CS_fsm_state70, icmp_ln761_reg_1602, or_ln164_reg_1611)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) and (or_ln164_reg_1611 = ap_const_lv1_0) and (icmp_ln761_reg_1602 = ap_const_lv1_0))) then 
            physMemPtr_V_blk_n_B <= m_axi_physMemPtr_V_BVALID;
        else 
            physMemPtr_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_R_assign_proc : process(m_axi_physMemPtr_V_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            physMemPtr_V_blk_n_R <= m_axi_physMemPtr_V_RVALID;
        else 
            physMemPtr_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_W_assign_proc : process(m_axi_physMemPtr_V_WREADY, ap_CS_fsm_state64, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            physMemPtr_V_blk_n_W <= m_axi_physMemPtr_V_WREADY;
        else 
            physMemPtr_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    r_V_fu_483_p4 <= basePhysAddr_V_0_data_reg(31 downto 2);
    ratio_fu_700_p1 <= p_Result_13_fu_693_p3;
    reg_V_1_fu_1225_p1 <= floatDstR_reg_1841;
    reg_V_fu_1089_p1 <= floatDstL_reg_1835;
    ret_V_1_fu_1436_p2 <= std_logic_vector(unsigned(ap_const_lv31_2) + unsigned(zext_ln215_reg_1581));
    ret_V_fu_497_p2 <= std_logic_vector(unsigned(zext_ln215_fu_493_p1) + unsigned(ap_const_lv31_4));
    select_ln173_fu_585_p3 <= 
        add_ln173_fu_579_p2 when (icmp_ln173_fu_573_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln278_1_fu_1485_p3 <= 
        ap_const_lv24_0 when (icmp_ln278_1_reg_1929(0) = '1') else 
        select_ln295_1_fu_1479_p3;
    select_ln278_fu_1309_p3 <= 
        ap_const_lv24_0 when (icmp_ln278_reg_1862(0) = '1') else 
        select_ln295_fu_1303_p3;
    select_ln282_1_fu_1520_p3 <= 
        tmp_6_reg_1956 when (and_ln282_1_fu_1515_p2(0) = '1') else 
        select_ln285_3_fu_1502_p3;
    select_ln282_fu_1344_p3 <= 
        tmp_2_reg_1883 when (and_ln282_fu_1339_p2(0) = '1') else 
        select_ln285_1_fu_1326_p3;
    select_ln285_1_fu_1326_p3 <= 
        select_ln288_fu_1286_p3 when (and_ln285_1_fu_1321_p2(0) = '1') else 
        select_ln278_fu_1309_p3;
    select_ln285_2_fu_1410_p3 <= 
        lshr_ln286_1_fu_1382_p2 when (and_ln285_2_fu_1404_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln285_3_fu_1502_p3 <= 
        select_ln288_1_fu_1462_p3 when (and_ln285_3_fu_1497_p2(0) = '1') else 
        select_ln278_1_fu_1485_p3;
    select_ln285_fu_1199_p3 <= 
        lshr_ln286_fu_1171_p2 when (and_ln285_fu_1193_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln288_1_fu_1462_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_8_fu_1455_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln288_fu_1286_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_4_fu_1279_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln295_1_fu_1479_p3 <= 
        shl_ln297_1_fu_1474_p2 when (and_ln295_1_reg_1982(0) = '1') else 
        select_ln285_2_reg_1977;
    select_ln295_fu_1303_p3 <= 
        shl_ln297_fu_1298_p2 when (and_ln295_reg_1909(0) = '1') else 
        select_ln285_reg_1904;
    select_ln303_1_fu_1542_p3 <= 
        sub_ln461_1_fu_1537_p2 when (p_Result_17_reg_1919(0) = '1') else 
        select_ln282_1_reg_1997;
    select_ln303_fu_1446_p3 <= 
        sub_ln461_fu_1441_p2 when (p_Result_16_reg_1852(0) = '1') else 
        select_ln282_reg_1950;
        sext_ln214_1_fu_1552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln303_1_reg_2010),32));

        sext_ln214_fu_1548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln303_reg_1992),32));

        sext_ln281_1_fu_1358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_reg_1936),24));

        sext_ln281_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1869),24));

        sext_ln294_1_fu_1452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_3_reg_1967),32));

    sext_ln294_1cast_fu_1470_p1 <= sext_ln294_1_fu_1452_p1(24 - 1 downto 0);
        sext_ln294_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_1894),32));

    sext_ln294cast_fu_1294_p1 <= sext_ln294_fu_1276_p1(24 - 1 downto 0);
    sh_amt_1_fu_1160_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_reg_1869));
    sh_amt_2_fu_1264_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_1_fu_1250_p1));
    sh_amt_3_fu_1371_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_2_reg_1936));
    sh_amt_fu_1128_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_fu_1114_p1));
    shl_ln297_1_fu_1474_p2 <= std_logic_vector(shift_left(unsigned(tmp_6_reg_1956),to_integer(unsigned('0' & sext_ln294_1cast_fu_1470_p1(24-1 downto 0)))));
    shl_ln297_fu_1298_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_reg_1883),to_integer(unsigned('0' & sext_ln294cast_fu_1294_p1(24-1 downto 0)))));
    srcL_V_fu_569_p1 <= physMemPtr_V_RDATA(24 - 1 downto 0);
    srcR_V_fu_594_p1 <= physMemPtr_V_RDATA(24 - 1 downto 0);
    stageIndex_V_fu_620_p2 <= std_logic_vector(unsigned(t_V_reg_340) + unsigned(ap_const_lv3_1));
    sub_ln461_1_fu_1537_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(select_ln282_1_reg_1997));
    sub_ln461_fu_1441_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(select_ln282_reg_1950));
    thresh_fu_887_p1 <= p_Result_10_fu_880_p3;
    tmp_11_fu_971_p4 <= p_Val2_6_fu_918_p1(30 downto 23);
    tmp_15_fu_756_p4 <= p_Val2_8_fu_706_p1(30 downto 23);
    tmp_17_fu_778_p4 <= p_Val2_9_fu_731_p1(30 downto 23);
    tmp_2_fu_1140_p3 <= (ap_const_lv1_1 & trunc_ln270_reg_1857);
    tmp_3_fu_644_p3 <= (ap_const_lv58_0 & or_ln44_fu_639_p2);
    tmp_4_fu_1279_p3 <= reg_V_reg_1847(31 downto 31);
    tmp_5_fu_626_p3 <= (t_V_reg_340 & ap_const_lv3_0);
    tmp_6_fu_1351_p3 <= (ap_const_lv1_1 & trunc_ln270_1_reg_1924);
    tmp_7_fu_658_p3 <= (ap_const_lv58_0 & or_ln58_fu_653_p2);
    tmp_8_fu_1455_p3 <= reg_V_1_reg_1914(31 downto 31);
    tmp_9_fu_943_p4 <= p_Val2_5_fu_893_p1(30 downto 23);
    tmp_s_fu_852_p4 <= configReg_q0(30 downto 23);
    trunc_ln189_fu_667_p1 <= configReg_q0(4 - 1 downto 0);
    trunc_ln257_1_fu_901_p1 <= p_Val2_5_fu_893_p1(23 - 1 downto 0);
    trunc_ln257_2_fu_926_p1 <= p_Val2_6_fu_918_p1(23 - 1 downto 0);
    trunc_ln257_fu_848_p1 <= configReg_q0(23 - 1 downto 0);
    trunc_ln262_1_fu_1228_p1 <= reg_V_1_fu_1225_p1(31 - 1 downto 0);
    trunc_ln262_fu_1092_p1 <= reg_V_fu_1089_p1(31 - 1 downto 0);
    trunc_ln270_1_fu_1254_p1 <= reg_V_1_fu_1225_p1(23 - 1 downto 0);
    trunc_ln270_fu_1118_p1 <= reg_V_fu_1089_p1(23 - 1 downto 0);
    trunc_ln368_1_fu_897_p1 <= p_Val2_5_fu_893_p1(31 - 1 downto 0);
    trunc_ln368_2_fu_922_p1 <= p_Val2_6_fu_918_p1(31 - 1 downto 0);
    trunc_ln368_3_fu_689_p1 <= configReg_q0(31 - 1 downto 0);
    trunc_ln368_4_fu_710_p1 <= p_Val2_8_fu_706_p1(31 - 1 downto 0);
    trunc_ln368_5_fu_735_p1 <= p_Val2_9_fu_731_p1(31 - 1 downto 0);
    trunc_ln368_fu_844_p1 <= configReg_q0(31 - 1 downto 0);
    trunc_ln63_fu_714_p1 <= p_Val2_8_fu_706_p1(23 - 1 downto 0);
    trunc_ln64_fu_739_p1 <= p_Val2_9_fu_731_p1(23 - 1 downto 0);
    xor_ln159_fu_531_p2 <= (lrclk_V_0_data_reg xor ap_const_lv1_1);
    xor_ln164_1_fu_547_p2 <= (or_ln159_fu_526_p2 xor ap_const_lv1_1);
    xor_ln164_fu_536_p2 <= (readyLch xor ap_const_lv1_1);
    xor_ln278_1_fu_1510_p2 <= (icmp_ln278_1_reg_1929 xor ap_const_lv1_1);
    xor_ln278_fu_1334_p2 <= (icmp_ln278_reg_1862 xor ap_const_lv1_1);
    xor_ln282_1_fu_1392_p2 <= (or_ln282_1_fu_1388_p2 xor ap_const_lv1_1);
    xor_ln282_fu_1181_p2 <= (or_ln282_fu_1177_p2 xor ap_const_lv1_1);
    xor_ln284_1_fu_1424_p2 <= (or_ln284_1_fu_1418_p2 xor ap_const_lv1_1);
    xor_ln284_fu_1213_p2 <= (or_ln284_fu_1207_p2 xor ap_const_lv1_1);
    xor_ln285_1_fu_1492_p2 <= (icmp_ln285_1_reg_1962 xor ap_const_lv1_1);
    xor_ln285_fu_1316_p2 <= (icmp_ln285_reg_1889 xor ap_const_lv1_1);
    xor_ln51_fu_1038_p2 <= (bitcast_ln51_fu_1035_p1 xor ap_const_lv32_80000000);
    xor_ln52_fu_1062_p2 <= (bitcast_ln52_fu_1059_p1 xor ap_const_lv32_80000000);
    zext_ln189_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_626_p3),64));
    zext_ln215_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_483_p4),31));
    zext_ln544_1_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_1576),64));
    zext_ln544_2_fu_1527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_reg_1987),64));
    zext_ln544_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_1586),64));
end behav;
