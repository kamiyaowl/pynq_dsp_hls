-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynq_dsp_hls is
generic (
    C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    lrclk_V : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_physMemPtr_V_AWVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_AWREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_physMemPtr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_WREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH/8-1 downto 0);
    m_axi_physMemPtr_V_WLAST : OUT STD_LOGIC;
    m_axi_physMemPtr_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_ARREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_physMemPtr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RVALID : IN STD_LOGIC;
    m_axi_physMemPtr_V_RREADY : OUT STD_LOGIC;
    m_axi_physMemPtr_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RLAST : IN STD_LOGIC;
    m_axi_physMemPtr_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_BVALID : IN STD_LOGIC;
    m_axi_physMemPtr_V_BREADY : OUT STD_LOGIC;
    m_axi_physMemPtr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pynq_dsp_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pynq_dsp_hls,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=29,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=6,HLS_SYN_FF=4256,HLS_SYN_LUT=9550,HLS_VERSION=2019_1_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (57 downto 0) := "0000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (57 downto 0) := "0000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (57 downto 0) := "0000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (57 downto 0) := "0000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (57 downto 0) := "0000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (57 downto 0) := "0000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (57 downto 0) := "0001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (57 downto 0) := "0010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (57 downto 0) := "0100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (57 downto 0) := "1000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_34000000 : STD_LOGIC_VECTOR (31 downto 0) := "00110100000000000000000000000000";
    constant ap_const_lv32_4B000000 : STD_LOGIC_VECTOR (31 downto 0) := "01001011000000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv31_4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_FF000000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_17 : STD_LOGIC_VECTOR (11 downto 0) := "000000010111";
    constant ap_const_lv12_FE9 : STD_LOGIC_VECTOR (11 downto 0) := "111111101001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_9 : STD_LOGIC_VECTOR (11 downto 0) := "000000001001";
    constant ap_const_lv12_A : STD_LOGIC_VECTOR (11 downto 0) := "000000001010";
    constant ap_const_lv12_FE8 : STD_LOGIC_VECTOR (11 downto 0) := "111111101000";
    constant ap_const_lv54_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (53 downto 0) := "111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal lrclk_V_0_data_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal lrclk_V_0_vld_reg : STD_LOGIC := '0';
    signal lrclk_V_0_ack_out : STD_LOGIC;
    signal basePhysAddr_V : STD_LOGIC_VECTOR (31 downto 0);
    signal configReg_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_ce0 : STD_LOGIC;
    signal configReg_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readyRch : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal readyLch : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal physMemPtr_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal physMemPtr_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln761_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal physMemPtr_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal physMemPtr_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal physMemPtr_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal icmp_ln761_reg_3161 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_reg_3170 : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_AWVALID : STD_LOGIC;
    signal physMemPtr_V_AWREADY : STD_LOGIC;
    signal physMemPtr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_WVALID : STD_LOGIC;
    signal physMemPtr_V_WREADY : STD_LOGIC;
    signal physMemPtr_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_ARVALID : STD_LOGIC;
    signal physMemPtr_V_ARREADY : STD_LOGIC;
    signal physMemPtr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_RVALID : STD_LOGIC;
    signal physMemPtr_V_RREADY : STD_LOGIC;
    signal physMemPtr_V_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_RLAST : STD_LOGIC;
    signal physMemPtr_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal physMemPtr_V_BVALID : STD_LOGIC;
    signal physMemPtr_V_BREADY : STD_LOGIC;
    signal physMemPtr_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal physMemPtr_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal icmp_ln935_reg_3756 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal icmp_ln935_1_reg_3807 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_400_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_3_reg_3127 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln215_fu_410_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln215_reg_3132 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_fu_414_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_reg_3137 : STD_LOGIC_VECTOR (30 downto 0);
    signal status_V_reg_3156 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op101_readreq_state10 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal xor_ln102_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lsignExt_V_2_reg_3192 : STD_LOGIC_VECTOR (31 downto 0);
    signal rsignExt_V_2_reg_3199 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsignExt_V_1_fu_498_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsignExt_V_1_reg_3206 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal rsignExt_V_1_fu_517_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rsignExt_V_1_reg_3211 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_3216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_3221 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rsrcf_reg_3226 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln556_fu_528_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln556_reg_3232 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal p_Result_23_reg_3237 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_reg_3246 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_550_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_3251 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln556_1_fu_558_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln556_1_reg_3256 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_27_reg_3261 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_1_reg_3270 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_1_fu_580_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_1_reg_3275 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln461_fu_584_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln461_reg_3280 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal p_Val2_27_fu_604_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Val2_27_reg_3285 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln571_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_3294 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_616_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_3302 : STD_LOGIC_VECTOR (11 downto 0);
    signal QUAN_INC_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal QUAN_INC_reg_3311 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_640_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_3317 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln583_fu_648_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln583_reg_3323 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln603_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_reg_3329 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_reg_3335 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln461_1_fu_674_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln461_1_reg_3340 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_28_fu_694_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Val2_28_reg_3345 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln571_1_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_1_reg_3354 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_1_fu_706_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_1_reg_3362 : STD_LOGIC_VECTOR (11 downto 0);
    signal QUAN_INC_1_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal QUAN_INC_1_reg_3371 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1_fu_730_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_reg_3377 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln583_1_fu_738_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln583_1_reg_3383 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln603_1_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_1_reg_3389 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_1_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_1_reg_3395 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581_fu_769_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln581_reg_3400 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal p_Val2_9_fu_810_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_reg_3405 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_25_reg_3410 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_16_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_16_reg_3416 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos1_fu_845_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pos1_reg_3422 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_reg_3429 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_3435 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln631_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln631_reg_3440 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln635_fu_881_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln635_reg_3447 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range2_V_1_fu_885_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range2_V_1_reg_3452 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln642_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln642_reg_3458 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581_1_fu_901_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln581_1_reg_3463 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_18_fu_941_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_18_reg_3468 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_29_reg_3473 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_reg_3479 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos1_1_fu_976_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pos1_1_reg_3485 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_reg_3492 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_3498 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln631_1_fu_1006_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln631_1_reg_3503 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln635_1_fu_1012_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln635_1_reg_3510 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range2_V_3_fu_1016_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range2_V_3_reg_3515 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln642_1_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln642_1_reg_3521 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln403_1_fu_1119_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln403_1_reg_3526 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal and_ln603_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_reg_3531 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_2_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_2_reg_3536 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln621_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln621_reg_3542 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln621_2_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln621_2_reg_3549 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_reg_3556 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln631_fu_1218_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln631_reg_3563 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln641_fu_1226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln641_reg_3569 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_fu_1231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_reg_3574 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln642_fu_1246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln642_reg_3579 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln652_4_fu_1263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln652_4_reg_3585 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln403_3_fu_1361_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln403_3_reg_3591 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln603_3_fu_1374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_3_reg_3596 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_5_fu_1396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_5_reg_3601 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln621_1_fu_1405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln621_1_reg_3607 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln621_3_fu_1410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln621_3_reg_3614 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_3_fu_1434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_3_reg_3621 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln631_1_fu_1460_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln631_1_reg_3628 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln641_1_fu_1468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln641_1_reg_3634 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_3_fu_1473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_3_reg_3639 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln642_1_fu_1488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln642_1_reg_3644 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln652_5_fu_1505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln652_5_reg_3650 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_14_fu_1515_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_14_reg_3656 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal select_ln557_fu_1659_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln557_reg_3663 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_reg_3669 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln659_fu_1695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln659_reg_3675 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_20_fu_1705_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_20_reg_3681 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln557_1_fu_1849_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln557_1_reg_3688 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_1879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_reg_3694 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln659_2_fu_1885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln659_2_reg_3700 : STD_LOGIC_VECTOR (0 downto 0);
    signal currentData_lch_V_fu_1974_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal currentData_lch_V_reg_3706 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal currentData_rch_V_fu_2066_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal currentData_rch_V_reg_3711 : STD_LOGIC_VECTOR (31 downto 0);
    signal stageIndex_V_fu_2081_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal stageIndex_V_reg_3719 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln887_fu_2075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_31_reg_3735 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_2111_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_reg_3741 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln132_fu_2117_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln132_reg_3746 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal icmp_ln935_fu_2124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_2129_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_4_reg_3761 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_fu_2152_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_3769 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln947_fu_2158_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln947_reg_3776 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln943_fu_2162_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_3781 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_34_reg_3786 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_2_fu_2174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_2_reg_3792 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_2266_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_3797 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal icmp_ln958_fu_2274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_3802 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_1_fu_2280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_5_fu_2285_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_5_reg_3812 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_1_fu_2308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_1_reg_3820 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln947_1_fu_2314_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln947_1_reg_3827 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln943_1_fu_2318_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_1_reg_3832 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_3837 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_32_reg_3842 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_1_fu_2458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_1_reg_3847 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_1_fu_2466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_1_reg_3852 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_33_fu_2500_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_33_reg_3857 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal m_s_reg_3862 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_36_reg_3867 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln739_fu_2562_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal p_Result_36_fu_2594_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_36_reg_3877 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_1_fu_2606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal reg_V_fu_2614_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_reg_3887 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_37_reg_3892 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_fu_2647_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln270_reg_3897 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln278_fu_2651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_3902 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_2_fu_2657_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_2_reg_3909 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln282_fu_2663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_reg_3917 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_2669_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_reg_3923 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal icmp_ln285_fu_2684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_3928 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_3_fu_2689_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_3_reg_3933 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_fu_2744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_reg_3938 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_2756_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_reg_3943 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_fu_2776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_reg_3948 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_V_1_fu_2786_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_1_reg_3953 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_38_reg_3958 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_1_fu_2819_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln270_1_reg_3963 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln278_1_fu_2823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_1_reg_3968 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_4_fu_2829_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_4_reg_3975 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln282_1_fu_2835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_1_reg_3983 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_1_fu_2895_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln285_1_reg_3989 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_9_fu_2903_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_reg_3995 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln285_1_fu_2918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_1_reg_4000 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_5_fu_2923_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_5_reg_4005 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_1_fu_2978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_1_reg_4010 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_2_fu_2990_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_2_reg_4015 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_1_fu_3010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_1_reg_4020 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_3_fu_3016_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_3_reg_4025 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln303_fu_3026_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln303_reg_4030 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln285_3_fu_3086_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln285_3_reg_4035 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln303_1_fu_3109_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln303_1_reg_4048 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_reg_309 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_phi_mux_readyRch_flag_1_phi_fu_324_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyRch_flag_1_reg_320 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op619_writeresp_state58 : BOOLEAN;
    signal ap_block_state58 : BOOLEAN;
    signal ap_phi_mux_readyRch_new_1_phi_fu_339_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyRch_new_1_reg_334 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_readyLch_flag_1_phi_fu_354_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyLch_flag_1_reg_350 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln129_fu_2095_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_3094_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_364_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal xor_ln107_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln102_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_1_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_486_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_4_fu_493_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_505_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_5_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_1_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_587_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_24_fu_594_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_598_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal add_ln581_fu_628_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_634_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_652_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_677_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_28_fu_684_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_4_fu_688_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal add_ln581_1_fu_718_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_1_fu_724_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_fu_742_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln586_fu_777_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_781_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_794_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_fu_786_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln588_fu_802_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp185_cast_cast_fu_826_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_V_fu_764_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_15_fu_833_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pos2_fu_850_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln619_fu_855_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_1_fu_909_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_1_fu_913_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_2_fu_922_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_925_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_1_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_1_fu_918_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln588_1_fu_933_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp190_cast_cast_fu_957_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_V_1_fu_896_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_18_fu_964_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pos2_1_fu_981_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln619_1_fu_986_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln591_fu_1032_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln591_fu_1037_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_1041_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_fu_1048_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_1054_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_13_fu_1058_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_1063_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln578_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln403_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln582_fu_1077_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln403_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln403_1_fu_1113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln403_fu_1100_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln578_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_1_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln403_2_fu_1137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln603_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln618_fu_1160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln623_fu_1173_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln623_fu_1177_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal lD_fu_1182_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln621_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln631_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_1208_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal and_ln631_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_1213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln639_2_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln639_fu_1241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln652_4_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln652_6_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln591_1_fu_1274_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln591_1_fu_1279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_1283_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_1_fu_1290_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_1_fu_1296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_19_fu_1300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_1305_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_1_fu_1269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_1_fu_1326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln578_1_fu_1332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln403_3_fu_1337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln582_1_fu_1319_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln403_1_fu_1350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln403_4_fu_1355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln403_2_fu_1342_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln578_2_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_1_fu_1313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_4_fu_1385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln403_5_fu_1379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln603_1_fu_1390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln618_1_fu_1402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln623_1_fu_1415_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln623_1_fu_1419_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal lD_1_fu_1424_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln621_4_fu_1428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln631_1_fu_1440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_1450_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal and_ln631_1_fu_1445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_fu_1455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln639_fu_1478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln639_1_fu_1483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln652_5_fu_1493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln652_7_fu_1499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_1511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Range1_all_zeros_fu_1537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln639_fu_1529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_1533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln642_fu_1551_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln645_fu_1547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln641_fu_1542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln642_1_fu_1564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln639_fu_1556_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln639_1_fu_1571_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln652_1_fu_1586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_1601_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln652_fu_1591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln652_fu_1596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln652_1_fu_1608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln654_fu_1622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_1614_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln621_fu_1633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_26_fu_1521_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln621_2_fu_1644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln557_fu_1655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_fu_1627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln621_3_fu_1650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_1579_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln658_2_fu_1667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln658_fu_1673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln658_fu_1678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln658_1_fu_1684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln557_fu_1638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_1_fu_1701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Range1_all_zeros_2_fu_1727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln639_1_fu_1719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_2_fu_1723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln642_2_fu_1741_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln645_1_fu_1737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln641_1_fu_1732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln642_3_fu_1754_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln639_2_fu_1746_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln639_3_fu_1761_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln652_3_fu_1776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_1791_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln652_2_fu_1781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln652_1_fu_1786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln652_3_fu_1798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln654_1_fu_1812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_1_fu_1804_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln621_1_fu_1823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_30_fu_1711_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln621_6_fu_1834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln557_1_fu_1845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_fu_1817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln621_7_fu_1840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_fu_1769_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln658_fu_1857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln658_2_fu_1863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln658_1_fu_1868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln658_3_fu_1874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln557_1_fu_1828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln659_fu_1891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_1906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_1911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_1901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_1935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_fu_1928_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp57_demorgan_fu_1947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_1_fu_1940_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln340_3_fu_1916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_1958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln340_fu_1963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln340_1_fu_1969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_1921_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp58_fu_1951_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln659_1_fu_1983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_1988_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_1998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_2003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_1993_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_1_fu_2027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_2_fu_2020_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp122_demorgan_fu_2039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_3_fu_2032_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln340_5_fu_2008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_1_fu_2050_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln340_2_fu_2055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln340_3_fu_2061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_2013_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp123_fu_2043_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_2087_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_32_fu_2134_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_2144_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_2180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_2185_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln947_fu_2201_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_fu_2206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_fu_2210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_12_fu_2216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln947_fu_2195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_2221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_2233_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_2247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_2241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_2254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_2227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_2_fu_2260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_35_fu_2290_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_1_fu_2300_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_fu_2322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_2332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_2327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_fu_2337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_2_fu_2342_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_3_fu_2349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_1_fu_2372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_2377_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln947_1_fu_2393_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_1_fu_2398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_1_fu_2402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_18_fu_2408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln947_2_fu_2387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_3_fu_2413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_2425_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_2439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_1_fu_2433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_1_fu_2446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_1_fu_2419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_2452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_fu_2482_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_fu_2475_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_2487_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_11_fu_2472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_2493_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln958_1_fu_2512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_1_fu_2522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_1_fu_2517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_1_fu_2527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_7_fu_2532_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_8_fu_2539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln964_1_fu_2576_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_1_fu_2569_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_1_fu_2581_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_12_fu_2566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_2587_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln705_fu_2610_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_22_fu_2633_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln262_fu_2621_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_2_fu_2643_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_38_fu_2694_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln281_fu_2676_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln278_fu_2716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_2721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln282_fu_2734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_2679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_2738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_2750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_fu_2710_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_fu_2726_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_fu_2764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_fu_2704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_2770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln705_1_fu_2782_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_2805_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln262_1_fu_2793_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_3_fu_2815_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_39_fu_2847_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln283_fu_2841_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_fu_2844_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln297_fu_2862_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln285_fu_2868_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln295_fu_2871_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln285_fu_2885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_1_fu_2890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_2854_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln278_fu_2878_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_2928_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln281_1_fu_2910_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln278_1_fu_2950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_1_fu_2955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln282_1_fu_2968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_fu_2913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_1_fu_2972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_2_fu_2984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_1_fu_2944_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_1_fu_2960_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_1_fu_2998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_1_fu_2938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_1_fu_3004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln461_fu_3021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_3038_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln283_1_fu_3032_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_1_fu_3035_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln297_1_fu_3053_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln285_1_fu_3059_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln295_1_fu_3062_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln285_1_fu_3076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_3_fu_3081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_1_fu_3045_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln278_1_fu_3069_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln461_1_fu_3104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (57 downto 0);

    component pynq_dsp_hls_fmulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_sitocud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fpexdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pynq_dsp_hls_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        basePhysAddr_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        configReg_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        configReg_ce0 : IN STD_LOGIC;
        configReg_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component pynq_dsp_hls_physMemPtr_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    pynq_dsp_hls_AXILiteS_s_axi_U : component pynq_dsp_hls_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        basePhysAddr_V => basePhysAddr_V,
        configReg_address0 => configReg_address0,
        configReg_ce0 => configReg_ce0,
        configReg_q0 => configReg_q0);

    pynq_dsp_hls_physMemPtr_V_m_axi_U : component pynq_dsp_hls_physMemPtr_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PHYSMEMPTR_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_PHYSMEMPTR_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_PHYSMEMPTR_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PHYSMEMPTR_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PHYSMEMPTR_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_physMemPtr_V_AWVALID,
        AWREADY => m_axi_physMemPtr_V_AWREADY,
        AWADDR => m_axi_physMemPtr_V_AWADDR,
        AWID => m_axi_physMemPtr_V_AWID,
        AWLEN => m_axi_physMemPtr_V_AWLEN,
        AWSIZE => m_axi_physMemPtr_V_AWSIZE,
        AWBURST => m_axi_physMemPtr_V_AWBURST,
        AWLOCK => m_axi_physMemPtr_V_AWLOCK,
        AWCACHE => m_axi_physMemPtr_V_AWCACHE,
        AWPROT => m_axi_physMemPtr_V_AWPROT,
        AWQOS => m_axi_physMemPtr_V_AWQOS,
        AWREGION => m_axi_physMemPtr_V_AWREGION,
        AWUSER => m_axi_physMemPtr_V_AWUSER,
        WVALID => m_axi_physMemPtr_V_WVALID,
        WREADY => m_axi_physMemPtr_V_WREADY,
        WDATA => m_axi_physMemPtr_V_WDATA,
        WSTRB => m_axi_physMemPtr_V_WSTRB,
        WLAST => m_axi_physMemPtr_V_WLAST,
        WID => m_axi_physMemPtr_V_WID,
        WUSER => m_axi_physMemPtr_V_WUSER,
        ARVALID => m_axi_physMemPtr_V_ARVALID,
        ARREADY => m_axi_physMemPtr_V_ARREADY,
        ARADDR => m_axi_physMemPtr_V_ARADDR,
        ARID => m_axi_physMemPtr_V_ARID,
        ARLEN => m_axi_physMemPtr_V_ARLEN,
        ARSIZE => m_axi_physMemPtr_V_ARSIZE,
        ARBURST => m_axi_physMemPtr_V_ARBURST,
        ARLOCK => m_axi_physMemPtr_V_ARLOCK,
        ARCACHE => m_axi_physMemPtr_V_ARCACHE,
        ARPROT => m_axi_physMemPtr_V_ARPROT,
        ARQOS => m_axi_physMemPtr_V_ARQOS,
        ARREGION => m_axi_physMemPtr_V_ARREGION,
        ARUSER => m_axi_physMemPtr_V_ARUSER,
        RVALID => m_axi_physMemPtr_V_RVALID,
        RREADY => m_axi_physMemPtr_V_RREADY,
        RDATA => m_axi_physMemPtr_V_RDATA,
        RLAST => m_axi_physMemPtr_V_RLAST,
        RID => m_axi_physMemPtr_V_RID,
        RUSER => m_axi_physMemPtr_V_RUSER,
        RRESP => m_axi_physMemPtr_V_RRESP,
        BVALID => m_axi_physMemPtr_V_BVALID,
        BREADY => m_axi_physMemPtr_V_BREADY,
        BRESP => m_axi_physMemPtr_V_BRESP,
        BID => m_axi_physMemPtr_V_BID,
        BUSER => m_axi_physMemPtr_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => physMemPtr_V_ARVALID,
        I_ARREADY => physMemPtr_V_ARREADY,
        I_ARADDR => physMemPtr_V_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => physMemPtr_V_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => physMemPtr_V_RVALID,
        I_RREADY => physMemPtr_V_RREADY,
        I_RDATA => physMemPtr_V_RDATA,
        I_RID => physMemPtr_V_RID,
        I_RUSER => physMemPtr_V_RUSER,
        I_RRESP => physMemPtr_V_RRESP,
        I_RLAST => physMemPtr_V_RLAST,
        I_AWVALID => physMemPtr_V_AWVALID,
        I_AWREADY => physMemPtr_V_AWREADY,
        I_AWADDR => physMemPtr_V_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_2,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => physMemPtr_V_WVALID,
        I_WREADY => physMemPtr_V_WREADY,
        I_WDATA => physMemPtr_V_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => physMemPtr_V_BVALID,
        I_BREADY => physMemPtr_V_BREADY,
        I_BRESP => physMemPtr_V_BRESP,
        I_BID => physMemPtr_V_BID,
        I_BUSER => physMemPtr_V_BUSER);

    pynq_dsp_hls_fmulbkb_U1 : component pynq_dsp_hls_fmulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_364_p0,
        din1 => grp_fu_364_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_364_p2);

    pynq_dsp_hls_fmulbkb_U2 : component pynq_dsp_hls_fmulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_1_reg_3221,
        din1 => ap_const_lv32_34000000,
        ce => ap_const_logic_1,
        dout => grp_fu_369_p2);

    pynq_dsp_hls_sitocud_U3 : component pynq_dsp_hls_sitocud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => lsignExt_V_1_reg_3206,
        ce => ap_const_logic_1,
        dout => grp_fu_375_p1);

    pynq_dsp_hls_sitocud_U4 : component pynq_dsp_hls_sitocud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => rsignExt_V_1_reg_3211,
        ce => ap_const_logic_1,
        dout => grp_fu_378_p1);

    pynq_dsp_hls_fpexdEe_U5 : component pynq_dsp_hls_fpexdEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_395,
        ce => ap_const_logic_1,
        dout => grp_fu_381_p1);

    pynq_dsp_hls_fpexdEe_U6 : component pynq_dsp_hls_fpexdEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => rsrcf_reg_3226,
        ce => ap_const_logic_1,
        dout => grp_fu_384_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    lrclk_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    p_Val2_1_fu_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state39) and ((trunc_ln132_reg_3746 = ap_const_lv4_2) or ((trunc_ln132_reg_3746 = ap_const_lv4_3) or ((trunc_ln132_reg_3746 = ap_const_lv4_4) or ((trunc_ln132_reg_3746 = ap_const_lv4_5) or ((trunc_ln132_reg_3746 = ap_const_lv4_6) or ((trunc_ln132_reg_3746 = ap_const_lv4_7) or ((trunc_ln132_reg_3746 = ap_const_lv4_8) or (trunc_ln132_reg_3746 = ap_const_lv4_9))))))))) or ((trunc_ln132_fu_2117_p1 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
                p_Val2_1_fu_232 <= currentData_rch_V_reg_3711;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                p_Val2_1_fu_232 <= currentData_rch_V_fu_2066_p3;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state39) and ((trunc_ln132_reg_3746 = ap_const_lv4_2) or ((trunc_ln132_reg_3746 = ap_const_lv4_3) or ((trunc_ln132_reg_3746 = ap_const_lv4_4) or ((trunc_ln132_reg_3746 = ap_const_lv4_5) or ((trunc_ln132_reg_3746 = ap_const_lv4_6) or ((trunc_ln132_reg_3746 = ap_const_lv4_7) or ((trunc_ln132_reg_3746 = ap_const_lv4_8) or (trunc_ln132_reg_3746 = ap_const_lv4_9))))))))) or ((trunc_ln132_fu_2117_p1 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
                p_Val2_s_fu_228 <= currentData_lch_V_reg_3706;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                p_Val2_s_fu_228 <= currentData_lch_V_fu_1974_p3;
            end if; 
        end if;
    end process;

    readyLch_flag_1_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln107_fu_470_p2 = ap_const_lv1_1) and (icmp_ln761_fu_430_p2 = ap_const_lv1_0))) then 
                readyLch_flag_1_reg_350 <= xor_ln102_fu_448_p2;
            elsif ((not(((ap_predicate_op619_writeresp_state58 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58) and (or_ln107_reg_3170 = ap_const_lv1_0) and (icmp_ln761_reg_3161 = ap_const_lv1_0))) then 
                readyLch_flag_1_reg_350 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln761_fu_430_p2 = ap_const_lv1_1))) then 
                readyLch_flag_1_reg_350 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    readyRch_flag_1_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln107_fu_470_p2 = ap_const_lv1_1) and (icmp_ln761_fu_430_p2 = ap_const_lv1_0))) then 
                readyRch_flag_1_reg_320 <= lrclk_V_0_data_reg;
            elsif ((not(((ap_predicate_op619_writeresp_state58 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58) and (or_ln107_reg_3170 = ap_const_lv1_0) and (icmp_ln761_reg_3161 = ap_const_lv1_0))) then 
                readyRch_flag_1_reg_320 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln761_fu_430_p2 = ap_const_lv1_1))) then 
                readyRch_flag_1_reg_320 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    readyRch_new_1_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln107_fu_470_p2 = ap_const_lv1_1) and (icmp_ln761_fu_430_p2 = ap_const_lv1_0))) then 
                readyRch_new_1_reg_334 <= ap_const_lv1_1;
            elsif ((not(((ap_predicate_op619_writeresp_state58 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58) and (or_ln107_reg_3170 = ap_const_lv1_0) and (icmp_ln761_reg_3161 = ap_const_lv1_0))) then 
                readyRch_new_1_reg_334 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    t_V_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                t_V_reg_309 <= stageIndex_V_reg_3719;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                t_V_reg_309 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                F2_1_reg_3362 <= F2_1_fu_706_p2;
                F2_reg_3302 <= F2_fu_616_p2;
                QUAN_INC_1_reg_3371 <= QUAN_INC_1_fu_712_p2;
                QUAN_INC_reg_3311 <= QUAN_INC_fu_622_p2;
                icmp_ln571_1_reg_3354 <= icmp_ln571_1_fu_701_p2;
                icmp_ln571_reg_3294 <= icmp_ln571_fu_611_p2;
                icmp_ln591_1_reg_3395 <= icmp_ln591_1_fu_758_p2;
                icmp_ln591_reg_3335 <= icmp_ln591_fu_668_p2;
                icmp_ln603_1_reg_3389 <= icmp_ln603_1_fu_752_p2;
                icmp_ln603_reg_3329 <= icmp_ln603_fu_662_p2;
                p_Val2_27_reg_3285 <= p_Val2_27_fu_604_p3;
                p_Val2_28_reg_3345 <= p_Val2_28_fu_694_p3;
                sh_amt_1_reg_3377 <= sh_amt_1_fu_730_p3;
                sh_amt_reg_3317 <= sh_amt_fu_640_p3;
                trunc_ln583_1_reg_3383 <= trunc_ln583_1_fu_738_p1;
                trunc_ln583_reg_3323 <= trunc_ln583_fu_648_p1;
                    zext_ln461_1_reg_3340(10 downto 0) <= zext_ln461_1_fu_674_p1(10 downto 0);
                    zext_ln461_reg_3280(10 downto 0) <= zext_ln461_fu_584_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                Range1_all_ones_1_reg_3556 <= Range1_all_ones_1_fu_1192_p2;
                Range1_all_ones_3_reg_3621 <= Range1_all_ones_3_fu_1434_p2;
                Range1_all_zeros_1_reg_3574 <= Range1_all_zeros_1_fu_1231_p2;
                Range1_all_zeros_3_reg_3639 <= Range1_all_zeros_3_fu_1473_p2;
                and_ln603_2_reg_3536 <= and_ln603_2_fu_1154_p2;
                and_ln603_3_reg_3596 <= and_ln603_3_fu_1374_p2;
                and_ln603_5_reg_3601 <= and_ln603_5_fu_1396_p2;
                and_ln603_reg_3531 <= and_ln603_fu_1132_p2;
                and_ln642_1_reg_3644 <= and_ln642_1_fu_1488_p2;
                and_ln642_reg_3579 <= and_ln642_fu_1246_p2;
                icmp_ln621_1_reg_3607 <= icmp_ln621_1_fu_1405_p2;
                icmp_ln621_reg_3542 <= icmp_ln621_fu_1163_p2;
                icmp_ln641_1_reg_3634 <= icmp_ln641_1_fu_1468_p2;
                icmp_ln641_reg_3569 <= icmp_ln641_fu_1226_p2;
                or_ln652_4_reg_3585 <= or_ln652_4_fu_1263_p2;
                or_ln652_5_reg_3650 <= or_ln652_5_fu_1505_p2;
                select_ln403_1_reg_3526 <= select_ln403_1_fu_1119_p3;
                select_ln403_3_reg_3591 <= select_ln403_3_fu_1361_p3;
                select_ln631_1_reg_3628 <= select_ln631_1_fu_1460_p3;
                select_ln631_reg_3563 <= select_ln631_fu_1218_p3;
                xor_ln621_2_reg_3549 <= xor_ln621_2_fu_1168_p2;
                xor_ln621_3_reg_3614 <= xor_ln621_3_fu_1410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                Range2_V_1_reg_3452 <= Range2_V_1_fu_885_p2;
                Range2_V_3_reg_3515 <= Range2_V_3_fu_1016_p2;
                empty_16_reg_3416 <= empty_16_fu_839_p2;
                empty_19_reg_3479 <= empty_19_fu_970_p2;
                icmp_ln631_1_reg_3503 <= icmp_ln631_1_fu_1006_p2;
                icmp_ln631_reg_3440 <= icmp_ln631_fu_875_p2;
                icmp_ln642_1_reg_3521 <= icmp_ln642_1_fu_1021_p2;
                icmp_ln642_reg_3458 <= icmp_ln642_fu_890_p2;
                p_Result_25_reg_3410 <= p_Val2_9_fu_810_p3(31 downto 31);
                p_Result_29_reg_3473 <= p_Val2_18_fu_941_p3(31 downto 31);
                p_Val2_18_reg_3468 <= p_Val2_18_fu_941_p3;
                p_Val2_9_reg_3405 <= p_Val2_9_fu_810_p3;
                pos1_1_reg_3485 <= pos1_1_fu_976_p2;
                pos1_reg_3422 <= pos1_fu_845_p2;
                sext_ln581_1_reg_3463 <= sext_ln581_1_fu_901_p1;
                sext_ln581_reg_3400 <= sext_ln581_fu_769_p1;
                tmp_17_reg_3429 <= pos1_fu_845_p2(11 downto 11);
                tmp_18_reg_3435 <= pos2_fu_850_p2(11 downto 11);
                tmp_26_reg_3492 <= pos1_1_fu_976_p2(11 downto 11);
                tmp_27_reg_3498 <= pos2_1_fu_981_p2(11 downto 11);
                    zext_ln635_1_reg_3510(31 downto 0) <= zext_ln635_1_fu_1012_p1(31 downto 0);
                    zext_ln635_reg_3447(31 downto 0) <= zext_ln635_fu_881_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                and_ln284_1_reg_4010 <= and_ln284_1_fu_2978_p2;
                icmp_ln285_1_reg_4000 <= icmp_ln285_1_fu_2918_p2;
                ret_V_3_reg_4025 <= ret_V_3_fu_3016_p2;
                select_ln285_1_reg_3989 <= select_ln285_1_fu_2895_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                and_ln284_reg_3938 <= and_ln284_fu_2744_p2;
                icmp_ln278_1_reg_3968 <= icmp_ln278_1_fu_2823_p2;
                icmp_ln282_1_reg_3983 <= icmp_ln282_1_fu_2835_p2;
                icmp_ln285_reg_3928 <= icmp_ln285_fu_2684_p2;
                p_Result_38_reg_3958 <= reg_V_1_fu_2786_p3(31 downto 31);
                reg_V_1_reg_3953 <= reg_V_1_fu_2786_p3;
                sh_amt_4_reg_3975 <= sh_amt_4_fu_2829_p2;
                trunc_ln270_1_reg_3963 <= trunc_ln270_1_fu_2819_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state50) and (icmp_ln278_1_reg_3968 = ap_const_lv1_0))) then
                and_ln295_1_reg_4020 <= and_ln295_1_fu_3010_p2;
                select_ln285_2_reg_4015 <= select_ln285_2_fu_2990_p3;
                sh_amt_5_reg_4005 <= sh_amt_5_fu_2923_p2;
                    tmp_9_reg_3995(22 downto 0) <= tmp_9_fu_2903_p3(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and (icmp_ln278_reg_3902 = ap_const_lv1_0))) then
                and_ln295_reg_3948 <= and_ln295_fu_2776_p2;
                select_ln285_reg_3943 <= select_ln285_fu_2756_p3;
                sh_amt_3_reg_3933 <= sh_amt_3_fu_2689_p2;
                    tmp_8_reg_3923(22 downto 0) <= tmp_8_fu_2669_p3(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                and_ln659_2_reg_3700 <= and_ln659_2_fu_1885_p2;
                and_ln659_reg_3675 <= and_ln659_fu_1695_p2;
                overflow_1_reg_3694 <= overflow_1_fu_1879_p2;
                overflow_reg_3669 <= overflow_fu_1689_p2;
                p_Val2_14_reg_3656 <= p_Val2_14_fu_1515_p3;
                p_Val2_20_reg_3681 <= p_Val2_20_fu_1705_p3;
                select_ln557_1_reg_3688 <= select_ln557_1_fu_1849_p3;
                select_ln557_reg_3663 <= select_ln557_fu_1659_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                currentData_lch_V_reg_3706 <= currentData_lch_V_fu_1974_p3;
                currentData_rch_V_reg_3711 <= currentData_rch_V_fu_2066_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                exp_tmp_V_1_reg_3270 <= ireg_V_1_fu_554_p1(62 downto 52);
                exp_tmp_V_reg_3246 <= ireg_V_fu_524_p1(62 downto 52);
                p_Result_23_reg_3237 <= ireg_V_fu_524_p1(63 downto 63);
                p_Result_27_reg_3261 <= ireg_V_1_fu_554_p1(63 downto 63);
                trunc_ln556_1_reg_3256 <= trunc_ln556_1_fu_558_p1;
                trunc_ln556_reg_3232 <= trunc_ln556_fu_528_p1;
                trunc_ln565_1_reg_3275 <= trunc_ln565_1_fu_580_p1;
                trunc_ln565_reg_3251 <= trunc_ln565_fu_550_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                icmp_ln278_reg_3902 <= icmp_ln278_fu_2651_p2;
                icmp_ln282_reg_3917 <= icmp_ln282_fu_2663_p2;
                p_Result_37_reg_3892 <= reg_V_fu_2614_p3(31 downto 31);
                reg_V_reg_3887 <= reg_V_fu_2614_p3;
                sh_amt_2_reg_3909 <= sh_amt_2_fu_2657_p2;
                trunc_ln270_reg_3897 <= trunc_ln270_fu_2647_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                icmp_ln761_reg_3161 <= icmp_ln761_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                icmp_ln935_1_reg_3807 <= icmp_ln935_1_fu_2280_p2;
                sub_ln944_1_reg_3820 <= sub_ln944_1_fu_2308_p2;
                tmp_V_5_reg_3812 <= tmp_V_5_fu_2285_p3;
                trunc_ln943_1_reg_3832 <= trunc_ln943_1_fu_2318_p1;
                trunc_ln947_1_reg_3827 <= trunc_ln947_1_fu_2314_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                icmp_ln935_reg_3756 <= icmp_ln935_fu_2124_p2;
                p_Result_34_reg_3786 <= p_Val2_1_fu_232(31 downto 31);
                sub_ln944_reg_3769 <= sub_ln944_fu_2152_p2;
                tmp_V_2_reg_3792 <= tmp_V_2_fu_2174_p2;
                tmp_V_4_reg_3761 <= tmp_V_4_fu_2129_p3;
                trunc_ln943_reg_3781 <= trunc_ln943_fu_2162_p1;
                trunc_ln947_reg_3776 <= trunc_ln947_fu_2158_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (icmp_ln935_1_reg_3807 = ap_const_lv1_0))) then
                icmp_ln958_1_reg_3852 <= icmp_ln958_1_fu_2466_p2;
                    or_ln949_1_reg_3847(0) <= or_ln949_1_fu_2458_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln935_reg_3756 = ap_const_lv1_0))) then
                icmp_ln958_reg_3802 <= icmp_ln958_fu_2274_p2;
                    or_ln_reg_3797(0) <= or_ln_fu_2266_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lrclk_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lrclk_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (lrclk_V_0_vld_reg = ap_const_logic_1)))) then
                lrclk_V_0_data_reg <= lrclk_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                lsignExt_V_1_reg_3206 <= lsignExt_V_1_fu_498_p3;
                rsignExt_V_1_reg_3211 <= rsignExt_V_1_fu_517_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                lsignExt_V_2_reg_3192 <= physMemPtr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (icmp_ln935_reg_3756 = ap_const_lv1_0))) then
                m_reg_3837 <= m_3_fu_2349_p2(31 downto 1);
                tmp_32_reg_3842 <= m_3_fu_2349_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (icmp_ln935_1_reg_3807 = ap_const_lv1_0))) then
                m_s_reg_3862 <= m_8_fu_2539_p2(31 downto 1);
                tmp_36_reg_3867 <= m_8_fu_2539_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln761_fu_430_p2 = ap_const_lv1_0))) then
                or_ln107_reg_3170 <= or_ln107_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_2075_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                p_Result_31_reg_3735 <= p_Val2_s_fu_228(31 downto 31);
                tmp_V_reg_3741 <= tmp_V_fu_2111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (icmp_ln935_reg_3756 = ap_const_lv1_0))) then
                p_Result_33_reg_3857 <= p_Result_33_fu_2500_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln935_1_reg_3807 = ap_const_lv1_0))) then
                p_Result_36_reg_3877 <= p_Result_36_fu_2594_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                r_V_3_reg_3127 <= basePhysAddr_V(31 downto 2);
                ret_V_reg_3137 <= ret_V_fu_414_p2;
                    zext_ln215_reg_3132(29 downto 0) <= zext_ln215_fu_410_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op619_writeresp_state58 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_phi_mux_readyLch_flag_1_phi_fu_354_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                readyLch <= ap_phi_mux_readyRch_new_1_phi_fu_339_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op619_writeresp_state58 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_phi_mux_readyRch_flag_1_phi_fu_324_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                readyRch <= ap_phi_mux_readyRch_new_1_phi_fu_339_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (icmp_ln935_1_reg_3807 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln935_reg_3756 = ap_const_lv1_0)))) then
                reg_395 <= grp_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                rsignExt_V_2_reg_3199 <= physMemPtr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                rsrcf_reg_3226 <= grp_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                select_ln285_3_reg_4035 <= select_ln285_3_fu_3086_p3;
                select_ln303_reg_4030 <= select_ln303_fu_3026_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                select_ln303_1_reg_4048 <= select_ln303_1_fu_3109_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                stageIndex_V_reg_3719 <= stageIndex_V_fu_2081_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                status_V_reg_3156 <= physMemPtr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_1_reg_3221 <= grp_fu_378_p1;
                tmp_reg_3216 <= grp_fu_375_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                trunc_ln132_reg_3746 <= trunc_ln132_fu_2117_p1;
            end if;
        end if;
    end process;
    zext_ln215_reg_3132(30) <= '0';
    zext_ln461_reg_3280(11) <= '0';
    zext_ln461_1_reg_3340(11) <= '0';
    zext_ln635_reg_3447(53 downto 32) <= "0000000000000000000000";
    zext_ln635_1_reg_3510(53 downto 32) <= "0000000000000000000000";
    or_ln_reg_3797(31 downto 1) <= "0000000000000000000000000000000";
    or_ln949_1_reg_3847(31 downto 1) <= "0000000000000000000000000000000";
    tmp_8_reg_3923(23) <= '1';
    tmp_9_reg_3995(23) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, icmp_ln761_fu_430_p2, or_ln107_fu_470_p2, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state58, physMemPtr_V_AWREADY, physMemPtr_V_WREADY, physMemPtr_V_ARREADY, physMemPtr_V_RVALID, physMemPtr_V_BVALID, ap_block_state10_io, ap_CS_fsm_state37, icmp_ln887_fu_2075_p2, ap_predicate_op619_writeresp_state58)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln107_fu_470_p2 = ap_const_lv1_0) and (icmp_ln761_fu_430_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and ((or_ln107_fu_470_p2 = ap_const_lv1_1) or (icmp_ln761_fu_430_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((icmp_ln887_fu_2075_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if ((not(((ap_predicate_op619_writeresp_state58 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_1_fu_706_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_1_fu_674_p1));
    F2_fu_616_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_584_p1));
    QUAN_INC_1_fu_712_p2 <= "1" when (signed(F2_1_fu_706_p2) > signed(ap_const_lv12_17)) else "0";
    QUAN_INC_fu_622_p2 <= "1" when (signed(F2_fu_616_p2) > signed(ap_const_lv12_17)) else "0";
    Range1_all_ones_1_fu_1192_p2 <= (icmp_ln621_fu_1163_p2 and and_ln621_fu_1186_p2);
    Range1_all_ones_2_fu_1723_p2 <= (select_ln631_1_reg_3628 and Range1_all_ones_3_reg_3621);
    Range1_all_ones_3_fu_1434_p2 <= (icmp_ln621_1_fu_1405_p2 and and_ln621_4_fu_1428_p2);
    Range1_all_ones_fu_1533_p2 <= (select_ln631_reg_3563 and Range1_all_ones_1_reg_3556);
    Range1_all_zeros_1_fu_1231_p2 <= "1" when (p_Val2_27_reg_3285 = ap_const_lv54_0) else "0";
    Range1_all_zeros_2_fu_1727_p2 <= (ap_const_lv1_1 xor Range1_all_ones_3_reg_3621);
    Range1_all_zeros_3_fu_1473_p2 <= "1" when (p_Val2_28_reg_3345 = ap_const_lv54_0) else "0";
    Range1_all_zeros_fu_1537_p2 <= (ap_const_lv1_1 xor Range1_all_ones_1_reg_3556);
    Range2_V_1_fu_885_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_27_reg_3285),to_integer(unsigned('0' & zext_ln635_fu_881_p1(31-1 downto 0)))));
    Range2_V_3_fu_1016_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_28_reg_3345),to_integer(unsigned('0' & zext_ln635_1_fu_1012_p1(31-1 downto 0)))));
    Range2_all_ones_1_fu_1455_p2 <= "1" when (Range2_V_3_reg_3515 = r_V_1_fu_1450_p2) else "0";
    Range2_all_ones_fu_1213_p2 <= "1" when (Range2_V_1_reg_3452 = r_V_fu_1208_p2) else "0";
    a_1_fu_2419_p2 <= (icmp_ln947_3_fu_2413_p2 and icmp_ln947_2_fu_2387_p2);
    a_fu_2227_p2 <= (icmp_ln947_fu_2195_p2 and icmp_ln947_1_fu_2221_p2);
    add_ln581_1_fu_718_p2 <= std_logic_vector(signed(ap_const_lv12_FE9) + signed(F2_1_fu_706_p2));
    add_ln581_fu_628_p2 <= std_logic_vector(signed(ap_const_lv12_FE9) + signed(F2_fu_616_p2));
    add_ln591_1_fu_1274_p2 <= std_logic_vector(signed(ap_const_lv12_FE8) + signed(F2_1_reg_3362));
    add_ln591_fu_1032_p2 <= std_logic_vector(signed(ap_const_lv12_FE8) + signed(F2_reg_3302));
    add_ln958_1_fu_2512_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_1_reg_3820));
    add_ln958_fu_2322_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_3769));
    add_ln964_1_fu_2581_p2 <= std_logic_vector(unsigned(sub_ln964_1_fu_2576_p2) + unsigned(select_ln964_1_fu_2569_p3));
    add_ln964_fu_2487_p2 <= std_logic_vector(unsigned(sub_ln964_fu_2482_p2) + unsigned(select_ln964_fu_2475_p3));
    and_ln107_fu_459_p2 <= (xor_ln107_fu_453_p2 and lrclk_V_0_data_reg);
    and_ln282_1_fu_2955_p2 <= (xor_ln278_1_fu_2950_p2 and icmp_ln282_1_reg_3983);
    and_ln282_fu_2721_p2 <= (xor_ln278_fu_2716_p2 and icmp_ln282_reg_3917);
    and_ln284_1_fu_2978_p2 <= (xor_ln282_1_fu_2972_p2 and icmp_ln284_1_fu_2913_p2);
    and_ln284_fu_2744_p2 <= (xor_ln282_fu_2738_p2 and icmp_ln284_fu_2679_p2);
    and_ln285_1_fu_2890_p2 <= (xor_ln285_fu_2885_p2 and and_ln284_reg_3938);
    and_ln285_2_fu_2984_p2 <= (icmp_ln285_1_fu_2918_p2 and and_ln284_1_fu_2978_p2);
    and_ln285_3_fu_3081_p2 <= (xor_ln285_1_fu_3076_p2 and and_ln284_1_reg_4010);
    and_ln285_fu_2750_p2 <= (icmp_ln285_fu_2684_p2 and and_ln284_fu_2744_p2);
    and_ln295_1_fu_3010_p2 <= (xor_ln284_1_fu_3004_p2 and icmp_ln295_1_fu_2938_p2);
    and_ln295_fu_2776_p2 <= (xor_ln284_fu_2770_p2 and icmp_ln295_fu_2704_p2);
    and_ln340_1_fu_1969_p2 <= (empty_16_reg_3416 and and_ln340_fu_1963_p2);
    and_ln340_2_fu_2055_p2 <= (xor_ln571_1_fu_2050_p2 and or_ln340_5_fu_2008_p2);
    and_ln340_3_fu_2061_p2 <= (empty_19_reg_3479 and and_ln340_2_fu_2055_p2);
    and_ln340_fu_1963_p2 <= (xor_ln571_fu_1958_p2 and or_ln340_3_fu_1916_p2);
    and_ln403_1_fu_1113_p2 <= (xor_ln403_fu_1108_p2 and and_ln578_fu_1090_p2);
    and_ln403_2_fu_1137_p2 <= (xor_ln416_fu_1071_p2 and and_ln403_fu_1095_p2);
    and_ln403_3_fu_1337_p2 <= (p_Result_29_reg_3473 and and_ln578_1_fu_1332_p2);
    and_ln403_4_fu_1355_p2 <= (xor_ln403_1_fu_1350_p2 and and_ln578_1_fu_1332_p2);
    and_ln403_5_fu_1379_p2 <= (xor_ln416_1_fu_1313_p2 and and_ln403_3_fu_1337_p2);
    and_ln403_fu_1095_p2 <= (p_Result_25_reg_3410 and and_ln578_fu_1090_p2);
    and_ln557_1_fu_1845_p2 <= (p_Result_27_reg_3261 and icmp_ln621_1_reg_3607);
    and_ln557_fu_1655_p2 <= (p_Result_23_reg_3237 and icmp_ln621_reg_3542);
    and_ln578_1_fu_1332_p2 <= (xor_ln582_1_fu_1326_p2 and QUAN_INC_1_reg_3371);
    and_ln578_fu_1090_p2 <= (xor_ln582_fu_1084_p2 and QUAN_INC_reg_3311);
    and_ln603_1_fu_1143_p2 <= (icmp_ln603_reg_3329 and icmp_ln578_fu_1127_p2);
    and_ln603_2_fu_1154_p2 <= (xor_ln603_fu_1148_p2 and and_ln403_2_fu_1137_p2);
    and_ln603_3_fu_1374_p2 <= (icmp_ln603_1_reg_3389 and icmp_ln578_2_fu_1369_p2);
    and_ln603_4_fu_1385_p2 <= (icmp_ln603_1_reg_3389 and icmp_ln578_2_fu_1369_p2);
    and_ln603_5_fu_1396_p2 <= (xor_ln603_1_fu_1390_p2 and and_ln403_5_fu_1379_p2);
    and_ln603_fu_1132_p2 <= (icmp_ln603_reg_3329 and icmp_ln578_fu_1127_p2);
    and_ln621_2_fu_1644_p2 <= (xor_ln621_fu_1633_p2 and p_Result_26_fu_1521_p3);
    and_ln621_3_fu_1650_p2 <= (p_Result_23_reg_3237 and and_ln621_2_fu_1644_p2);
    and_ln621_4_fu_1428_p2 <= (xor_ln621_3_fu_1410_p2 and lD_1_fu_1424_p1);
    and_ln621_6_fu_1834_p2 <= (xor_ln621_1_fu_1823_p2 and p_Result_30_fu_1711_p3);
    and_ln621_7_fu_1840_p2 <= (p_Result_27_reg_3261 and and_ln621_6_fu_1834_p2);
    and_ln621_fu_1186_p2 <= (xor_ln621_2_fu_1168_p2 and lD_fu_1182_p1);
    and_ln631_1_fu_1445_p2 <= (xor_ln631_1_fu_1440_p2 and icmp_ln631_1_reg_3503);
    and_ln631_fu_1203_p2 <= (xor_ln631_fu_1198_p2 and icmp_ln631_reg_3440);
    and_ln639_1_fu_1719_p2 <= (xor_ln621_3_reg_3614 and icmp_ln631_1_reg_3503);
    and_ln639_fu_1529_p2 <= (xor_ln621_2_reg_3549 and icmp_ln631_reg_3440);
    and_ln641_1_fu_1732_p2 <= (icmp_ln641_1_reg_3634 and Range1_all_zeros_2_fu_1727_p2);
    and_ln641_fu_1542_p2 <= (icmp_ln641_reg_3569 and Range1_all_zeros_fu_1537_p2);
    and_ln642_1_fu_1488_p2 <= (or_ln639_1_fu_1483_p2 and icmp_ln642_1_reg_3521);
    and_ln642_fu_1246_p2 <= (or_ln639_fu_1241_p2 and icmp_ln642_reg_3458);
    and_ln652_1_fu_1786_p2 <= (select_ln639_2_fu_1746_p3 and or_ln652_5_reg_3650);
    and_ln652_fu_1596_p2 <= (select_ln639_fu_1556_p3 and or_ln652_4_reg_3585);
    and_ln654_1_fu_1812_p2 <= (select_ln639_2_fu_1746_p3 and and_ln603_5_reg_3601);
    and_ln654_fu_1622_p2 <= (select_ln639_fu_1556_p3 and and_ln603_2_reg_3536);
    and_ln658_2_fu_1863_p2 <= (xor_ln658_fu_1857_p2 and icmp_ln621_1_reg_3607);
    and_ln658_fu_1673_p2 <= (xor_ln658_2_fu_1667_p2 and icmp_ln621_reg_3542);
    and_ln659_2_fu_1885_p2 <= (p_Result_30_fu_1711_p3 and or_ln557_1_fu_1828_p2);
    and_ln659_fu_1695_p2 <= (p_Result_26_fu_1521_p3 and or_ln557_fu_1638_p2);
    and_ln949_1_fu_2446_p2 <= (xor_ln949_1_fu_2433_p2 and p_Result_19_fu_2439_p3);
    and_ln949_fu_2254_p2 <= (xor_ln949_fu_2241_p2 and p_Result_6_fu_2247_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_io_assign_proc : process(physMemPtr_V_ARREADY, ap_predicate_op101_readreq_state10)
    begin
                ap_block_state10_io <= ((ap_predicate_op101_readreq_state10 = ap_const_boolean_1) and (physMemPtr_V_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state58_assign_proc : process(physMemPtr_V_BVALID, ap_predicate_op619_writeresp_state58)
    begin
                ap_block_state58 <= ((ap_predicate_op619_writeresp_state58 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state58, physMemPtr_V_BVALID, ap_predicate_op619_writeresp_state58)
    begin
        if ((not(((ap_predicate_op619_writeresp_state58 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_readyLch_flag_1_phi_fu_354_p6_assign_proc : process(ap_CS_fsm_state58, icmp_ln761_reg_3161, or_ln107_reg_3170, readyLch_flag_1_reg_350)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) and (or_ln107_reg_3170 = ap_const_lv1_0) and (icmp_ln761_reg_3161 = ap_const_lv1_0))) then 
            ap_phi_mux_readyLch_flag_1_phi_fu_354_p6 <= ap_const_lv1_1;
        else 
            ap_phi_mux_readyLch_flag_1_phi_fu_354_p6 <= readyLch_flag_1_reg_350;
        end if; 
    end process;


    ap_phi_mux_readyRch_flag_1_phi_fu_324_p6_assign_proc : process(ap_CS_fsm_state58, icmp_ln761_reg_3161, or_ln107_reg_3170, readyRch_flag_1_reg_320)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) and (or_ln107_reg_3170 = ap_const_lv1_0) and (icmp_ln761_reg_3161 = ap_const_lv1_0))) then 
            ap_phi_mux_readyRch_flag_1_phi_fu_324_p6 <= ap_const_lv1_1;
        else 
            ap_phi_mux_readyRch_flag_1_phi_fu_324_p6 <= readyRch_flag_1_reg_320;
        end if; 
    end process;


    ap_phi_mux_readyRch_new_1_phi_fu_339_p6_assign_proc : process(ap_CS_fsm_state58, icmp_ln761_reg_3161, or_ln107_reg_3170, readyRch_new_1_reg_334)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) and (or_ln107_reg_3170 = ap_const_lv1_0) and (icmp_ln761_reg_3161 = ap_const_lv1_0))) then 
            ap_phi_mux_readyRch_new_1_phi_fu_339_p6 <= ap_const_lv1_0;
        else 
            ap_phi_mux_readyRch_new_1_phi_fu_339_p6 <= readyRch_new_1_reg_334;
        end if; 
    end process;


    ap_predicate_op101_readreq_state10_assign_proc : process(icmp_ln761_fu_430_p2, or_ln107_fu_470_p2)
    begin
                ap_predicate_op101_readreq_state10 <= ((or_ln107_fu_470_p2 = ap_const_lv1_0) and (icmp_ln761_fu_430_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op619_writeresp_state58_assign_proc : process(icmp_ln761_reg_3161, or_ln107_reg_3170)
    begin
                ap_predicate_op619_writeresp_state58 <= ((or_ln107_reg_3170 = ap_const_lv1_0) and (icmp_ln761_reg_3161 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state58, physMemPtr_V_BVALID, ap_predicate_op619_writeresp_state58)
    begin
        if ((not(((ap_predicate_op619_writeresp_state58 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ashr_ln586_1_fu_913_p2 <= std_logic_vector(shift_right(signed(p_Val2_28_reg_3345),to_integer(unsigned('0' & zext_ln586_1_fu_909_p1(31-1 downto 0)))));
    ashr_ln586_fu_781_p2 <= std_logic_vector(shift_right(signed(p_Val2_27_reg_3285),to_integer(unsigned('0' & zext_ln586_fu_777_p1(31-1 downto 0)))));
    ashr_ln623_1_fu_1419_p2 <= std_logic_vector(shift_right(signed(p_Val2_28_reg_3345),to_integer(unsigned('0' & zext_ln623_1_fu_1415_p1(31-1 downto 0)))));
    ashr_ln623_fu_1177_p2 <= std_logic_vector(shift_right(signed(p_Val2_27_reg_3285),to_integer(unsigned('0' & zext_ln623_fu_1173_p1(31-1 downto 0)))));
    bitcast_ln696_2_fu_922_p1 <= rsrcf_reg_3226;
    bitcast_ln696_fu_790_p1 <= reg_395;
    bitcast_ln705_1_fu_2782_p1 <= reg_395;
    bitcast_ln705_fu_2610_p1 <= reg_395;
    bitcast_ln739_1_fu_2606_p1 <= p_Result_36_reg_3877;
    bitcast_ln739_fu_2562_p1 <= p_Result_33_reg_3857;
    configReg_address0 <= zext_ln129_fu_2095_p1(6 - 1 downto 0);

    configReg_ce0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            configReg_ce0 <= ap_const_logic_1;
        else 
            configReg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    currentData_lch_V_fu_1974_p3 <= 
        select_ln340_fu_1921_p3 when (and_ln340_1_fu_1969_p2(0) = '1') else 
        sel_tmp58_fu_1951_p3;
    currentData_rch_V_fu_2066_p3 <= 
        select_ln340_1_fu_2013_p3 when (and_ln340_3_fu_2061_p2(0) = '1') else 
        sel_tmp123_fu_2043_p3;
    deleted_ones_1_fu_1804_p3 <= 
        and_ln652_1_fu_1786_p2 when (or_ln652_2_fu_1781_p2(0) = '1') else 
        or_ln652_3_fu_1798_p2;
    deleted_ones_fu_1614_p3 <= 
        and_ln652_fu_1596_p2 when (or_ln652_fu_1591_p2(0) = '1') else 
        or_ln652_1_fu_1608_p2;
    deleted_zeros_1_fu_1769_p3 <= 
        select_ln639_2_fu_1746_p3 when (and_ln603_5_reg_3601(0) = '1') else 
        select_ln639_3_fu_1761_p3;
    deleted_zeros_fu_1579_p3 <= 
        select_ln639_fu_1556_p3 when (and_ln603_2_reg_3536(0) = '1') else 
        select_ln639_1_fu_1571_p3;
    empty_15_fu_833_p2 <= std_logic_vector(unsigned(tmp185_cast_cast_fu_826_p3) + unsigned(exp_V_fu_764_p2));
    empty_16_fu_839_p2 <= "1" when (signed(empty_15_fu_833_p2) > signed(ap_const_lv12_8)) else "0";
    empty_17_fu_1627_p2 <= (ap_const_lv1_1 xor and_ln654_fu_1622_p2);
    empty_18_fu_964_p2 <= std_logic_vector(unsigned(tmp190_cast_cast_fu_957_p3) + unsigned(exp_V_1_fu_896_p2));
    empty_19_fu_970_p2 <= "1" when (signed(empty_18_fu_964_p2) > signed(ap_const_lv12_8)) else "0";
    empty_20_fu_1817_p2 <= (ap_const_lv1_1 xor and_ln654_1_fu_1812_p2);
    exp_V_1_fu_896_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln461_1_reg_3340));
    exp_V_2_fu_2643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_22_fu_2633_p4),9));
    exp_V_3_fu_2815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_2805_p4),9));
    exp_V_fu_764_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln461_reg_3280));

    grp_fu_364_p0_assign_proc : process(tmp_reg_3216, bitcast_ln739_fu_2562_p1, ap_CS_fsm_state44, bitcast_ln739_1_fu_2606_p1, ap_CS_fsm_state45, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_364_p0 <= bitcast_ln739_1_fu_2606_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_364_p0 <= bitcast_ln739_fu_2562_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_364_p0 <= tmp_reg_3216;
        else 
            grp_fu_364_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_364_p1_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            grp_fu_364_p1 <= ap_const_lv32_4B000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_364_p1 <= ap_const_lv32_34000000;
        else 
            grp_fu_364_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln278_1_fu_2823_p2 <= "1" when (trunc_ln262_1_fu_2793_p1 = ap_const_lv31_0) else "0";
    icmp_ln278_fu_2651_p2 <= "1" when (trunc_ln262_fu_2621_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_1_fu_2835_p2 <= "1" when (p_Result_1_fu_2805_p4 = ap_const_lv8_96) else "0";
    icmp_ln282_fu_2663_p2 <= "1" when (p_Result_s_22_fu_2633_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_1_fu_2913_p2 <= "1" when (signed(sh_amt_4_reg_3975) > signed(ap_const_lv9_0)) else "0";
    icmp_ln284_fu_2679_p2 <= "1" when (signed(sh_amt_2_reg_3909) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_1_fu_2918_p2 <= "1" when (signed(sh_amt_4_reg_3975) < signed(ap_const_lv9_19)) else "0";
    icmp_ln285_fu_2684_p2 <= "1" when (signed(sh_amt_2_reg_3909) < signed(ap_const_lv9_19)) else "0";
    icmp_ln295_1_fu_2938_p2 <= "1" when (signed(tmp_41_fu_2928_p4) < signed(ap_const_lv4_1)) else "0";
    icmp_ln295_fu_2704_p2 <= "1" when (signed(tmp_38_fu_2694_p4) < signed(ap_const_lv4_1)) else "0";
    icmp_ln571_1_fu_701_p2 <= "1" when (trunc_ln556_1_reg_3256 = ap_const_lv63_0) else "0";
    icmp_ln571_fu_611_p2 <= "1" when (trunc_ln556_reg_3232 = ap_const_lv63_0) else "0";
    icmp_ln578_2_fu_1369_p2 <= "1" when (signed(F2_1_reg_3362) < signed(ap_const_lv12_17)) else "0";
    icmp_ln578_fu_1127_p2 <= "1" when (signed(F2_reg_3302) < signed(ap_const_lv12_17)) else "0";
    icmp_ln582_1_fu_1269_p2 <= "1" when (F2_1_reg_3362 = ap_const_lv12_17) else "0";
    icmp_ln582_fu_1027_p2 <= "1" when (F2_reg_3302 = ap_const_lv12_17) else "0";
    icmp_ln585_1_fu_904_p2 <= "1" when (unsigned(sh_amt_1_reg_3377) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln585_fu_772_p2 <= "1" when (unsigned(sh_amt_reg_3317) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln591_1_fu_758_p2 <= "1" when (signed(add_ln581_1_fu_718_p2) > signed(ap_const_lv12_36)) else "0";
    icmp_ln591_fu_668_p2 <= "1" when (signed(add_ln581_fu_628_p2) > signed(ap_const_lv12_36)) else "0";
    icmp_ln603_1_fu_752_p2 <= "1" when (tmp_21_fu_742_p4 = ap_const_lv7_0) else "0";
    icmp_ln603_fu_662_p2 <= "1" when (tmp_12_fu_652_p4 = ap_const_lv7_0) else "0";
    icmp_ln621_1_fu_1405_p2 <= "1" when (signed(pos1_1_reg_3485) < signed(ap_const_lv12_36)) else "0";
    icmp_ln621_fu_1163_p2 <= "1" when (signed(pos1_reg_3422) < signed(ap_const_lv12_36)) else "0";
    icmp_ln631_1_fu_1006_p2 <= "1" when (signed(pos2_1_fu_981_p2) < signed(ap_const_lv12_36)) else "0";
    icmp_ln631_fu_875_p2 <= "1" when (signed(pos2_fu_850_p2) < signed(ap_const_lv12_36)) else "0";
    icmp_ln641_1_fu_1468_p2 <= "1" when (Range2_V_3_reg_3515 = ap_const_lv54_0) else "0";
    icmp_ln641_fu_1226_p2 <= "1" when (Range2_V_1_reg_3452 = ap_const_lv54_0) else "0";
    icmp_ln642_1_fu_1021_p2 <= "1" when (pos2_1_fu_981_p2 = ap_const_lv12_36) else "0";
    icmp_ln642_fu_890_p2 <= "1" when (pos2_fu_850_p2 = ap_const_lv12_36) else "0";
    icmp_ln761_fu_430_p2 <= "1" when (status_V_reg_3156 = ap_const_lv32_0) else "0";
    icmp_ln887_fu_2075_p2 <= "1" when (t_V_reg_309 = ap_const_lv3_4) else "0";
    icmp_ln935_1_fu_2280_p2 <= "1" when (p_Val2_1_fu_232 = ap_const_lv32_0) else "0";
    icmp_ln935_fu_2124_p2 <= "1" when (p_Val2_s_fu_228 = ap_const_lv32_0) else "0";
    icmp_ln947_1_fu_2221_p2 <= "0" when (p_Result_12_fu_2216_p2 = ap_const_lv32_0) else "1";
    icmp_ln947_2_fu_2387_p2 <= "1" when (signed(tmp_34_fu_2377_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln947_3_fu_2413_p2 <= "0" when (p_Result_18_fu_2408_p2 = ap_const_lv32_0) else "1";
    icmp_ln947_fu_2195_p2 <= "1" when (signed(tmp_30_fu_2185_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_1_fu_2466_p2 <= "1" when (signed(lsb_index_1_fu_2372_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_fu_2274_p2 <= "1" when (signed(lsb_index_fu_2180_p2) > signed(ap_const_lv32_0)) else "0";
    ireg_V_1_fu_554_p1 <= grp_fu_384_p1;
    ireg_V_fu_524_p1 <= grp_fu_381_p1;
    lD_1_fu_1424_p1 <= ashr_ln623_1_fu_1419_p2(1 - 1 downto 0);
    lD_fu_1182_p1 <= ashr_ln623_fu_1177_p2(1 - 1 downto 0);
    
    l_1_fu_2300_p3_proc : process(p_Result_35_fu_2290_p4)
    begin
        l_1_fu_2300_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_35_fu_2290_p4(i) = '1' then
                l_1_fu_2300_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_fu_2144_p3_proc : process(p_Result_32_fu_2134_p4)
    begin
        l_fu_2144_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_32_fu_2134_p4(i) = '1' then
                l_fu_2144_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;


    lrclk_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state58, physMemPtr_V_ARREADY, physMemPtr_V_BVALID, ap_predicate_op619_writeresp_state58)
    begin
        if (((not(((ap_predicate_op619_writeresp_state58 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            lrclk_V_0_ack_out <= ap_const_logic_1;
        else 
            lrclk_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    lsb_index_1_fu_2372_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_1_reg_3820));
    lsb_index_fu_2180_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_reg_3769));
    lshr_ln286_1_fu_2944_p2 <= std_logic_vector(shift_right(unsigned(tmp_9_fu_2903_p3),to_integer(unsigned('0' & sext_ln281_1_fu_2910_p1(24-1 downto 0)))));
    lshr_ln286_fu_2710_p2 <= std_logic_vector(shift_right(unsigned(tmp_8_fu_2669_p3),to_integer(unsigned('0' & sext_ln281_fu_2676_p1(24-1 downto 0)))));
    lshr_ln947_1_fu_2402_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_1_fu_2398_p1(31-1 downto 0)))));
    lshr_ln947_fu_2210_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_2206_p1(31-1 downto 0)))));
    lshr_ln958_1_fu_2517_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_5_reg_3812),to_integer(unsigned('0' & add_ln958_1_fu_2512_p2(31-1 downto 0)))));
    lshr_ln958_fu_2327_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_4_reg_3761),to_integer(unsigned('0' & add_ln958_fu_2322_p2(31-1 downto 0)))));
    lsignExt_V_1_fu_498_p3 <= 
        ret_V_4_fu_493_p2 when (tmp_4_fu_486_p3(0) = '1') else 
        lsignExt_V_2_reg_3192;
    m_11_fu_2472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_3837),32));
    m_12_fu_2566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_reg_3862),32));
    m_2_fu_2342_p3 <= 
        lshr_ln958_fu_2327_p2 when (icmp_ln958_reg_3802(0) = '1') else 
        shl_ln958_fu_2337_p2;
    m_3_fu_2349_p2 <= std_logic_vector(unsigned(or_ln_reg_3797) + unsigned(m_2_fu_2342_p3));
    m_7_fu_2532_p3 <= 
        lshr_ln958_1_fu_2517_p2 when (icmp_ln958_1_reg_3852(0) = '1') else 
        shl_ln958_1_fu_2527_p2;
    m_8_fu_2539_p2 <= std_logic_vector(unsigned(or_ln949_1_reg_3847) + unsigned(m_7_fu_2532_p3));
    man_V_1_fu_598_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_24_fu_594_p1));
    man_V_4_fu_688_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_28_fu_684_p1));
    or_ln102_fu_443_p2 <= (readyRch or lrclk_V_0_data_reg);
    or_ln107_fu_470_p2 <= (xor_ln107_1_fu_464_p2 or and_ln107_fu_459_p2);
    or_ln282_1_fu_2968_p2 <= (icmp_ln282_1_reg_3983 or icmp_ln278_1_reg_3968);
    or_ln282_fu_2734_p2 <= (icmp_ln282_reg_3917 or icmp_ln278_reg_3902);
    or_ln284_1_fu_2998_p2 <= (or_ln282_1_fu_2968_p2 or icmp_ln284_1_fu_2913_p2);
    or_ln284_fu_2764_p2 <= (or_ln282_fu_2734_p2 or icmp_ln284_fu_2679_p2);
    or_ln340_1_fu_1993_p2 <= (underflow_1_fu_1988_p2 or overflow_1_reg_3694);
    or_ln340_2_fu_1911_p2 <= (xor_ln340_fu_1906_p2 or overflow_reg_3669);
    or_ln340_3_fu_1916_p2 <= (or_ln340_2_fu_1911_p2 or and_ln659_reg_3675);
    or_ln340_4_fu_2003_p2 <= (xor_ln340_1_fu_1998_p2 or overflow_1_reg_3694);
    or_ln340_5_fu_2008_p2 <= (or_ln340_4_fu_2003_p2 or and_ln659_2_reg_3700);
    or_ln340_fu_1901_p2 <= (underflow_fu_1896_p2 or overflow_reg_3669);
    or_ln557_1_fu_1828_p2 <= (xor_ln621_1_fu_1823_p2 or deleted_ones_1_fu_1804_p3);
    or_ln557_fu_1638_p2 <= (xor_ln621_fu_1633_p2 or deleted_ones_fu_1614_p3);
    or_ln571_1_fu_2027_p2 <= (underflow_1_fu_1988_p2 or icmp_ln571_1_reg_3354);
    or_ln571_fu_1935_p2 <= (underflow_fu_1896_p2 or icmp_ln571_reg_3294);
    or_ln639_1_fu_1483_p2 <= (xor_ln639_fu_1478_p2 or tmp_26_reg_3492);
    or_ln639_fu_1241_p2 <= (xor_ln639_2_fu_1236_p2 or tmp_17_reg_3429);
    or_ln645_1_fu_1737_p2 <= (xor_ln621_3_reg_3614 or Range1_all_zeros_3_reg_3639);
    or_ln645_fu_1547_p2 <= (xor_ln621_2_reg_3549 or Range1_all_zeros_1_reg_3574);
    or_ln652_1_fu_1608_p2 <= (tmp_19_fu_1601_p3 or Range1_all_zeros_fu_1537_p2);
    or_ln652_2_fu_1781_p2 <= (xor_ln652_3_fu_1776_p2 or or_ln652_5_reg_3650);
    or_ln652_3_fu_1798_p2 <= (tmp_28_fu_1791_p3 or Range1_all_zeros_2_fu_1727_p2);
    or_ln652_4_fu_1263_p2 <= (or_ln652_6_fu_1257_p2 or and_ln603_fu_1132_p2);
    or_ln652_5_fu_1505_p2 <= (or_ln652_7_fu_1499_p2 or and_ln603_3_fu_1374_p2);
    or_ln652_6_fu_1257_p2 <= (xor_ln652_4_fu_1251_p2 or tmp_15_fu_1063_p3);
    or_ln652_7_fu_1499_p2 <= (xor_ln652_5_fu_1493_p2 or tmp_24_fu_1305_p3);
    or_ln652_fu_1591_p2 <= (xor_ln652_1_fu_1586_p2 or or_ln652_4_reg_3585);
    or_ln658_1_fu_1868_p2 <= (p_Result_30_fu_1711_p3 or and_ln658_2_fu_1863_p2);
    or_ln658_fu_1678_p2 <= (p_Result_26_fu_1521_p3 or and_ln658_fu_1673_p2);
    or_ln949_1_fu_2458_p3 <= (ap_const_lv31_0 & or_ln949_fu_2452_p2);
    or_ln949_2_fu_2260_p2 <= (and_ln949_fu_2254_p2 or a_fu_2227_p2);
    or_ln949_fu_2452_p2 <= (and_ln949_1_fu_2446_p2 or a_1_fu_2419_p2);
    or_ln_fu_2266_p3 <= (ap_const_lv31_0 & or_ln949_2_fu_2260_p2);
    overflow_1_fu_1879_p2 <= (xor_ln658_3_fu_1874_p2 and or_ln658_1_fu_1868_p2);
    overflow_fu_1689_p2 <= (xor_ln658_1_fu_1684_p2 and or_ln658_fu_1678_p2);
    p_Result_12_fu_2216_p2 <= (tmp_V_4_reg_3761 and lshr_ln947_fu_2210_p2);
    p_Result_18_fu_2408_p2 <= (tmp_V_5_reg_3812 and lshr_ln947_1_fu_2402_p2);
    p_Result_19_fu_2439_p3 <= tmp_V_5_reg_3812(to_integer(unsigned(lsb_index_1_fu_2372_p2)) downto to_integer(unsigned(lsb_index_1_fu_2372_p2))) when (to_integer(unsigned(lsb_index_1_fu_2372_p2))>= 0 and to_integer(unsigned(lsb_index_1_fu_2372_p2))<=31) else "-";
    p_Result_1_fu_2805_p4 <= reg_V_1_fu_2786_p3(30 downto 23);
    p_Result_24_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_587_p3),54));
    p_Result_26_fu_1521_p3 <= p_Val2_14_fu_1515_p3(31 downto 31);
    p_Result_28_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_677_p3),54));
    p_Result_30_fu_1711_p3 <= p_Val2_20_fu_1705_p3(31 downto 31);
    
    p_Result_32_fu_2134_p4_proc : process(tmp_V_4_fu_2129_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_32_fu_2134_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_4_fu_2129_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_32_fu_2134_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_32_fu_2134_p4_i) := tmp_V_4_fu_2129_p3(32-1-p_Result_32_fu_2134_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_32_fu_2134_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_33_fu_2500_p5 <= (tmp_5_fu_2493_p3 & m_11_fu_2472_p1(22 downto 0));
    
    p_Result_35_fu_2290_p4_proc : process(tmp_V_5_fu_2285_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_35_fu_2290_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_5_fu_2285_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_35_fu_2290_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_35_fu_2290_p4_i) := tmp_V_5_fu_2285_p3(32-1-p_Result_35_fu_2290_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_35_fu_2290_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_36_fu_2594_p5 <= (tmp_7_fu_2587_p3 & m_12_fu_2566_p1(22 downto 0));
    p_Result_5_fu_1283_p3 <= p_Val2_28_reg_3345(to_integer(unsigned(sext_ln591_1_fu_1279_p1)) downto to_integer(unsigned(sext_ln591_1_fu_1279_p1))) when (to_integer(unsigned(sext_ln591_1_fu_1279_p1))>= 0 and to_integer(unsigned(sext_ln591_1_fu_1279_p1))<=53) else "-";
    p_Result_6_fu_2247_p3 <= tmp_V_4_reg_3761(to_integer(unsigned(lsb_index_fu_2180_p2)) downto to_integer(unsigned(lsb_index_fu_2180_p2))) when (to_integer(unsigned(lsb_index_fu_2180_p2))>= 0 and to_integer(unsigned(lsb_index_fu_2180_p2))<=31) else "-";
    p_Result_s_22_fu_2633_p4 <= reg_V_fu_2614_p3(30 downto 23);
    p_Result_s_fu_1041_p3 <= p_Val2_27_reg_3285(to_integer(unsigned(sext_ln591_fu_1037_p1)) downto to_integer(unsigned(sext_ln591_fu_1037_p1))) when (to_integer(unsigned(sext_ln591_fu_1037_p1))>= 0 and to_integer(unsigned(sext_ln591_fu_1037_p1))<=53) else "-";
    p_Val2_13_fu_1058_p2 <= std_logic_vector(unsigned(p_Val2_9_reg_3405) + unsigned(zext_ln415_fu_1054_p1));
    p_Val2_14_fu_1515_p3 <= 
        shl_ln604_fu_1511_p2 when (and_ln603_reg_3531(0) = '1') else 
        select_ln403_1_reg_3526;
    p_Val2_18_fu_941_p3 <= 
        trunc_ln586_1_fu_918_p1 when (icmp_ln585_1_fu_904_p2(0) = '1') else 
        select_ln588_1_fu_933_p3;
    p_Val2_19_fu_1300_p2 <= std_logic_vector(unsigned(p_Val2_18_reg_3468) + unsigned(zext_ln415_1_fu_1296_p1));
    p_Val2_20_fu_1705_p3 <= 
        shl_ln604_1_fu_1701_p2 when (and_ln603_3_reg_3596(0) = '1') else 
        select_ln403_3_reg_3591;
    p_Val2_27_fu_604_p3 <= 
        man_V_1_fu_598_p2 when (p_Result_23_reg_3237(0) = '1') else 
        p_Result_24_fu_594_p1;
    p_Val2_28_fu_694_p3 <= 
        man_V_4_fu_688_p2 when (p_Result_27_reg_3261(0) = '1') else 
        p_Result_28_fu_684_p1;
    p_Val2_9_fu_810_p3 <= 
        trunc_ln586_fu_786_p1 when (icmp_ln585_fu_772_p2(0) = '1') else 
        select_ln588_fu_802_p3;

    physMemPtr_V_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, physMemPtr_V_ARREADY, ap_predicate_op101_readreq_state10, ap_block_state10_io, zext_ln544_fu_420_p1, zext_ln544_1_fu_476_p1)
    begin
        if (((ap_predicate_op101_readreq_state10 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            physMemPtr_V_ARADDR <= zext_ln544_1_fu_476_p1(32 - 1 downto 0);
        elsif (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            physMemPtr_V_ARADDR <= zext_ln544_fu_420_p1(32 - 1 downto 0);
        else 
            physMemPtr_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, physMemPtr_V_ARREADY, ap_predicate_op101_readreq_state10, ap_block_state10_io)
    begin
        if (((ap_predicate_op101_readreq_state10 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            physMemPtr_V_ARLEN <= ap_const_lv32_2;
        elsif (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            physMemPtr_V_ARLEN <= ap_const_lv32_1;
        else 
            physMemPtr_V_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, physMemPtr_V_ARREADY, ap_predicate_op101_readreq_state10, ap_block_state10_io)
    begin
        if ((((ap_predicate_op101_readreq_state10 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            physMemPtr_V_ARVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    physMemPtr_V_AWADDR <= zext_ln544_2_fu_3094_p1(32 - 1 downto 0);

    physMemPtr_V_AWVALID_assign_proc : process(ap_CS_fsm_state51, physMemPtr_V_AWREADY)
    begin
        if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            physMemPtr_V_AWVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_BREADY_assign_proc : process(ap_CS_fsm_state58, physMemPtr_V_BVALID, ap_predicate_op619_writeresp_state58)
    begin
        if ((not(((ap_predicate_op619_writeresp_state58 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_predicate_op619_writeresp_state58 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            physMemPtr_V_BREADY <= ap_const_logic_1;
        else 
            physMemPtr_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_RREADY_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state18, physMemPtr_V_RVALID)
    begin
        if ((((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            physMemPtr_V_RREADY <= ap_const_logic_1;
        else 
            physMemPtr_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_WDATA_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, select_ln303_reg_4030, select_ln303_1_reg_4048)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            physMemPtr_V_WDATA <= select_ln303_1_reg_4048;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            physMemPtr_V_WDATA <= select_ln303_reg_4030;
        else 
            physMemPtr_V_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_WVALID_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, physMemPtr_V_WREADY)
    begin
        if ((((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52)))) then 
            physMemPtr_V_WVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_blk_n_AR_assign_proc : process(m_axi_physMemPtr_V_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state10, icmp_ln761_fu_430_p2, or_ln107_fu_470_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln107_fu_470_p2 = ap_const_lv1_0) and (icmp_ln761_fu_430_p2 = ap_const_lv1_0)))) then 
            physMemPtr_V_blk_n_AR <= m_axi_physMemPtr_V_ARREADY;
        else 
            physMemPtr_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_AW_assign_proc : process(m_axi_physMemPtr_V_AWREADY, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            physMemPtr_V_blk_n_AW <= m_axi_physMemPtr_V_AWREADY;
        else 
            physMemPtr_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_B_assign_proc : process(m_axi_physMemPtr_V_BVALID, ap_CS_fsm_state58, icmp_ln761_reg_3161, or_ln107_reg_3170)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) and (or_ln107_reg_3170 = ap_const_lv1_0) and (icmp_ln761_reg_3161 = ap_const_lv1_0))) then 
            physMemPtr_V_blk_n_B <= m_axi_physMemPtr_V_BVALID;
        else 
            physMemPtr_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_R_assign_proc : process(m_axi_physMemPtr_V_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            physMemPtr_V_blk_n_R <= m_axi_physMemPtr_V_RVALID;
        else 
            physMemPtr_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_W_assign_proc : process(m_axi_physMemPtr_V_WREADY, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            physMemPtr_V_blk_n_W <= m_axi_physMemPtr_V_WREADY;
        else 
            physMemPtr_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    pos1_1_fu_976_p2 <= std_logic_vector(unsigned(ap_const_lv12_9) + unsigned(F2_1_reg_3362));
    pos1_fu_845_p2 <= std_logic_vector(unsigned(ap_const_lv12_9) + unsigned(F2_reg_3302));
    pos2_1_fu_981_p2 <= std_logic_vector(unsigned(ap_const_lv12_A) + unsigned(F2_1_reg_3362));
    pos2_fu_850_p2 <= std_logic_vector(unsigned(ap_const_lv12_A) + unsigned(F2_reg_3302));
    qb_1_fu_1290_p3 <= 
        p_Result_27_reg_3261 when (icmp_ln591_1_reg_3395(0) = '1') else 
        p_Result_5_fu_1283_p3;
    qb_fu_1048_p3 <= 
        p_Result_23_reg_3237 when (icmp_ln591_reg_3335(0) = '1') else 
        p_Result_s_fu_1041_p3;
    r_V_1_fu_1450_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv54_3FFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln635_1_reg_3510(31-1 downto 0)))));
    r_V_3_fu_400_p4 <= basePhysAddr_V(31 downto 2);
    r_V_fu_1208_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv54_3FFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln635_reg_3447(31-1 downto 0)))));
    reg_V_1_fu_2786_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_1_reg_3807(0) = '1') else 
        bitcast_ln705_1_fu_2782_p1;
    reg_V_fu_2614_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_3756(0) = '1') else 
        bitcast_ln705_fu_2610_p1;
    ret_V_3_fu_3016_p2 <= std_logic_vector(unsigned(ap_const_lv31_2) + unsigned(zext_ln215_reg_3132));
    ret_V_4_fu_493_p2 <= (lsignExt_V_2_reg_3192 or ap_const_lv32_FF000000);
    ret_V_5_fu_512_p2 <= (rsignExt_V_2_reg_3199 or ap_const_lv32_FF000000);
    ret_V_fu_414_p2 <= std_logic_vector(unsigned(zext_ln215_fu_410_p1) + unsigned(ap_const_lv31_4));
    rsignExt_V_1_fu_517_p3 <= 
        ret_V_5_fu_512_p2 when (tmp_10_fu_505_p3(0) = '1') else 
        rsignExt_V_2_reg_3199;
    sel_tmp122_demorgan_fu_2039_p2 <= (icmp_ln571_1_reg_3354 or empty_19_reg_3479);
    sel_tmp123_fu_2043_p3 <= 
        select_ln571_3_fu_2032_p3 when (sel_tmp122_demorgan_fu_2039_p2(0) = '1') else 
        p_Val2_20_reg_3681;
    sel_tmp57_demorgan_fu_1947_p2 <= (icmp_ln571_reg_3294 or empty_16_reg_3416);
    sel_tmp58_fu_1951_p3 <= 
        select_ln571_1_fu_1940_p3 when (sel_tmp57_demorgan_fu_1947_p2(0) = '1') else 
        p_Val2_14_reg_3656;
    select_ln278_1_fu_3069_p3 <= 
        ap_const_lv32_0 when (icmp_ln278_1_reg_3968(0) = '1') else 
        select_ln295_1_fu_3062_p3;
    select_ln278_fu_2878_p3 <= 
        ap_const_lv32_0 when (icmp_ln278_reg_3902(0) = '1') else 
        select_ln295_fu_2871_p3;
    select_ln282_1_fu_2960_p3 <= 
        tmp_9_fu_2903_p3 when (and_ln282_1_fu_2955_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln282_fu_2726_p3 <= 
        tmp_8_fu_2669_p3 when (and_ln282_fu_2721_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln285_1_fu_2895_p3 <= 
        select_ln288_fu_2854_p3 when (and_ln285_1_fu_2890_p2(0) = '1') else 
        select_ln278_fu_2878_p3;
    select_ln285_2_fu_2990_p3 <= 
        lshr_ln286_1_fu_2944_p2 when (and_ln285_2_fu_2984_p2(0) = '1') else 
        select_ln282_1_fu_2960_p3;
    select_ln285_3_fu_3086_p3 <= 
        select_ln288_1_fu_3045_p3 when (and_ln285_3_fu_3081_p2(0) = '1') else 
        select_ln278_1_fu_3069_p3;
    select_ln285_fu_2756_p3 <= 
        lshr_ln286_fu_2710_p2 when (and_ln285_fu_2750_p2(0) = '1') else 
        select_ln282_fu_2726_p3;
    select_ln288_1_fu_3045_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_42_fu_3038_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln288_fu_2854_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_39_fu_2847_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln295_1_fu_3062_p3 <= 
        shl_ln297_1_fu_3053_p2 when (and_ln295_1_reg_4020(0) = '1') else 
        zext_ln285_1_fu_3059_p1;
    select_ln295_fu_2871_p3 <= 
        shl_ln297_fu_2862_p2 when (and_ln295_reg_3948(0) = '1') else 
        zext_ln285_fu_2868_p1;
    select_ln303_1_fu_3109_p3 <= 
        sub_ln461_1_fu_3104_p2 when (p_Result_38_reg_3958(0) = '1') else 
        select_ln285_3_reg_4035;
    select_ln303_fu_3026_p3 <= 
        sub_ln461_fu_3021_p2 when (p_Result_37_reg_3892(0) = '1') else 
        select_ln285_1_reg_3989;
    select_ln340_1_fu_2013_p3 <= 
        ap_const_lv32_7FFFFFFF when (or_ln340_1_fu_1993_p2(0) = '1') else 
        p_Val2_20_reg_3681;
    select_ln340_fu_1921_p3 <= 
        ap_const_lv32_7FFFFFFF when (or_ln340_fu_1901_p2(0) = '1') else 
        p_Val2_14_reg_3656;
    select_ln403_1_fu_1119_p3 <= 
        p_Val2_13_fu_1058_p2 when (and_ln403_1_fu_1113_p2(0) = '1') else 
        select_ln403_fu_1100_p3;
    select_ln403_2_fu_1342_p3 <= 
        p_Val2_19_fu_1300_p2 when (and_ln403_3_fu_1337_p2(0) = '1') else 
        select_ln582_1_fu_1319_p3;
    select_ln403_3_fu_1361_p3 <= 
        p_Val2_19_fu_1300_p2 when (and_ln403_4_fu_1355_p2(0) = '1') else 
        select_ln403_2_fu_1342_p3;
    select_ln403_fu_1100_p3 <= 
        p_Val2_13_fu_1058_p2 when (and_ln403_fu_1095_p2(0) = '1') else 
        select_ln582_fu_1077_p3;
    select_ln557_1_fu_1849_p3 <= 
        empty_20_fu_1817_p2 when (and_ln557_1_fu_1845_p2(0) = '1') else 
        and_ln621_7_fu_1840_p2;
    select_ln557_fu_1659_p3 <= 
        empty_17_fu_1627_p2 when (and_ln557_fu_1655_p2(0) = '1') else 
        and_ln621_3_fu_1650_p2;
    select_ln571_1_fu_1940_p3 <= 
        select_ln571_fu_1928_p3 when (or_ln571_fu_1935_p2(0) = '1') else 
        p_Val2_14_reg_3656;
    select_ln571_2_fu_2020_p3 <= 
        ap_const_lv32_0 when (icmp_ln571_1_reg_3354(0) = '1') else 
        ap_const_lv32_80000000;
    select_ln571_3_fu_2032_p3 <= 
        select_ln571_2_fu_2020_p3 when (or_ln571_1_fu_2027_p2(0) = '1') else 
        p_Val2_20_reg_3681;
    select_ln571_fu_1928_p3 <= 
        ap_const_lv32_0 when (icmp_ln571_reg_3294(0) = '1') else 
        ap_const_lv32_80000000;
    select_ln582_1_fu_1319_p3 <= 
        trunc_ln583_1_reg_3383 when (icmp_ln582_1_fu_1269_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln582_fu_1077_p3 <= 
        trunc_ln583_reg_3323 when (icmp_ln582_fu_1027_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln588_1_fu_933_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_22_fu_925_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln588_fu_802_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_13_fu_794_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln631_1_fu_1460_p3 <= 
        Range2_all_ones_1_fu_1455_p2 when (and_ln631_1_fu_1445_p2(0) = '1') else 
        xor_ln631_1_fu_1440_p2;
    select_ln631_fu_1218_p3 <= 
        Range2_all_ones_fu_1213_p2 when (and_ln631_fu_1203_p2(0) = '1') else 
        xor_ln631_fu_1198_p2;
    select_ln639_1_fu_1571_p3 <= 
        and_ln641_fu_1542_p2 when (and_ln639_fu_1529_p2(0) = '1') else 
        select_ln642_1_fu_1564_p3;
    select_ln639_2_fu_1746_p3 <= 
        Range1_all_ones_2_fu_1723_p2 when (and_ln639_1_fu_1719_p2(0) = '1') else 
        select_ln642_2_fu_1741_p3;
    select_ln639_3_fu_1761_p3 <= 
        and_ln641_1_fu_1732_p2 when (and_ln639_1_fu_1719_p2(0) = '1') else 
        select_ln642_3_fu_1754_p3;
    select_ln639_fu_1556_p3 <= 
        Range1_all_ones_fu_1533_p2 when (and_ln639_fu_1529_p2(0) = '1') else 
        select_ln642_fu_1551_p3;
    select_ln642_1_fu_1564_p3 <= 
        Range1_all_zeros_fu_1537_p2 when (and_ln642_reg_3579(0) = '1') else 
        or_ln645_fu_1547_p2;
    select_ln642_2_fu_1741_p3 <= 
        Range1_all_ones_3_reg_3621 when (and_ln642_1_reg_3644(0) = '1') else 
        xor_ln621_3_reg_3614;
    select_ln642_3_fu_1754_p3 <= 
        Range1_all_zeros_2_fu_1727_p2 when (and_ln642_1_reg_3644(0) = '1') else 
        or_ln645_1_fu_1737_p2;
    select_ln642_fu_1551_p3 <= 
        Range1_all_ones_1_reg_3556 when (and_ln642_reg_3579(0) = '1') else 
        xor_ln621_2_reg_3549;
    select_ln964_1_fu_2569_p3 <= 
        ap_const_lv8_7F when (tmp_36_reg_3867(0) = '1') else 
        ap_const_lv8_7E;
    select_ln964_fu_2475_p3 <= 
        ap_const_lv8_7F when (tmp_32_reg_3842(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln281_1_fu_2910_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_4_reg_3975),24));

        sext_ln281_fu_2676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_reg_3909),24));

        sext_ln294_1_fu_3035_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_5_reg_4005),32));

        sext_ln294_fu_2844_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_3_reg_3933),32));

        sext_ln581_1_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_3377),32));

        sext_ln581_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_3317),32));

        sext_ln591_1_fu_1279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln591_1_fu_1274_p2),32));

        sext_ln591_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln591_fu_1032_p2),32));

        sext_ln618_1_fu_1402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pos1_1_reg_3485),32));

        sext_ln618_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pos1_reg_3422),32));

        sext_ln619_1_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pos2_1_fu_981_p2),32));

        sext_ln619_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pos2_fu_850_p2),32));

    sh_amt_1_fu_730_p3 <= 
        add_ln581_1_fu_718_p2 when (QUAN_INC_1_fu_712_p2(0) = '1') else 
        sub_ln581_1_fu_724_p2;
    sh_amt_2_fu_2657_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_2_fu_2643_p1));
    sh_amt_3_fu_2689_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_2_reg_3909));
    sh_amt_4_fu_2829_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_3_fu_2815_p1));
    sh_amt_5_fu_2923_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_4_reg_3975));
    sh_amt_fu_640_p3 <= 
        add_ln581_fu_628_p2 when (QUAN_INC_fu_622_p2(0) = '1') else 
        sub_ln581_fu_634_p2;
    shl_ln297_1_fu_3053_p2 <= std_logic_vector(shift_left(unsigned(zext_ln283_1_fu_3032_p1),to_integer(unsigned('0' & sext_ln294_1_fu_3035_p1(31-1 downto 0)))));
    shl_ln297_fu_2862_p2 <= std_logic_vector(shift_left(unsigned(zext_ln283_fu_2841_p1),to_integer(unsigned('0' & sext_ln294_fu_2844_p1(31-1 downto 0)))));
    shl_ln604_1_fu_1701_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_1_reg_3383),to_integer(unsigned('0' & sext_ln581_1_reg_3463(31-1 downto 0)))));
    shl_ln604_fu_1511_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_3323),to_integer(unsigned('0' & sext_ln581_reg_3400(31-1 downto 0)))));
    shl_ln958_1_fu_2527_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_5_reg_3812),to_integer(unsigned('0' & sub_ln958_1_fu_2522_p2(31-1 downto 0)))));
    shl_ln958_fu_2337_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_4_reg_3761),to_integer(unsigned('0' & sub_ln958_fu_2332_p2(31-1 downto 0)))));
    stageIndex_V_fu_2081_p2 <= std_logic_vector(unsigned(t_V_reg_309) + unsigned(ap_const_lv3_1));
    sub_ln461_1_fu_3104_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln285_3_reg_4035));
    sub_ln461_fu_3021_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln285_1_reg_3989));
    sub_ln581_1_fu_724_p2 <= std_logic_vector(unsigned(ap_const_lv12_17) - unsigned(F2_1_fu_706_p2));
    sub_ln581_fu_634_p2 <= std_logic_vector(unsigned(ap_const_lv12_17) - unsigned(F2_fu_616_p2));
    sub_ln944_1_fu_2308_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_1_fu_2300_p3));
    sub_ln944_fu_2152_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_fu_2144_p3));
    sub_ln947_1_fu_2393_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_1_reg_3827));
    sub_ln947_fu_2201_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_reg_3776));
    sub_ln958_1_fu_2522_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_1_reg_3820));
    sub_ln958_fu_2332_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_3769));
    sub_ln964_1_fu_2576_p2 <= std_logic_vector(unsigned(ap_const_lv8_9) - unsigned(trunc_ln943_1_reg_3832));
    sub_ln964_fu_2482_p2 <= std_logic_vector(unsigned(ap_const_lv8_9) - unsigned(trunc_ln943_reg_3781));
    tmp185_cast_cast_fu_826_p3 <= 
        ap_const_lv12_2 when (QUAN_INC_reg_3311(0) = '1') else 
        ap_const_lv12_1;
    tmp190_cast_cast_fu_957_p3 <= 
        ap_const_lv12_2 when (QUAN_INC_1_reg_3371(0) = '1') else 
        ap_const_lv12_1;
    tmp_10_fu_505_p3 <= rsignExt_V_2_reg_3199(23 downto 23);
    tmp_12_fu_652_p4 <= sh_amt_fu_640_p3(11 downto 5);
    tmp_13_fu_794_p3 <= bitcast_ln696_fu_790_p1(31 downto 31);
    tmp_15_fu_1063_p3 <= p_Val2_13_fu_1058_p2(31 downto 31);
    tmp_19_fu_1601_p3 <= pos1_reg_3422(11 downto 11);
    tmp_21_fu_742_p4 <= sh_amt_1_fu_730_p3(11 downto 5);
    tmp_22_fu_925_p3 <= bitcast_ln696_2_fu_922_p1(31 downto 31);
    tmp_24_fu_1305_p3 <= p_Val2_19_fu_1300_p2(31 downto 31);
    tmp_28_fu_1791_p3 <= pos1_1_reg_3485(11 downto 11);
    tmp_2_fu_587_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_3251);
    tmp_30_fu_2185_p4 <= lsb_index_fu_2180_p2(31 downto 1);
    tmp_31_fu_2233_p3 <= lsb_index_fu_2180_p2(31 downto 31);
    tmp_34_fu_2377_p4 <= lsb_index_1_fu_2372_p2(31 downto 1);
    tmp_35_fu_2425_p3 <= lsb_index_1_fu_2372_p2(31 downto 31);
    tmp_38_fu_2694_p4 <= sh_amt_3_fu_2689_p2(8 downto 5);
    tmp_39_fu_2847_p3 <= reg_V_reg_3887(31 downto 31);
    tmp_3_fu_677_p3 <= (ap_const_lv1_1 & trunc_ln565_1_reg_3275);
    tmp_41_fu_2928_p4 <= sh_amt_5_fu_2923_p2(8 downto 5);
    tmp_42_fu_3038_p3 <= reg_V_1_reg_3953(31 downto 31);
    tmp_4_fu_486_p3 <= lsignExt_V_2_reg_3192(23 downto 23);
    tmp_5_fu_2493_p3 <= (p_Result_31_reg_3735 & add_ln964_fu_2487_p2);
    tmp_6_fu_2087_p3 <= (t_V_reg_309 & ap_const_lv2_0);
    tmp_7_fu_2587_p3 <= (p_Result_34_reg_3786 & add_ln964_1_fu_2581_p2);
    tmp_8_fu_2669_p3 <= (ap_const_lv1_1 & trunc_ln270_reg_3897);
    tmp_9_fu_2903_p3 <= (ap_const_lv1_1 & trunc_ln270_1_reg_3963);
    tmp_V_2_fu_2174_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_1_fu_232));
    tmp_V_4_fu_2129_p3 <= 
        tmp_V_reg_3741 when (p_Result_31_reg_3735(0) = '1') else 
        p_Val2_s_fu_228;
    tmp_V_5_fu_2285_p3 <= 
        tmp_V_2_reg_3792 when (p_Result_34_reg_3786(0) = '1') else 
        p_Val2_1_fu_232;
    tmp_V_fu_2111_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_s_fu_228));
    trunc_ln132_fu_2117_p1 <= configReg_q0(4 - 1 downto 0);
    trunc_ln262_1_fu_2793_p1 <= reg_V_1_fu_2786_p3(31 - 1 downto 0);
    trunc_ln262_fu_2621_p1 <= reg_V_fu_2614_p3(31 - 1 downto 0);
    trunc_ln270_1_fu_2819_p1 <= reg_V_1_fu_2786_p3(23 - 1 downto 0);
    trunc_ln270_fu_2647_p1 <= reg_V_fu_2614_p3(23 - 1 downto 0);
    trunc_ln556_1_fu_558_p1 <= ireg_V_1_fu_554_p1(63 - 1 downto 0);
    trunc_ln556_fu_528_p1 <= ireg_V_fu_524_p1(63 - 1 downto 0);
    trunc_ln565_1_fu_580_p1 <= ireg_V_1_fu_554_p1(52 - 1 downto 0);
    trunc_ln565_fu_550_p1 <= ireg_V_fu_524_p1(52 - 1 downto 0);
    trunc_ln583_1_fu_738_p1 <= p_Val2_28_fu_694_p3(32 - 1 downto 0);
    trunc_ln583_fu_648_p1 <= p_Val2_27_fu_604_p3(32 - 1 downto 0);
    trunc_ln586_1_fu_918_p1 <= ashr_ln586_1_fu_913_p2(32 - 1 downto 0);
    trunc_ln586_fu_786_p1 <= ashr_ln586_fu_781_p2(32 - 1 downto 0);
    trunc_ln943_1_fu_2318_p1 <= l_1_fu_2300_p3(8 - 1 downto 0);
    trunc_ln943_fu_2162_p1 <= l_fu_2144_p3(8 - 1 downto 0);
    trunc_ln947_1_fu_2314_p1 <= sub_ln944_1_fu_2308_p2(6 - 1 downto 0);
    trunc_ln947_fu_2158_p1 <= sub_ln944_fu_2152_p2(6 - 1 downto 0);
    underflow_1_fu_1988_p2 <= (xor_ln659_1_fu_1983_p2 and select_ln557_1_reg_3688);
    underflow_fu_1896_p2 <= (xor_ln659_fu_1891_p2 and select_ln557_reg_3663);
    xor_ln102_fu_448_p2 <= (lrclk_V_0_data_reg xor ap_const_lv1_1);
    xor_ln107_1_fu_464_p2 <= (or_ln102_fu_443_p2 xor ap_const_lv1_1);
    xor_ln107_fu_453_p2 <= (readyLch xor ap_const_lv1_1);
    xor_ln278_1_fu_2950_p2 <= (icmp_ln278_1_reg_3968 xor ap_const_lv1_1);
    xor_ln278_fu_2716_p2 <= (icmp_ln278_reg_3902 xor ap_const_lv1_1);
    xor_ln282_1_fu_2972_p2 <= (or_ln282_1_fu_2968_p2 xor ap_const_lv1_1);
    xor_ln282_fu_2738_p2 <= (or_ln282_fu_2734_p2 xor ap_const_lv1_1);
    xor_ln284_1_fu_3004_p2 <= (or_ln284_1_fu_2998_p2 xor ap_const_lv1_1);
    xor_ln284_fu_2770_p2 <= (or_ln284_fu_2764_p2 xor ap_const_lv1_1);
    xor_ln285_1_fu_3076_p2 <= (icmp_ln285_1_reg_4000 xor ap_const_lv1_1);
    xor_ln285_fu_2885_p2 <= (icmp_ln285_reg_3928 xor ap_const_lv1_1);
    xor_ln340_1_fu_1998_p2 <= (select_ln557_1_reg_3688 xor ap_const_lv1_1);
    xor_ln340_fu_1906_p2 <= (select_ln557_reg_3663 xor ap_const_lv1_1);
    xor_ln403_1_fu_1350_p2 <= (p_Result_29_reg_3473 xor ap_const_lv1_1);
    xor_ln403_fu_1108_p2 <= (p_Result_25_reg_3410 xor ap_const_lv1_1);
    xor_ln416_1_fu_1313_p2 <= (tmp_24_fu_1305_p3 xor ap_const_lv1_1);
    xor_ln416_fu_1071_p2 <= (tmp_15_fu_1063_p3 xor ap_const_lv1_1);
    xor_ln571_1_fu_2050_p2 <= (icmp_ln571_1_reg_3354 xor ap_const_lv1_1);
    xor_ln571_fu_1958_p2 <= (icmp_ln571_reg_3294 xor ap_const_lv1_1);
    xor_ln582_1_fu_1326_p2 <= (icmp_ln582_1_fu_1269_p2 xor ap_const_lv1_1);
    xor_ln582_fu_1084_p2 <= (icmp_ln582_fu_1027_p2 xor ap_const_lv1_1);
    xor_ln603_1_fu_1390_p2 <= (ap_const_lv1_1 xor and_ln603_4_fu_1385_p2);
    xor_ln603_fu_1148_p2 <= (ap_const_lv1_1 xor and_ln603_1_fu_1143_p2);
    xor_ln621_1_fu_1823_p2 <= (icmp_ln621_1_reg_3607 xor ap_const_lv1_1);
    xor_ln621_2_fu_1168_p2 <= (tmp_17_reg_3429 xor ap_const_lv1_1);
    xor_ln621_3_fu_1410_p2 <= (tmp_26_reg_3492 xor ap_const_lv1_1);
    xor_ln621_fu_1633_p2 <= (icmp_ln621_reg_3542 xor ap_const_lv1_1);
    xor_ln631_1_fu_1440_p2 <= (tmp_27_reg_3498 xor ap_const_lv1_1);
    xor_ln631_fu_1198_p2 <= (tmp_18_reg_3435 xor ap_const_lv1_1);
    xor_ln639_2_fu_1236_p2 <= (icmp_ln631_reg_3440 xor ap_const_lv1_1);
    xor_ln639_fu_1478_p2 <= (icmp_ln631_1_reg_3503 xor ap_const_lv1_1);
    xor_ln652_1_fu_1586_p2 <= (select_ln631_reg_3563 xor ap_const_lv1_1);
    xor_ln652_3_fu_1776_p2 <= (select_ln631_1_reg_3628 xor ap_const_lv1_1);
    xor_ln652_4_fu_1251_p2 <= (ap_const_lv1_1 xor and_ln403_fu_1095_p2);
    xor_ln652_5_fu_1493_p2 <= (ap_const_lv1_1 xor and_ln403_3_fu_1337_p2);
    xor_ln658_1_fu_1684_p2 <= (p_Result_23_reg_3237 xor ap_const_lv1_1);
    xor_ln658_2_fu_1667_p2 <= (deleted_zeros_fu_1579_p3 xor ap_const_lv1_1);
    xor_ln658_3_fu_1874_p2 <= (p_Result_27_reg_3261 xor ap_const_lv1_1);
    xor_ln658_fu_1857_p2 <= (deleted_zeros_1_fu_1769_p3 xor ap_const_lv1_1);
    xor_ln659_1_fu_1983_p2 <= (ap_const_lv1_1 xor and_ln659_2_reg_3700);
    xor_ln659_fu_1891_p2 <= (ap_const_lv1_1 xor and_ln659_reg_3675);
    xor_ln949_1_fu_2433_p2 <= (tmp_35_fu_2425_p3 xor ap_const_lv1_1);
    xor_ln949_fu_2241_p2 <= (tmp_31_fu_2233_p3 xor ap_const_lv1_1);
    zext_ln129_fu_2095_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_2087_p3),64));
    zext_ln215_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_fu_400_p4),31));
    zext_ln283_1_fu_3032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_3995),32));
    zext_ln283_fu_2841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_3923),32));
    zext_ln285_1_fu_3059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln285_2_reg_4015),32));
    zext_ln285_fu_2868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln285_reg_3943),32));
    zext_ln415_1_fu_1296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_1_fu_1290_p3),32));
    zext_ln415_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_fu_1048_p3),32));
    zext_ln461_1_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_1_reg_3270),12));
    zext_ln461_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_3246),12));
    zext_ln544_1_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_reg_3127),64));
    zext_ln544_2_fu_3094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_3_reg_4025),64));
    zext_ln544_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_3137),64));
    zext_ln586_1_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_1_fu_901_p1),54));
    zext_ln586_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_769_p1),54));
    zext_ln623_1_fu_1415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln618_1_fu_1402_p1),54));
    zext_ln623_fu_1173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln618_fu_1160_p1),54));
    zext_ln635_1_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln619_1_fu_986_p1),54));
    zext_ln635_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln619_fu_855_p1),54));
    zext_ln947_1_fu_2398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_1_fu_2393_p2),32));
    zext_ln947_fu_2206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_2201_p2),32));
end behav;
