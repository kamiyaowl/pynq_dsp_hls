-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynq_dsp_hls is
generic (
    C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_EXTMEMPTR_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_EXTMEMPTR_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_EXTMEMPTR_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_EXTMEMPTR_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_EXTMEMPTR_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_EXTMEMPTR_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    lrclk : IN STD_LOGIC;
    m_axi_physMemPtr_V_AWVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_AWREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_physMemPtr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_WREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH/8-1 downto 0);
    m_axi_physMemPtr_V_WLAST : OUT STD_LOGIC;
    m_axi_physMemPtr_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_ARREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_physMemPtr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RVALID : IN STD_LOGIC;
    m_axi_physMemPtr_V_RREADY : OUT STD_LOGIC;
    m_axi_physMemPtr_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RLAST : IN STD_LOGIC;
    m_axi_physMemPtr_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_BVALID : IN STD_LOGIC;
    m_axi_physMemPtr_V_BREADY : OUT STD_LOGIC;
    m_axi_physMemPtr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_AWVALID : OUT STD_LOGIC;
    m_axi_extMemPtr_V_AWREADY : IN STD_LOGIC;
    m_axi_extMemPtr_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_extMemPtr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_AWUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_WVALID : OUT STD_LOGIC;
    m_axi_extMemPtr_V_WREADY : IN STD_LOGIC;
    m_axi_extMemPtr_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_DATA_WIDTH/8-1 downto 0);
    m_axi_extMemPtr_V_WLAST : OUT STD_LOGIC;
    m_axi_extMemPtr_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_WUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_ARVALID : OUT STD_LOGIC;
    m_axi_extMemPtr_V_ARREADY : IN STD_LOGIC;
    m_axi_extMemPtr_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_extMemPtr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ARUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_RVALID : IN STD_LOGIC;
    m_axi_extMemPtr_V_RREADY : OUT STD_LOGIC;
    m_axi_extMemPtr_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_RLAST : IN STD_LOGIC;
    m_axi_extMemPtr_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_RUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_BVALID : IN STD_LOGIC;
    m_axi_extMemPtr_V_BREADY : OUT STD_LOGIC;
    m_axi_extMemPtr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pynq_dsp_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pynq_dsp_hls,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=45,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=34,HLS_SYN_FF=10037,HLS_SYN_LUT=15645,HLS_VERSION=2019_1_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (86 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (86 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (86 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (86 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (86 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (86 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (86 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (86 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (86 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (86 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (86 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (86 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_4AFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "01001010111111111111111111111110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv57_0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv9_18 : STD_LOGIC_VECTOR (8 downto 0) := "000011000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal lrclk_0_data_reg : STD_LOGIC := '0';
    signal lrclk_0_vld_reg : STD_LOGIC := '0';
    signal lrclk_0_ack_out : STD_LOGIC;
    signal basePhysAddr_V : STD_LOGIC_VECTOR (31 downto 0);
    signal basePhysAddr_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal basePhysAddr_V_0_vld_reg : STD_LOGIC := '0';
    signal basePhysAddr_V_0_ack_out : STD_LOGIC;
    signal monitorSrcL_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal monitorSrcL_1_vld_reg : STD_LOGIC := '0';
    signal monitorSrcL_1_vld_in : STD_LOGIC;
    signal monitorSrcR_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal monitorSrcR_1_vld_reg : STD_LOGIC := '0';
    signal monitorSrcR_1_vld_in : STD_LOGIC;
    signal monitorDstL_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal monitorDstL_1_vld_reg : STD_LOGIC := '0';
    signal monitorDstL_1_vld_in : STD_LOGIC;
    signal monitorDstR_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal monitorDstR_1_vld_reg : STD_LOGIC := '0';
    signal monitorDstR_1_vld_in : STD_LOGIC;
    signal counter_i : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal counter_0_vld_reg : STD_LOGIC := '0';
    signal counter_0_ack_out : STD_LOGIC;
    signal counter_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal counter_1_vld_reg : STD_LOGIC := '0';
    signal counter_1_vld_in : STD_LOGIC;
    signal numOfStage_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal numOfStage_1_vld_reg : STD_LOGIC := '0';
    signal numOfStage_1_vld_in : STD_LOGIC;
    signal configSizePerStage_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal configSizePerStage_1_vld_reg : STD_LOGIC := '0';
    signal configSizePerStage_1_vld_in : STD_LOGIC;
    signal configReg_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_ce0 : STD_LOGIC;
    signal configReg_we0 : STD_LOGIC;
    signal configReg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readyRch : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal readyLch : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal physMemPtr_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal physMemPtr_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln761_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln147_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal physMemPtr_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal physMemPtr_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal physMemPtr_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal physMemPtr_V_AWVALID : STD_LOGIC;
    signal physMemPtr_V_AWREADY : STD_LOGIC;
    signal physMemPtr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_WVALID : STD_LOGIC;
    signal physMemPtr_V_WREADY : STD_LOGIC;
    signal physMemPtr_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_ARVALID : STD_LOGIC;
    signal physMemPtr_V_ARREADY : STD_LOGIC;
    signal physMemPtr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_RVALID : STD_LOGIC;
    signal physMemPtr_V_RREADY : STD_LOGIC;
    signal physMemPtr_V_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_RLAST : STD_LOGIC;
    signal physMemPtr_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal physMemPtr_V_BVALID : STD_LOGIC;
    signal physMemPtr_V_BREADY : STD_LOGIC;
    signal physMemPtr_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal physMemPtr_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal extMemPtr_V_AWVALID : STD_LOGIC;
    signal extMemPtr_V_AWREADY : STD_LOGIC;
    signal extMemPtr_V_WVALID : STD_LOGIC;
    signal extMemPtr_V_WREADY : STD_LOGIC;
    signal extMemPtr_V_ARVALID : STD_LOGIC;
    signal extMemPtr_V_ARREADY : STD_LOGIC;
    signal extMemPtr_V_RVALID : STD_LOGIC;
    signal extMemPtr_V_RREADY : STD_LOGIC;
    signal extMemPtr_V_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal extMemPtr_V_RLAST : STD_LOGIC;
    signal extMemPtr_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal extMemPtr_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal extMemPtr_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal extMemPtr_V_BVALID : STD_LOGIC;
    signal extMemPtr_V_BREADY : STD_LOGIC;
    signal extMemPtr_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal extMemPtr_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal extMemPtr_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal icmp_ln887_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal grp_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal and_ln24_1_reg_1914 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_fu_414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln31_1_reg_1920 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_V_fu_521_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_reg_1716 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln215_fu_531_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln215_reg_1721 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_fu_535_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_reg_1726 : STD_LOGIC_VECTOR (30 downto 0);
    signal status_V_reg_1737 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln142_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op151_readreq_state11 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal srcL_V_fu_607_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal srcL_V_reg_1777 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln156_fu_623_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal srcR_V_fu_632_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal srcR_V_reg_1787 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1802 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1807 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal floatSrcL_reg_1812 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal floatSrcR_reg_1818 : STD_LOGIC_VECTOR (31 downto 0);
    signal stageIndex_V_fu_658_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal stageIndex_V_reg_1827 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_664_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_reg_1832 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal configReg_addr_2_reg_1848 : STD_LOGIC_VECTOR (5 downto 0);
    signal id_fu_705_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal id_reg_1853 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln368_3_fu_727_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln368_3_reg_1857 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal or_ln24_1_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_1_reg_1862 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_load_2_reg_1868 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal x_assign_4_load_2_reg_1874 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresh_fu_754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresh_reg_1880 : STD_LOGIC_VECTOR (31 downto 0);
    signal absL_fu_780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal absL_reg_1890 : STD_LOGIC_VECTOR (31 downto 0);
    signal absR_fu_805_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal absR_reg_1896 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln24_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_reg_1902 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_reg_1908 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_1_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal and_ln31_1_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln368_4_fu_886_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln368_4_reg_1926 : STD_LOGIC_VECTOR (30 downto 0);
    signal ratio_fu_897_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i1_reg_1937 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_1942 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1947 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln368_fu_999_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln368_reg_1952 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal or_ln257_1_fu_1013_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_1_reg_1957 : STD_LOGIC_VECTOR (0 downto 0);
    signal thresh_1_fu_1026_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresh_1_reg_1963 : STD_LOGIC_VECTOR (31 downto 0);
    signal absL_1_fu_1052_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal absL_1_reg_1971 : STD_LOGIC_VECTOR (31 downto 0);
    signal absR_1_fu_1077_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal absR_1_reg_1977 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln257_fu_1104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_reg_1983 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_2_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_2_reg_1989 : STD_LOGIC_VECTOR (0 downto 0);
    signal monitorDstL_1_fu_1148_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal monitorDstL_1_reg_1995 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal monitorDstR_1_fu_1164_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal monitorDstR_1_reg_2001 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_2007 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_2012 : STD_LOGIC_VECTOR (0 downto 0);
    signal floatDstR_reg_2017 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal reg_V_fu_1228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_reg_2023 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_18_reg_2028 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_fu_1258_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln270_reg_2033 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln278_fu_1262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_2038 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_1268_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_reg_2045 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln282_fu_1274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_reg_2053 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1280_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_reg_2059 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal icmp_ln285_fu_1295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_2065 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1_fu_1300_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_1_reg_2070 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_fu_1327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_reg_2075 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_1339_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_reg_2080 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_fu_1359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_reg_2085 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_V_1_fu_1365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_1_reg_2090 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_19_reg_2095 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_1_fu_1394_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln270_1_reg_2100 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln278_1_fu_1398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_1_reg_2105 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_2_fu_1404_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_2_reg_2112 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln282_1_fu_1410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_1_reg_2120 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln282_fu_1484_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_reg_2126 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal tmp_6_fu_1491_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_reg_2132 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln285_1_fu_1506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_1_reg_2138 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_3_fu_1511_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_3_reg_2143 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_1_fu_1538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_1_reg_2148 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_2_fu_1550_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_2_reg_2153 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_1_fu_1570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_1_reg_2158 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_1576_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_1_reg_2163 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln303_fu_1586_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln303_reg_2168 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_1_fu_1660_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_1_reg_2173 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln303_1_fu_1682_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln303_1_reg_2186 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_effect_delay_fu_398_ap_start : STD_LOGIC;
    signal grp_effect_delay_fu_398_ap_done : STD_LOGIC;
    signal grp_effect_delay_fu_398_ap_idle : STD_LOGIC;
    signal grp_effect_delay_fu_398_ap_ready : STD_LOGIC;
    signal grp_effect_delay_fu_398_config_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_effect_delay_fu_398_config_r_ce0 : STD_LOGIC;
    signal grp_effect_delay_fu_398_config_r_we0 : STD_LOGIC;
    signal grp_effect_delay_fu_398_config_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWVALID : STD_LOGIC;
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_WVALID : STD_LOGIC;
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_WLAST : STD_LOGIC;
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARVALID : STD_LOGIC;
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_RREADY : STD_LOGIC;
    signal grp_effect_delay_fu_398_m_axi_extMemPtr_V_BREADY : STD_LOGIC;
    signal grp_effect_delay_fu_398_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_398_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_reg_339 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_phi_mux_readyRch_flag_1_phi_fu_356_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyRch_flag_1_reg_351 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyRch_new_1_reg_366 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_readyLch_flag_1_phi_fu_388_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyLch_flag_1_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_398_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal zext_ln172_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_682_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_696_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_1667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln214_fu_1688_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln214_1_fu_1692_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal monitorSrcL_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal monitorSrcR_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal monitorDstL_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal monitorDstR_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal counter_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal numOfStage_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal configSizePerStage_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state87 : BOOLEAN;
    signal x_assign_fu_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_r_1_fu_983_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_r_fu_1211_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal x_assign_4_fu_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_l_1_fu_940_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_l_fu_1187_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_410_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal grp_fu_414_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_418_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_437_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_440_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal grp_fu_447_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_475_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln142_fu_564_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln142_fu_569_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln147_fu_580_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln147_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln142_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln147_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln147_1_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln156_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln156_fu_617_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln4_fu_677_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln18_fu_691_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln31_fu_731_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln24_3_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_fu_747_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_fu_760_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_5_fu_764_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_16_fu_772_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_10_fu_785_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_6_fu_789_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_17_fu_797_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_810_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln24_fu_768_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln24_1_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_838_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_1_fu_793_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln31_1_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_890_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_fu_907_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln28_fu_911_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln28_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_1_fu_917_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_932_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln35_fu_950_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln35_fu_954_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln35_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln31_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_1_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_1_fu_960_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln35_fu_975_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln257_fu_1003_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_3_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_1019_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_1032_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_1_fu_1036_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_12_fu_1044_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_1057_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_2_fu_1061_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_13_fu_1069_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1082_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln257_1_fu_1040_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_1_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln257_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1110_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln257_2_fu_1065_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_5_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln257_4_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_1_fu_1142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_2_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_3_fu_1158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_fu_1174_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln11_fu_1177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln11_fu_1170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_1_fu_1183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln12_fu_1198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln12_fu_1201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln12_fu_1194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln12_1_fu_1207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_1244_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln262_fu_1232_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_fu_1254_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln281_fu_1287_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln282_fu_1317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_1290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_1321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_1333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_fu_1311_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_fu_1347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_fu_1305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_1353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_1380_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln262_1_fu_1368_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_1_fu_1390_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_1419_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln294_fu_1416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294cast_fu_1434_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln297_fu_1438_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln295_fu_1443_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln285_fu_1456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_1_fu_1461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_1426_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln278_fu_1449_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln278_fu_1474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_1479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_1_fu_1466_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln281_1_fu_1498_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln282_1_fu_1528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_fu_1501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_1_fu_1532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_2_fu_1544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_1_fu_1522_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_1_fu_1558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_1_fu_1516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_1_fu_1564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln461_fu_1581_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_1595_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln294_1_fu_1592_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_1cast_fu_1610_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln297_1_fu_1614_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln295_1_fu_1619_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln285_1_fu_1632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_3_fu_1637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_1_fu_1602_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln278_1_fu_1625_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln278_1_fu_1650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_1_fu_1655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_3_fu_1642_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln461_1_fu_1677_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_410_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_414_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (86 downto 0);

    component effect_delay IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inData_l : IN STD_LOGIC_VECTOR (31 downto 0);
        inData_r : IN STD_LOGIC_VECTOR (31 downto 0);
        config_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        config_r_ce0 : OUT STD_LOGIC;
        config_r_we0 : OUT STD_LOGIC;
        config_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        config_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        config_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_AWVALID : OUT STD_LOGIC;
        m_axi_extMemPtr_V_AWREADY : IN STD_LOGIC;
        m_axi_extMemPtr_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_WVALID : OUT STD_LOGIC;
        m_axi_extMemPtr_V_WREADY : IN STD_LOGIC;
        m_axi_extMemPtr_V_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_WLAST : OUT STD_LOGIC;
        m_axi_extMemPtr_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_ARVALID : OUT STD_LOGIC;
        m_axi_extMemPtr_V_ARREADY : IN STD_LOGIC;
        m_axi_extMemPtr_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_RVALID : IN STD_LOGIC;
        m_axi_extMemPtr_V_RREADY : OUT STD_LOGIC;
        m_axi_extMemPtr_V_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_RLAST : IN STD_LOGIC;
        m_axi_extMemPtr_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_BVALID : IN STD_LOGIC;
        m_axi_extMemPtr_V_BREADY : OUT STD_LOGIC;
        m_axi_extMemPtr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_faddfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fdivg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_sitohbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fcmpeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pynq_dsp_hls_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        basePhysAddr_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        monitorSrcL : IN STD_LOGIC_VECTOR (31 downto 0);
        monitorSrcL_ap_vld : IN STD_LOGIC;
        monitorSrcR : IN STD_LOGIC_VECTOR (31 downto 0);
        monitorSrcR_ap_vld : IN STD_LOGIC;
        monitorDstL : IN STD_LOGIC_VECTOR (31 downto 0);
        monitorDstL_ap_vld : IN STD_LOGIC;
        monitorDstR : IN STD_LOGIC_VECTOR (31 downto 0);
        monitorDstR_ap_vld : IN STD_LOGIC;
        counter_o : IN STD_LOGIC_VECTOR (31 downto 0);
        counter_o_ap_vld : IN STD_LOGIC;
        counter_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        numOfStage : IN STD_LOGIC_VECTOR (31 downto 0);
        numOfStage_ap_vld : IN STD_LOGIC;
        configSizePerStage : IN STD_LOGIC_VECTOR (31 downto 0);
        configSizePerStage_ap_vld : IN STD_LOGIC;
        configReg_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        configReg_ce0 : IN STD_LOGIC;
        configReg_we0 : IN STD_LOGIC;
        configReg_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        configReg_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_physMemPtr_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pynq_dsp_hls_extMemPtr_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    pynq_dsp_hls_AXILiteS_s_axi_U : component pynq_dsp_hls_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        basePhysAddr_V => basePhysAddr_V,
        monitorSrcL => monitorSrcL_1_data_reg,
        monitorSrcL_ap_vld => monitorSrcL_1_vld_reg,
        monitorSrcR => monitorSrcR_1_data_reg,
        monitorSrcR_ap_vld => monitorSrcR_1_vld_reg,
        monitorDstL => monitorDstL_1_data_reg,
        monitorDstL_ap_vld => monitorDstL_1_vld_reg,
        monitorDstR => monitorDstR_1_data_reg,
        monitorDstR_ap_vld => monitorDstR_1_vld_reg,
        counter_o => counter_1_data_reg,
        counter_o_ap_vld => counter_1_vld_reg,
        counter_i => counter_i,
        numOfStage => numOfStage_1_data_reg,
        numOfStage_ap_vld => numOfStage_1_vld_reg,
        configSizePerStage => configSizePerStage_1_data_reg,
        configSizePerStage_ap_vld => configSizePerStage_1_vld_reg,
        configReg_address0 => configReg_address0,
        configReg_ce0 => configReg_ce0,
        configReg_we0 => configReg_we0,
        configReg_d0 => grp_effect_delay_fu_398_config_r_d0,
        configReg_q0 => configReg_q0);

    pynq_dsp_hls_physMemPtr_V_m_axi_U : component pynq_dsp_hls_physMemPtr_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PHYSMEMPTR_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_PHYSMEMPTR_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_PHYSMEMPTR_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PHYSMEMPTR_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PHYSMEMPTR_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_physMemPtr_V_AWVALID,
        AWREADY => m_axi_physMemPtr_V_AWREADY,
        AWADDR => m_axi_physMemPtr_V_AWADDR,
        AWID => m_axi_physMemPtr_V_AWID,
        AWLEN => m_axi_physMemPtr_V_AWLEN,
        AWSIZE => m_axi_physMemPtr_V_AWSIZE,
        AWBURST => m_axi_physMemPtr_V_AWBURST,
        AWLOCK => m_axi_physMemPtr_V_AWLOCK,
        AWCACHE => m_axi_physMemPtr_V_AWCACHE,
        AWPROT => m_axi_physMemPtr_V_AWPROT,
        AWQOS => m_axi_physMemPtr_V_AWQOS,
        AWREGION => m_axi_physMemPtr_V_AWREGION,
        AWUSER => m_axi_physMemPtr_V_AWUSER,
        WVALID => m_axi_physMemPtr_V_WVALID,
        WREADY => m_axi_physMemPtr_V_WREADY,
        WDATA => m_axi_physMemPtr_V_WDATA,
        WSTRB => m_axi_physMemPtr_V_WSTRB,
        WLAST => m_axi_physMemPtr_V_WLAST,
        WID => m_axi_physMemPtr_V_WID,
        WUSER => m_axi_physMemPtr_V_WUSER,
        ARVALID => m_axi_physMemPtr_V_ARVALID,
        ARREADY => m_axi_physMemPtr_V_ARREADY,
        ARADDR => m_axi_physMemPtr_V_ARADDR,
        ARID => m_axi_physMemPtr_V_ARID,
        ARLEN => m_axi_physMemPtr_V_ARLEN,
        ARSIZE => m_axi_physMemPtr_V_ARSIZE,
        ARBURST => m_axi_physMemPtr_V_ARBURST,
        ARLOCK => m_axi_physMemPtr_V_ARLOCK,
        ARCACHE => m_axi_physMemPtr_V_ARCACHE,
        ARPROT => m_axi_physMemPtr_V_ARPROT,
        ARQOS => m_axi_physMemPtr_V_ARQOS,
        ARREGION => m_axi_physMemPtr_V_ARREGION,
        ARUSER => m_axi_physMemPtr_V_ARUSER,
        RVALID => m_axi_physMemPtr_V_RVALID,
        RREADY => m_axi_physMemPtr_V_RREADY,
        RDATA => m_axi_physMemPtr_V_RDATA,
        RLAST => m_axi_physMemPtr_V_RLAST,
        RID => m_axi_physMemPtr_V_RID,
        RUSER => m_axi_physMemPtr_V_RUSER,
        RRESP => m_axi_physMemPtr_V_RRESP,
        BVALID => m_axi_physMemPtr_V_BVALID,
        BREADY => m_axi_physMemPtr_V_BREADY,
        BRESP => m_axi_physMemPtr_V_BRESP,
        BID => m_axi_physMemPtr_V_BID,
        BUSER => m_axi_physMemPtr_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => physMemPtr_V_ARVALID,
        I_ARREADY => physMemPtr_V_ARREADY,
        I_ARADDR => physMemPtr_V_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => physMemPtr_V_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => physMemPtr_V_RVALID,
        I_RREADY => physMemPtr_V_RREADY,
        I_RDATA => physMemPtr_V_RDATA,
        I_RID => physMemPtr_V_RID,
        I_RUSER => physMemPtr_V_RUSER,
        I_RRESP => physMemPtr_V_RRESP,
        I_RLAST => physMemPtr_V_RLAST,
        I_AWVALID => physMemPtr_V_AWVALID,
        I_AWREADY => physMemPtr_V_AWREADY,
        I_AWADDR => physMemPtr_V_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_2,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => physMemPtr_V_WVALID,
        I_WREADY => physMemPtr_V_WREADY,
        I_WDATA => physMemPtr_V_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => physMemPtr_V_BVALID,
        I_BREADY => physMemPtr_V_BREADY,
        I_BRESP => physMemPtr_V_BRESP,
        I_BID => physMemPtr_V_BID,
        I_BUSER => physMemPtr_V_BUSER);

    pynq_dsp_hls_extMemPtr_V_m_axi_U : component pynq_dsp_hls_extMemPtr_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_EXTMEMPTR_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_EXTMEMPTR_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_EXTMEMPTR_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_EXTMEMPTR_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_EXTMEMPTR_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_EXTMEMPTR_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_EXTMEMPTR_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_extMemPtr_V_AWVALID,
        AWREADY => m_axi_extMemPtr_V_AWREADY,
        AWADDR => m_axi_extMemPtr_V_AWADDR,
        AWID => m_axi_extMemPtr_V_AWID,
        AWLEN => m_axi_extMemPtr_V_AWLEN,
        AWSIZE => m_axi_extMemPtr_V_AWSIZE,
        AWBURST => m_axi_extMemPtr_V_AWBURST,
        AWLOCK => m_axi_extMemPtr_V_AWLOCK,
        AWCACHE => m_axi_extMemPtr_V_AWCACHE,
        AWPROT => m_axi_extMemPtr_V_AWPROT,
        AWQOS => m_axi_extMemPtr_V_AWQOS,
        AWREGION => m_axi_extMemPtr_V_AWREGION,
        AWUSER => m_axi_extMemPtr_V_AWUSER,
        WVALID => m_axi_extMemPtr_V_WVALID,
        WREADY => m_axi_extMemPtr_V_WREADY,
        WDATA => m_axi_extMemPtr_V_WDATA,
        WSTRB => m_axi_extMemPtr_V_WSTRB,
        WLAST => m_axi_extMemPtr_V_WLAST,
        WID => m_axi_extMemPtr_V_WID,
        WUSER => m_axi_extMemPtr_V_WUSER,
        ARVALID => m_axi_extMemPtr_V_ARVALID,
        ARREADY => m_axi_extMemPtr_V_ARREADY,
        ARADDR => m_axi_extMemPtr_V_ARADDR,
        ARID => m_axi_extMemPtr_V_ARID,
        ARLEN => m_axi_extMemPtr_V_ARLEN,
        ARSIZE => m_axi_extMemPtr_V_ARSIZE,
        ARBURST => m_axi_extMemPtr_V_ARBURST,
        ARLOCK => m_axi_extMemPtr_V_ARLOCK,
        ARCACHE => m_axi_extMemPtr_V_ARCACHE,
        ARPROT => m_axi_extMemPtr_V_ARPROT,
        ARQOS => m_axi_extMemPtr_V_ARQOS,
        ARREGION => m_axi_extMemPtr_V_ARREGION,
        ARUSER => m_axi_extMemPtr_V_ARUSER,
        RVALID => m_axi_extMemPtr_V_RVALID,
        RREADY => m_axi_extMemPtr_V_RREADY,
        RDATA => m_axi_extMemPtr_V_RDATA,
        RLAST => m_axi_extMemPtr_V_RLAST,
        RID => m_axi_extMemPtr_V_RID,
        RUSER => m_axi_extMemPtr_V_RUSER,
        RRESP => m_axi_extMemPtr_V_RRESP,
        BVALID => m_axi_extMemPtr_V_BVALID,
        BREADY => m_axi_extMemPtr_V_BREADY,
        BRESP => m_axi_extMemPtr_V_BRESP,
        BID => m_axi_extMemPtr_V_BID,
        BUSER => m_axi_extMemPtr_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => extMemPtr_V_ARVALID,
        I_ARREADY => extMemPtr_V_ARREADY,
        I_ARADDR => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARADDR,
        I_ARID => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARID,
        I_ARLEN => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARLEN,
        I_ARSIZE => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARSIZE,
        I_ARLOCK => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARLOCK,
        I_ARCACHE => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARCACHE,
        I_ARQOS => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARQOS,
        I_ARPROT => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARPROT,
        I_ARUSER => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARUSER,
        I_ARBURST => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARBURST,
        I_ARREGION => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARREGION,
        I_RVALID => extMemPtr_V_RVALID,
        I_RREADY => extMemPtr_V_RREADY,
        I_RDATA => extMemPtr_V_RDATA,
        I_RID => extMemPtr_V_RID,
        I_RUSER => extMemPtr_V_RUSER,
        I_RRESP => extMemPtr_V_RRESP,
        I_RLAST => extMemPtr_V_RLAST,
        I_AWVALID => extMemPtr_V_AWVALID,
        I_AWREADY => extMemPtr_V_AWREADY,
        I_AWADDR => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWADDR,
        I_AWID => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWID,
        I_AWLEN => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWLEN,
        I_AWSIZE => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWSIZE,
        I_AWLOCK => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWLOCK,
        I_AWCACHE => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWCACHE,
        I_AWQOS => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWQOS,
        I_AWPROT => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWPROT,
        I_AWUSER => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWUSER,
        I_AWBURST => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWBURST,
        I_AWREGION => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWREGION,
        I_WVALID => extMemPtr_V_WVALID,
        I_WREADY => extMemPtr_V_WREADY,
        I_WDATA => grp_effect_delay_fu_398_m_axi_extMemPtr_V_WDATA,
        I_WID => grp_effect_delay_fu_398_m_axi_extMemPtr_V_WID,
        I_WUSER => grp_effect_delay_fu_398_m_axi_extMemPtr_V_WUSER,
        I_WLAST => grp_effect_delay_fu_398_m_axi_extMemPtr_V_WLAST,
        I_WSTRB => grp_effect_delay_fu_398_m_axi_extMemPtr_V_WSTRB,
        I_BVALID => extMemPtr_V_BVALID,
        I_BREADY => extMemPtr_V_BREADY,
        I_BRESP => extMemPtr_V_BRESP,
        I_BID => extMemPtr_V_BID,
        I_BUSER => extMemPtr_V_BUSER);

    grp_effect_delay_fu_398 : component effect_delay
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_effect_delay_fu_398_ap_start,
        ap_done => grp_effect_delay_fu_398_ap_done,
        ap_idle => grp_effect_delay_fu_398_ap_idle,
        ap_ready => grp_effect_delay_fu_398_ap_ready,
        inData_l => reg_491,
        inData_r => reg_498,
        config_r_address0 => grp_effect_delay_fu_398_config_r_address0,
        config_r_ce0 => grp_effect_delay_fu_398_config_r_ce0,
        config_r_we0 => grp_effect_delay_fu_398_config_r_we0,
        config_r_d0 => grp_effect_delay_fu_398_config_r_d0,
        config_r_q0 => configReg_q0,
        config_offset => t_V_reg_339,
        m_axi_extMemPtr_V_AWVALID => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWVALID,
        m_axi_extMemPtr_V_AWREADY => extMemPtr_V_AWREADY,
        m_axi_extMemPtr_V_AWADDR => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWADDR,
        m_axi_extMemPtr_V_AWID => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWID,
        m_axi_extMemPtr_V_AWLEN => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWLEN,
        m_axi_extMemPtr_V_AWSIZE => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWSIZE,
        m_axi_extMemPtr_V_AWBURST => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWBURST,
        m_axi_extMemPtr_V_AWLOCK => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWLOCK,
        m_axi_extMemPtr_V_AWCACHE => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWCACHE,
        m_axi_extMemPtr_V_AWPROT => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWPROT,
        m_axi_extMemPtr_V_AWQOS => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWQOS,
        m_axi_extMemPtr_V_AWREGION => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWREGION,
        m_axi_extMemPtr_V_AWUSER => grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWUSER,
        m_axi_extMemPtr_V_WVALID => grp_effect_delay_fu_398_m_axi_extMemPtr_V_WVALID,
        m_axi_extMemPtr_V_WREADY => extMemPtr_V_WREADY,
        m_axi_extMemPtr_V_WDATA => grp_effect_delay_fu_398_m_axi_extMemPtr_V_WDATA,
        m_axi_extMemPtr_V_WSTRB => grp_effect_delay_fu_398_m_axi_extMemPtr_V_WSTRB,
        m_axi_extMemPtr_V_WLAST => grp_effect_delay_fu_398_m_axi_extMemPtr_V_WLAST,
        m_axi_extMemPtr_V_WID => grp_effect_delay_fu_398_m_axi_extMemPtr_V_WID,
        m_axi_extMemPtr_V_WUSER => grp_effect_delay_fu_398_m_axi_extMemPtr_V_WUSER,
        m_axi_extMemPtr_V_ARVALID => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARVALID,
        m_axi_extMemPtr_V_ARREADY => extMemPtr_V_ARREADY,
        m_axi_extMemPtr_V_ARADDR => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARADDR,
        m_axi_extMemPtr_V_ARID => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARID,
        m_axi_extMemPtr_V_ARLEN => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARLEN,
        m_axi_extMemPtr_V_ARSIZE => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARSIZE,
        m_axi_extMemPtr_V_ARBURST => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARBURST,
        m_axi_extMemPtr_V_ARLOCK => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARLOCK,
        m_axi_extMemPtr_V_ARCACHE => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARCACHE,
        m_axi_extMemPtr_V_ARPROT => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARPROT,
        m_axi_extMemPtr_V_ARQOS => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARQOS,
        m_axi_extMemPtr_V_ARREGION => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARREGION,
        m_axi_extMemPtr_V_ARUSER => grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARUSER,
        m_axi_extMemPtr_V_RVALID => extMemPtr_V_RVALID,
        m_axi_extMemPtr_V_RREADY => grp_effect_delay_fu_398_m_axi_extMemPtr_V_RREADY,
        m_axi_extMemPtr_V_RDATA => extMemPtr_V_RDATA,
        m_axi_extMemPtr_V_RLAST => extMemPtr_V_RLAST,
        m_axi_extMemPtr_V_RID => extMemPtr_V_RID,
        m_axi_extMemPtr_V_RUSER => extMemPtr_V_RUSER,
        m_axi_extMemPtr_V_RRESP => extMemPtr_V_RRESP,
        m_axi_extMemPtr_V_BVALID => extMemPtr_V_BVALID,
        m_axi_extMemPtr_V_BREADY => grp_effect_delay_fu_398_m_axi_extMemPtr_V_BREADY,
        m_axi_extMemPtr_V_BRESP => extMemPtr_V_BRESP,
        m_axi_extMemPtr_V_BID => extMemPtr_V_BID,
        m_axi_extMemPtr_V_BUSER => extMemPtr_V_BUSER,
        ap_return_0 => grp_effect_delay_fu_398_ap_return_0,
        ap_return_1 => grp_effect_delay_fu_398_ap_return_1);

    pynq_dsp_hls_faddfYi_U21 : component pynq_dsp_hls_faddfYi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_410_p0,
        din1 => grp_fu_410_p1,
        opcode => grp_fu_410_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_410_p2);

    pynq_dsp_hls_faddfYi_U22 : component pynq_dsp_hls_faddfYi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_414_p0,
        din1 => grp_fu_414_p1,
        opcode => grp_fu_414_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_414_p2);

    pynq_dsp_hls_fmulcud_U23 : component pynq_dsp_hls_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_418_p0,
        din1 => grp_fu_418_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_418_p2);

    pynq_dsp_hls_fmulcud_U24 : component pynq_dsp_hls_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_510,
        din1 => grp_fu_423_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_423_p2);

    pynq_dsp_hls_fdivg8j_U25 : component pynq_dsp_hls_fdivg8j
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_1802,
        din1 => ap_const_lv32_4AFFFFFE,
        ce => ap_const_logic_1,
        dout => grp_fu_427_p2);

    pynq_dsp_hls_fdivg8j_U26 : component pynq_dsp_hls_fdivg8j
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_1_reg_1807,
        din1 => ap_const_lv32_4AFFFFFE,
        ce => ap_const_logic_1,
        dout => grp_fu_432_p2);

    pynq_dsp_hls_sitohbi_U27 : component pynq_dsp_hls_sitohbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_437_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_437_p1);

    pynq_dsp_hls_sitohbi_U28 : component pynq_dsp_hls_sitohbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_440_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_440_p1);

    pynq_dsp_hls_fcmpeOg_U29 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_443_p0,
        din1 => grp_fu_443_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_443_p2);

    pynq_dsp_hls_fcmpeOg_U30 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_447_p0,
        din1 => grp_fu_447_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_447_p2);

    pynq_dsp_hls_fcmpeOg_U31 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x_assign_4_fu_190,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_453_p2);

    pynq_dsp_hls_fcmpeOg_U32 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x_assign_fu_186,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_458_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_effect_delay_fu_398_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_effect_delay_fu_398_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    grp_effect_delay_fu_398_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_effect_delay_fu_398_ap_ready = ap_const_logic_1)) then 
                    grp_effect_delay_fu_398_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    basePhysAddr_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    configSizePerStage_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    configSizePerStage_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (configSizePerStage_1_vld_reg = ap_const_logic_0) and (configSizePerStage_1_vld_in = ap_const_logic_1))) then 
                configSizePerStage_1_vld_reg <= ap_const_logic_1;
            elsif (((configSizePerStage_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (configSizePerStage_1_vld_reg = ap_const_logic_1))) then 
                configSizePerStage_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    counter_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    counter_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    counter_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (counter_1_vld_reg = ap_const_logic_0) and (counter_1_vld_in = ap_const_logic_1))) then 
                counter_1_vld_reg <= ap_const_logic_1;
            elsif (((counter_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (counter_1_vld_reg = ap_const_logic_1))) then 
                counter_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    lrclk_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorDstL_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorDstL_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorDstL_1_vld_reg = ap_const_logic_0) and (monitorDstL_1_vld_in = ap_const_logic_1))) then 
                monitorDstL_1_vld_reg <= ap_const_logic_1;
            elsif (((monitorDstL_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (monitorDstL_1_vld_reg = ap_const_logic_1))) then 
                monitorDstL_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    monitorDstR_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorDstR_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorDstR_1_vld_reg = ap_const_logic_0) and (monitorDstR_1_vld_in = ap_const_logic_1))) then 
                monitorDstR_1_vld_reg <= ap_const_logic_1;
            elsif (((monitorDstR_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (monitorDstR_1_vld_reg = ap_const_logic_1))) then 
                monitorDstR_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    monitorSrcL_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorSrcL_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorSrcL_1_vld_reg = ap_const_logic_0) and (monitorSrcL_1_vld_in = ap_const_logic_1))) then 
                monitorSrcL_1_vld_reg <= ap_const_logic_1;
            elsif (((monitorSrcL_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (monitorSrcL_1_vld_reg = ap_const_logic_1))) then 
                monitorSrcL_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    monitorSrcR_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorSrcR_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorSrcR_1_vld_reg = ap_const_logic_0) and (monitorSrcR_1_vld_in = ap_const_logic_1))) then 
                monitorSrcR_1_vld_reg <= ap_const_logic_1;
            elsif (((monitorSrcR_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (monitorSrcR_1_vld_reg = ap_const_logic_1))) then 
                monitorSrcR_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    numOfStage_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    numOfStage_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (numOfStage_1_vld_reg = ap_const_logic_0) and (numOfStage_1_vld_in = ap_const_logic_1))) then 
                numOfStage_1_vld_reg <= ap_const_logic_1;
            elsif (((numOfStage_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (numOfStage_1_vld_reg = ap_const_logic_1))) then 
                numOfStage_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    readyLch_flag_1_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_io) and (or_ln147_fu_591_p2 = ap_const_lv1_1) and (icmp_ln761_fu_551_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                readyLch_flag_1_reg_383 <= xor_ln142_fu_569_p2;
            elsif (((physMemPtr_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then 
                readyLch_flag_1_reg_383 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_state11_io) and (icmp_ln761_fu_551_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                readyLch_flag_1_reg_383 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    readyRch_flag_1_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_io) and (or_ln147_fu_591_p2 = ap_const_lv1_1) and (icmp_ln761_fu_551_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                readyRch_flag_1_reg_351 <= (0=>lrclk_0_data_reg, others=>'-');
            elsif (((physMemPtr_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then 
                readyRch_flag_1_reg_351 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_state11_io) and (icmp_ln761_fu_551_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                readyRch_flag_1_reg_351 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    readyRch_new_1_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_io) and (or_ln147_fu_591_p2 = ap_const_lv1_1) and (icmp_ln761_fu_551_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                readyRch_new_1_reg_366 <= ap_const_lv1_1;
            elsif (((physMemPtr_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then 
                readyRch_new_1_reg_366 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    t_V_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                t_V_reg_339 <= stageIndex_V_reg_1827;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                t_V_reg_339 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    x_assign_4_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                x_assign_4_fu_190 <= dst_l_fu_1187_p3;
            elsif (((id_reg_1853 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
                x_assign_4_fu_190 <= dst_l_1_fu_940_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_effect_delay_fu_398_ap_done = ap_const_logic_1))) then 
                x_assign_4_fu_190 <= grp_effect_delay_fu_398_ap_return_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                x_assign_4_fu_190 <= floatSrcL_reg_1812;
            end if; 
        end if;
    end process;

    x_assign_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                x_assign_fu_186 <= dst_r_fu_1211_p3;
            elsif (((id_reg_1853 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
                x_assign_fu_186 <= dst_r_1_fu_983_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_effect_delay_fu_398_ap_done = ap_const_logic_1))) then 
                x_assign_fu_186 <= grp_effect_delay_fu_398_ap_return_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                x_assign_fu_186 <= floatSrcR_reg_1818;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                    absL_1_reg_1971(30 downto 0) <= absL_1_fu_1052_p1(30 downto 0);
                    absR_1_reg_1977(30 downto 0) <= absR_1_fu_1077_p1(30 downto 0);
                or_ln257_2_reg_1989 <= or_ln257_2_fu_1132_p2;
                or_ln257_reg_1983 <= or_ln257_fu_1104_p2;
                    thresh_1_reg_1963(30 downto 0) <= thresh_1_fu_1026_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                    absL_reg_1890(30 downto 0) <= absL_fu_780_p1(30 downto 0);
                    absR_reg_1896(30 downto 0) <= absR_fu_805_p1(30 downto 0);
                or_ln24_reg_1902 <= or_ln24_fu_832_p2;
                or_ln31_reg_1908 <= or_ln31_fu_860_p2;
                    thresh_reg_1880(30 downto 0) <= thresh_fu_754_p1(30 downto 0);
                x_assign_4_load_2_reg_1874 <= x_assign_4_fu_190;
                x_assign_load_2_reg_1868 <= x_assign_fu_186;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                and_ln24_1_reg_1914 <= and_ln24_1_fu_870_p2;
                and_ln31_1_reg_1920 <= and_ln31_1_fu_880_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                and_ln284_1_reg_2148 <= and_ln284_1_fu_1538_p2;
                icmp_ln285_1_reg_2138 <= icmp_ln285_1_fu_1506_p2;
                ret_V_1_reg_2163 <= ret_V_1_fu_1576_p2;
                select_ln282_reg_2126 <= select_ln282_fu_1484_p3;
                    tmp_6_reg_2132(22 downto 0) <= tmp_6_fu_1491_p3(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                and_ln284_reg_2075 <= and_ln284_fu_1327_p2;
                icmp_ln278_1_reg_2105 <= icmp_ln278_1_fu_1398_p2;
                icmp_ln282_1_reg_2120 <= icmp_ln282_1_fu_1410_p2;
                icmp_ln285_reg_2065 <= icmp_ln285_fu_1295_p2;
                p_Result_19_reg_2095 <= reg_V_1_fu_1365_p1(31 downto 31);
                reg_V_1_reg_2090 <= reg_V_1_fu_1365_p1;
                sh_amt_2_reg_2112 <= sh_amt_2_fu_1404_p2;
                    tmp_2_reg_2059(22 downto 0) <= tmp_2_fu_1280_p3(22 downto 0);
                trunc_ln270_1_reg_2100 <= trunc_ln270_1_fu_1394_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln278_1_reg_2105 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                and_ln295_1_reg_2158 <= and_ln295_1_fu_1570_p2;
                select_ln285_2_reg_2153 <= select_ln285_2_fu_1550_p3;
                sh_amt_3_reg_2143 <= sh_amt_3_fu_1511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln278_reg_2038 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                and_ln295_reg_2085 <= and_ln295_fu_1359_p2;
                select_ln285_reg_2080 <= select_ln285_fu_1339_p3;
                sh_amt_1_reg_2070 <= sh_amt_1_fu_1300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (basePhysAddr_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (basePhysAddr_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (basePhysAddr_V_0_vld_reg = ap_const_logic_1)))) then
                basePhysAddr_V_0_data_reg <= basePhysAddr_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                    configReg_addr_2_reg_1848(5 downto 4) <= tmp_7_fu_696_p3(6 - 1 downto 0)(5 downto 4);
                id_reg_1853 <= id_fu_705_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (configSizePerStage_1_vld_reg = ap_const_logic_0) and (configSizePerStage_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (configSizePerStage_1_vld_in = ap_const_logic_1) and (configSizePerStage_1_vld_reg = ap_const_logic_1)))) then
                configSizePerStage_1_data_reg(4) <= '1';
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (counter_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (counter_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (counter_0_vld_reg = ap_const_logic_1)))) then
                counter_0_data_reg <= counter_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (counter_1_vld_reg = ap_const_logic_0) and (counter_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (counter_1_vld_in = ap_const_logic_1) and (counter_1_vld_reg = ap_const_logic_1)))) then
                counter_1_data_reg <= select_ln156_fu_623_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                floatDstR_reg_2017 <= grp_fu_418_p2;
                icmp_ln278_reg_2038 <= icmp_ln278_fu_1262_p2;
                icmp_ln282_reg_2053 <= icmp_ln282_fu_1274_p2;
                p_Result_18_reg_2028 <= reg_V_fu_1228_p1(31 downto 31);
                reg_V_reg_2023 <= reg_V_fu_1228_p1;
                sh_amt_reg_2045 <= sh_amt_fu_1268_p2;
                trunc_ln270_reg_2033 <= trunc_ln270_fu_1258_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                floatSrcL_reg_1812 <= grp_fu_427_p2;
                floatSrcR_reg_1818 <= grp_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lrclk_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lrclk_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (lrclk_0_vld_reg = ap_const_logic_1)))) then
                lrclk_0_data_reg <= lrclk;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorDstL_1_vld_reg = ap_const_logic_0) and (monitorDstL_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (monitorDstL_1_vld_in = ap_const_logic_1) and (monitorDstL_1_vld_reg = ap_const_logic_1)))) then
                monitorDstL_1_data_reg <= reg_515;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                    monitorDstL_1_reg_1995(30 downto 0) <= monitorDstL_1_fu_1148_p3(30 downto 0);
                    monitorDstR_1_reg_2001(30 downto 0) <= monitorDstR_1_fu_1164_p3(30 downto 0);
                tmp_13_reg_2007 <= grp_fu_453_p2;
                tmp_14_reg_2012 <= grp_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorDstR_1_vld_reg = ap_const_logic_0) and (monitorDstR_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (monitorDstR_1_vld_in = ap_const_logic_1) and (monitorDstR_1_vld_reg = ap_const_logic_1)))) then
                monitorDstR_1_data_reg <= floatDstR_reg_2017;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorSrcL_1_vld_reg = ap_const_logic_0) and (monitorSrcL_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (monitorSrcL_1_vld_in = ap_const_logic_1) and (monitorSrcL_1_vld_reg = ap_const_logic_1)))) then
                monitorSrcL_1_data_reg <= floatSrcL_reg_1812;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorSrcR_1_vld_reg = ap_const_logic_0) and (monitorSrcR_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (monitorSrcR_1_vld_in = ap_const_logic_1) and (monitorSrcR_1_vld_reg = ap_const_logic_1)))) then
                monitorSrcR_1_data_reg <= floatSrcR_reg_1818;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (numOfStage_1_vld_reg = ap_const_logic_0) and (numOfStage_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (numOfStage_1_vld_in = ap_const_logic_1) and (numOfStage_1_vld_reg = ap_const_logic_1)))) then
                numOfStage_1_data_reg(2) <= '1';
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                or_ln24_1_reg_1862 <= or_ln24_1_fu_741_p2;
                trunc_ln368_3_reg_1857 <= trunc_ln368_3_fu_727_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                or_ln257_1_reg_1957 <= or_ln257_1_fu_1013_p2;
                trunc_ln368_reg_1952 <= trunc_ln368_fu_999_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_V_reg_1716 <= basePhysAddr_V_0_data_reg(31 downto 2);
                ret_V_reg_1726 <= ret_V_fu_535_p2;
                    zext_ln215_reg_1721(29 downto 0) <= zext_ln215_fu_531_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_phi_mux_readyLch_flag_1_phi_fu_388_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                readyLch <= readyRch_new_1_reg_366;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_phi_mux_readyRch_flag_1_phi_fu_356_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                readyRch <= readyRch_new_1_reg_366;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state45) or ((icmp_ln887_fu_652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43)))) then
                reg_491 <= x_assign_4_fu_190;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state45))) then
                reg_498 <= x_assign_fu_186;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln24_1_reg_1914) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_const_lv1_0 = and_ln24_1_reg_1914) and (ap_const_logic_1 = ap_CS_fsm_state56)))) then
                reg_505 <= grp_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln31_1_reg_1920) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_const_lv1_0 = and_ln31_1_reg_1920) and (ap_const_logic_1 = ap_CS_fsm_state56)))) then
                reg_510 <= grp_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state75) or ((ap_const_lv1_0 = and_ln24_1_reg_1914) and (ap_const_logic_1 = ap_CS_fsm_state60)))) then
                reg_515 <= grp_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                select_ln282_1_reg_2173 <= select_ln282_1_fu_1660_p3;
                select_ln303_reg_2168 <= select_ln303_fu_1586_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                select_ln303_1_reg_2186 <= select_ln303_1_fu_1682_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                srcL_V_reg_1777 <= srcL_V_fu_607_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                srcR_V_reg_1787 <= srcR_V_fu_632_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                stageIndex_V_reg_1827 <= stageIndex_V_fu_658_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                status_V_reg_1737 <= physMemPtr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln24_1_reg_1914) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                tmp_18_reg_1942 <= grp_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln31_1_reg_1920) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                tmp_1_i1_reg_1937 <= grp_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_1_reg_1807 <= grp_fu_440_p1;
                tmp_reg_1802 <= grp_fu_437_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln31_1_reg_1920) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                tmp_21_reg_1947 <= grp_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_652_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    tmp_5_reg_1832(6 downto 4) <= tmp_5_fu_664_p3(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                trunc_ln368_4_reg_1926 <= trunc_ln368_4_fu_886_p1;
            end if;
        end if;
    end process;
    numOfStage_1_data_reg(1 downto 0) <= "00";
    numOfStage_1_data_reg(31 downto 3) <= "00000000000000000000000000000";
    configSizePerStage_1_data_reg(3 downto 0) <= "0000";
    configSizePerStage_1_data_reg(31 downto 5) <= "000000000000000000000000000";
    zext_ln215_reg_1721(30) <= '0';
    tmp_5_reg_1832(3 downto 0) <= "0000";
    configReg_addr_2_reg_1848(3 downto 0) <= "0010";
    thresh_reg_1880(31) <= '0';
    absL_reg_1890(31) <= '0';
    absR_reg_1896(31) <= '0';
    thresh_1_reg_1963(31) <= '0';
    absL_1_reg_1971(31) <= '0';
    absR_1_reg_1977(31) <= '0';
    monitorDstL_1_reg_1995(31) <= '0';
    monitorDstR_1_reg_2001(31) <= '0';
    tmp_2_reg_2059(23) <= '1';
    tmp_6_reg_2132(23) <= '1';
    monitorSrcL_1_state(1 downto 0) <= "00";
    monitorSrcR_1_state(1 downto 0) <= "00";
    monitorDstL_1_state(1 downto 0) <= "00";
    monitorDstR_1_state(1 downto 0) <= "00";
    counter_1_state(1 downto 0) <= "00";
    numOfStage_1_state(1 downto 0) <= "00";
    configSizePerStage_1_state(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state11, icmp_ln761_fu_551_p2, or_ln147_fu_591_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state86, physMemPtr_V_AWREADY, physMemPtr_V_WREADY, physMemPtr_V_ARREADY, physMemPtr_V_RVALID, physMemPtr_V_BVALID, ap_CS_fsm_state43, icmp_ln887_fu_652_p2, ap_block_state11_io, ap_CS_fsm_state44, id_fu_705_p1, grp_effect_delay_fu_398_ap_done, ap_CS_fsm_state46, ap_CS_fsm_state87, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_boolean_0 = ap_block_state11_io) and (or_ln147_fu_591_p2 = ap_const_lv1_0) and (icmp_ln761_fu_551_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and ((or_ln147_fu_591_p2 = ap_const_lv1_1) or (icmp_ln761_fu_551_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((icmp_ln887_fu_652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                if (((id_fu_705_p1 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                elsif ((not((id_fu_705_p1 = ap_const_lv4_5)) and not((id_fu_705_p1 = ap_const_lv4_1)) and not((id_fu_705_p1 = ap_const_lv4_2)) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                elsif (((id_fu_705_p1 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_effect_delay_fu_398_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                if (((physMemPtr_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    absL_1_fu_1052_p1 <= p_Result_12_fu_1044_p3;
    absL_fu_780_p1 <= p_Result_16_fu_772_p3;
    absR_1_fu_1077_p1 <= p_Result_13_fu_1069_p3;
    absR_fu_805_p1 <= p_Result_17_fu_797_p3;
    add_ln156_fu_617_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(counter_0_data_reg));
    and_ln11_fu_1170_p2 <= (tmp_13_reg_2007 and or_ln257_reg_1983);
    and_ln12_fu_1194_p2 <= (tmp_14_reg_2012 and or_ln257_2_reg_1989);
    and_ln147_fu_580_p0 <= (0=>lrclk_0_data_reg, others=>'-');
    and_ln147_fu_580_p2 <= (xor_ln147_fu_574_p2 and and_ln147_fu_580_p0);
    and_ln24_1_fu_870_p2 <= (grp_fu_443_p2 and and_ln24_fu_866_p2);
    and_ln24_fu_866_p2 <= (or_ln24_reg_1902 and or_ln24_1_reg_1862);
    and_ln257_1_fu_1142_p2 <= (grp_fu_443_p2 and and_ln257_fu_1138_p2);
    and_ln257_2_fu_1154_p2 <= (or_ln257_2_reg_1989 and or_ln257_1_reg_1957);
    and_ln257_3_fu_1158_p2 <= (grp_fu_447_p2 and and_ln257_2_fu_1154_p2);
    and_ln257_fu_1138_p2 <= (or_ln257_reg_1983 and or_ln257_1_reg_1957);
    and_ln282_1_fu_1655_p2 <= (xor_ln278_1_fu_1650_p2 and icmp_ln282_1_reg_2120);
    and_ln282_fu_1479_p2 <= (xor_ln278_fu_1474_p2 and icmp_ln282_reg_2053);
    and_ln284_1_fu_1538_p2 <= (xor_ln282_1_fu_1532_p2 and icmp_ln284_1_fu_1501_p2);
    and_ln284_fu_1327_p2 <= (xor_ln282_fu_1321_p2 and icmp_ln284_fu_1290_p2);
    and_ln285_1_fu_1461_p2 <= (xor_ln285_fu_1456_p2 and and_ln284_reg_2075);
    and_ln285_2_fu_1544_p2 <= (icmp_ln285_1_fu_1506_p2 and and_ln284_1_fu_1538_p2);
    and_ln285_3_fu_1637_p2 <= (xor_ln285_1_fu_1632_p2 and and_ln284_1_reg_2148);
    and_ln285_fu_1333_p2 <= (icmp_ln285_fu_1295_p2 and and_ln284_fu_1327_p2);
    and_ln28_1_fu_926_p2 <= (xor_ln24_fu_921_p2 and and_ln28_fu_903_p2);
    and_ln28_fu_903_p2 <= (tmp_18_reg_1942 and or_ln24_reg_1902);
    and_ln295_1_fu_1570_p2 <= (xor_ln284_1_fu_1564_p2 and icmp_ln295_1_fu_1516_p2);
    and_ln295_fu_1359_p2 <= (xor_ln284_fu_1353_p2 and icmp_ln295_fu_1305_p2);
    and_ln31_1_fu_880_p2 <= (grp_fu_447_p2 and and_ln31_fu_876_p2);
    and_ln31_fu_876_p2 <= (or_ln31_reg_1908 and or_ln24_1_reg_1862);
    and_ln35_1_fu_969_p2 <= (xor_ln31_fu_964_p2 and and_ln35_fu_946_p2);
    and_ln35_fu_946_p2 <= (tmp_21_reg_1947 and or_ln31_reg_1908);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);

    ap_block_state11_io_assign_proc : process(physMemPtr_V_ARREADY, ap_predicate_op151_readreq_state11)
    begin
                ap_block_state11_io <= ((physMemPtr_V_ARREADY = ap_const_logic_0) and (ap_predicate_op151_readreq_state11 = ap_const_boolean_1));
    end process;


    ap_block_state87_assign_proc : process(monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
                ap_block_state87 <= ((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state87, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_readyLch_flag_1_phi_fu_388_p6 <= readyLch_flag_1_reg_383;
    ap_phi_mux_readyRch_flag_1_phi_fu_356_p6 <= readyRch_flag_1_reg_351;

    ap_predicate_op151_readreq_state11_assign_proc : process(icmp_ln761_fu_551_p2, or_ln147_fu_591_p2)
    begin
                ap_predicate_op151_readreq_state11 <= ((or_ln147_fu_591_p2 = ap_const_lv1_0) and (icmp_ln761_fu_551_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state87, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    basePhysAddr_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state87, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state87)))) then 
            basePhysAddr_V_0_ack_out <= ap_const_logic_1;
        else 
            basePhysAddr_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln11_1_fu_1183_p1 <= xor_ln11_fu_1177_p2;
    bitcast_ln11_fu_1174_p1 <= monitorDstL_1_reg_1995;
    bitcast_ln12_1_fu_1207_p1 <= xor_ln12_fu_1201_p2;
    bitcast_ln12_fu_1198_p1 <= monitorDstR_1_reg_2001;
    bitcast_ln28_1_fu_917_p1 <= xor_ln28_fu_911_p2;
    bitcast_ln28_fu_907_p1 <= reg_505;
    bitcast_ln35_1_fu_960_p1 <= xor_ln35_fu_954_p2;
    bitcast_ln35_fu_950_p1 <= reg_510;

    configReg_address0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state44, configReg_addr_2_reg_1848, id_fu_705_p1, grp_effect_delay_fu_398_config_r_address0, ap_CS_fsm_state46, zext_ln172_fu_672_p1, tmp_3_fu_682_p3, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            configReg_address0 <= configReg_addr_2_reg_1848;
        elsif ((((id_fu_705_p1 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((id_fu_705_p1 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            configReg_address0 <= tmp_3_fu_682_p3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            configReg_address0 <= zext_ln172_fu_672_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            configReg_address0 <= grp_effect_delay_fu_398_config_r_address0;
        else 
            configReg_address0 <= "XXXXXX";
        end if; 
    end process;


    configReg_ce0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state44, id_fu_705_p1, grp_effect_delay_fu_398_config_r_ce0, ap_CS_fsm_state46, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state55) or ((id_fu_705_p1 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((id_fu_705_p1 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            configReg_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            configReg_ce0 <= grp_effect_delay_fu_398_config_r_ce0;
        else 
            configReg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    configReg_we0_assign_proc : process(grp_effect_delay_fu_398_config_r_we0, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            configReg_we0 <= grp_effect_delay_fu_398_config_r_we0;
        else 
            configReg_we0 <= ap_const_logic_0;
        end if; 
    end process;


    configSizePerStage_1_vld_in_assign_proc : process(ap_CS_fsm_state10, physMemPtr_V_RVALID)
    begin
        if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            configSizePerStage_1_vld_in <= ap_const_logic_1;
        else 
            configSizePerStage_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    counter_0_ack_out_assign_proc : process(ap_CS_fsm_state19, physMemPtr_V_RVALID, ap_CS_fsm_state87, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if ((((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state87)))) then 
            counter_0_ack_out <= ap_const_logic_1;
        else 
            counter_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    counter_1_vld_in_assign_proc : process(ap_CS_fsm_state19, physMemPtr_V_RVALID)
    begin
        if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            counter_1_vld_in <= ap_const_logic_1;
        else 
            counter_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_l_1_fu_940_p3 <= 
        x_assign_4_load_2_reg_1874 when (and_ln24_1_reg_1914(0) = '1') else 
        select_ln28_fu_932_p3;
    dst_l_fu_1187_p3 <= 
        bitcast_ln11_1_fu_1183_p1 when (and_ln11_fu_1170_p2(0) = '1') else 
        monitorDstL_1_reg_1995;
    dst_r_1_fu_983_p3 <= 
        x_assign_load_2_reg_1868 when (and_ln31_1_reg_1920(0) = '1') else 
        select_ln35_fu_975_p3;
    dst_r_fu_1211_p3 <= 
        bitcast_ln12_1_fu_1207_p1 when (and_ln12_fu_1194_p2(0) = '1') else 
        monitorDstR_1_reg_2001;
    exp_V_1_fu_1390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_fu_1380_p4),9));
    exp_V_fu_1254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_1244_p4),9));

    extMemPtr_V_ARVALID_assign_proc : process(ap_CS_fsm_state45, grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARVALID, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            extMemPtr_V_ARVALID <= grp_effect_delay_fu_398_m_axi_extMemPtr_V_ARVALID;
        else 
            extMemPtr_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    extMemPtr_V_AWVALID_assign_proc : process(ap_CS_fsm_state45, grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWVALID, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            extMemPtr_V_AWVALID <= grp_effect_delay_fu_398_m_axi_extMemPtr_V_AWVALID;
        else 
            extMemPtr_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    extMemPtr_V_BREADY_assign_proc : process(ap_CS_fsm_state45, grp_effect_delay_fu_398_m_axi_extMemPtr_V_BREADY, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            extMemPtr_V_BREADY <= grp_effect_delay_fu_398_m_axi_extMemPtr_V_BREADY;
        else 
            extMemPtr_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    extMemPtr_V_RREADY_assign_proc : process(ap_CS_fsm_state45, grp_effect_delay_fu_398_m_axi_extMemPtr_V_RREADY, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            extMemPtr_V_RREADY <= grp_effect_delay_fu_398_m_axi_extMemPtr_V_RREADY;
        else 
            extMemPtr_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    extMemPtr_V_WVALID_assign_proc : process(ap_CS_fsm_state45, grp_effect_delay_fu_398_m_axi_extMemPtr_V_WVALID, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            extMemPtr_V_WVALID <= grp_effect_delay_fu_398_m_axi_extMemPtr_V_WVALID;
        else 
            extMemPtr_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_effect_delay_fu_398_ap_start <= grp_effect_delay_fu_398_ap_start_reg;

    grp_fu_410_opcode_assign_proc : process(and_ln24_1_reg_1914, ap_CS_fsm_state50, ap_CS_fsm_state61)
    begin
        if ((ap_const_lv1_0 = and_ln24_1_reg_1914)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                grp_fu_410_opcode <= ap_const_lv2_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                grp_fu_410_opcode <= ap_const_lv2_0;
            else 
                grp_fu_410_opcode <= "XX";
            end if;
        else 
            grp_fu_410_opcode <= "XX";
        end if; 
    end process;


    grp_fu_410_p0_assign_proc : process(thresh_reg_1880, absL_reg_1890, ap_CS_fsm_state50, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_410_p0 <= thresh_reg_1880;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_410_p0 <= absL_reg_1890;
        else 
            grp_fu_410_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_410_p1_assign_proc : process(reg_515, thresh_reg_1880, ap_CS_fsm_state50, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_410_p1 <= reg_515;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_410_p1 <= thresh_reg_1880;
        else 
            grp_fu_410_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_414_opcode_assign_proc : process(and_ln31_1_reg_1920, ap_CS_fsm_state50, ap_CS_fsm_state61)
    begin
        if ((ap_const_lv1_0 = and_ln31_1_reg_1920)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                grp_fu_414_opcode <= ap_const_lv2_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                grp_fu_414_opcode <= ap_const_lv2_0;
            else 
                grp_fu_414_opcode <= "XX";
            end if;
        else 
            grp_fu_414_opcode <= "XX";
        end if; 
    end process;


    grp_fu_414_p0_assign_proc : process(thresh_reg_1880, absR_reg_1896, ap_CS_fsm_state50, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_414_p0 <= thresh_reg_1880;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_414_p0 <= absR_reg_1896;
        else 
            grp_fu_414_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_414_p1_assign_proc : process(thresh_reg_1880, tmp_1_i1_reg_1937, ap_CS_fsm_state50, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_414_p1 <= tmp_1_i1_reg_1937;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_414_p1 <= thresh_reg_1880;
        else 
            grp_fu_414_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_418_p0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state73, reg_505, ap_CS_fsm_state57, x_assign_fu_186, x_assign_4_fu_190)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_fu_418_p0 <= x_assign_fu_186;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_418_p0 <= reg_505;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_418_p0 <= x_assign_4_fu_190;
        else 
            grp_fu_418_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_418_p1_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state73, ratio_fu_897_p1, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_418_p1 <= ratio_fu_897_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            grp_fu_418_p1 <= ap_const_lv32_4AFFFFFE;
        else 
            grp_fu_418_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_423_p1 <= p_Result_15_fu_890_p3;
        grp_fu_437_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(srcL_V_reg_1777),32));

        grp_fu_440_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(srcR_V_reg_1787),32));


    grp_fu_443_p0_assign_proc : process(ap_CS_fsm_state70, ap_CS_fsm_state48, x_assign_4_load_2_reg_1874, absL_fu_780_p1, absL_1_fu_1052_p1, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_443_p0 <= absL_1_fu_1052_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_443_p0 <= x_assign_4_load_2_reg_1874;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_443_p0 <= absL_fu_780_p1;
        else 
            grp_fu_443_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_443_p1_assign_proc : process(ap_CS_fsm_state70, ap_CS_fsm_state48, thresh_fu_754_p1, thresh_1_fu_1026_p1, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_443_p1 <= thresh_1_fu_1026_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_443_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_443_p1 <= thresh_fu_754_p1;
        else 
            grp_fu_443_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_447_p0_assign_proc : process(ap_CS_fsm_state70, x_assign_load_2_reg_1868, ap_CS_fsm_state48, absR_fu_805_p1, absR_1_fu_1077_p1, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_447_p0 <= absR_1_fu_1077_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_447_p0 <= x_assign_load_2_reg_1868;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_447_p0 <= absR_fu_805_p1;
        else 
            grp_fu_447_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_447_p1_assign_proc : process(ap_CS_fsm_state70, ap_CS_fsm_state48, thresh_fu_754_p1, thresh_1_fu_1026_p1, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_447_p1 <= thresh_1_fu_1026_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_447_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_447_p1 <= thresh_fu_754_p1;
        else 
            grp_fu_447_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_475_p4 <= configReg_q0(30 downto 23);
    grp_fu_485_p2 <= "0" when (grp_fu_475_p4 = ap_const_lv8_FF) else "1";
    icmp_ln156_fu_611_p2 <= "1" when (unsigned(counter_0_data_reg) < unsigned(ap_const_lv32_FFFFFFFE)) else "0";
    icmp_ln24_1_fu_826_p2 <= "1" when (trunc_ln24_fu_768_p1 = ap_const_lv23_0) else "0";
    icmp_ln24_3_fu_735_p2 <= "1" when (trunc_ln31_fu_731_p1 = ap_const_lv23_0) else "0";
    icmp_ln24_fu_820_p2 <= "0" when (tmp_15_fu_810_p4 = ap_const_lv8_FF) else "1";
    icmp_ln257_1_fu_1098_p2 <= "1" when (trunc_ln257_1_fu_1040_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_3_fu_1007_p2 <= "1" when (trunc_ln257_fu_1003_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_4_fu_1120_p2 <= "0" when (tmp_11_fu_1110_p4 = ap_const_lv8_FF) else "1";
    icmp_ln257_5_fu_1126_p2 <= "1" when (trunc_ln257_2_fu_1065_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_fu_1092_p2 <= "0" when (tmp_9_fu_1082_p4 = ap_const_lv8_FF) else "1";
    icmp_ln278_1_fu_1398_p2 <= "1" when (trunc_ln262_1_fu_1368_p1 = ap_const_lv31_0) else "0";
    icmp_ln278_fu_1262_p2 <= "1" when (trunc_ln262_fu_1232_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_1_fu_1410_p2 <= "1" when (p_Result_4_fu_1380_p4 = ap_const_lv8_96) else "0";
    icmp_ln282_fu_1274_p2 <= "1" when (p_Result_s_fu_1244_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_1_fu_1501_p2 <= "1" when (signed(sh_amt_2_reg_2112) > signed(ap_const_lv9_0)) else "0";
    icmp_ln284_fu_1290_p2 <= "1" when (signed(sh_amt_reg_2045) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_1_fu_1506_p2 <= "1" when (signed(sh_amt_2_reg_2112) < signed(ap_const_lv9_19)) else "0";
    icmp_ln285_fu_1295_p2 <= "1" when (signed(sh_amt_reg_2045) < signed(ap_const_lv9_19)) else "0";
    icmp_ln295_1_fu_1516_p2 <= "1" when (signed(sh_amt_3_fu_1511_p2) < signed(ap_const_lv9_18)) else "0";
    icmp_ln295_fu_1305_p2 <= "1" when (signed(sh_amt_1_fu_1300_p2) < signed(ap_const_lv9_18)) else "0";
    icmp_ln31_1_fu_854_p2 <= "1" when (trunc_ln31_1_fu_793_p1 = ap_const_lv23_0) else "0";
    icmp_ln31_fu_848_p2 <= "0" when (tmp_19_fu_838_p4 = ap_const_lv8_FF) else "1";
    icmp_ln761_fu_551_p2 <= "1" when (status_V_reg_1737 = ap_const_lv32_0) else "0";
    icmp_ln887_fu_652_p2 <= "1" when (t_V_reg_339 = ap_const_lv3_4) else "0";
    id_fu_705_p1 <= configReg_q0(4 - 1 downto 0);

    lrclk_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state87, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state87)))) then 
            lrclk_0_ack_out <= ap_const_logic_1;
        else 
            lrclk_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln286_1_fu_1522_p2 <= std_logic_vector(shift_right(unsigned(tmp_6_fu_1491_p3),to_integer(unsigned('0' & sext_ln281_1_fu_1498_p1(24-1 downto 0)))));
    lshr_ln286_fu_1311_p2 <= std_logic_vector(shift_right(unsigned(tmp_2_fu_1280_p3),to_integer(unsigned('0' & sext_ln281_fu_1287_p1(24-1 downto 0)))));
    monitorDstL_1_fu_1148_p3 <= 
        absL_1_reg_1971 when (and_ln257_1_fu_1142_p2(0) = '1') else 
        thresh_1_reg_1963;

    monitorDstL_1_vld_in_assign_proc : process(ap_CS_fsm_state80, physMemPtr_V_WREADY)
    begin
        if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            monitorDstL_1_vld_in <= ap_const_logic_1;
        else 
            monitorDstL_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    monitorDstR_1_fu_1164_p3 <= 
        absR_1_reg_1977 when (and_ln257_3_fu_1158_p2(0) = '1') else 
        thresh_1_reg_1963;

    monitorDstR_1_vld_in_assign_proc : process(ap_CS_fsm_state80, physMemPtr_V_WREADY)
    begin
        if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            monitorDstR_1_vld_in <= ap_const_logic_1;
        else 
            monitorDstR_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    monitorSrcL_1_vld_in_assign_proc : process(ap_CS_fsm_state80, physMemPtr_V_WREADY)
    begin
        if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            monitorSrcL_1_vld_in <= ap_const_logic_1;
        else 
            monitorSrcL_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    monitorSrcR_1_vld_in_assign_proc : process(ap_CS_fsm_state80, physMemPtr_V_WREADY)
    begin
        if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            monitorSrcR_1_vld_in <= ap_const_logic_1;
        else 
            monitorSrcR_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    numOfStage_1_vld_in_assign_proc : process(ap_CS_fsm_state10, physMemPtr_V_RVALID)
    begin
        if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            numOfStage_1_vld_in <= ap_const_logic_1;
        else 
            numOfStage_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    or_ln142_fu_564_p1 <= (0=>lrclk_0_data_reg, others=>'-');
    or_ln142_fu_564_p2 <= (readyRch or or_ln142_fu_564_p1);
    or_ln147_fu_591_p2 <= (xor_ln147_1_fu_585_p2 or and_ln147_fu_580_p2);
    or_ln18_fu_691_p2 <= (tmp_5_reg_1832 or ap_const_lv7_2);
    or_ln24_1_fu_741_p2 <= (icmp_ln24_3_fu_735_p2 or grp_fu_485_p2);
    or_ln24_fu_832_p2 <= (icmp_ln24_fu_820_p2 or icmp_ln24_1_fu_826_p2);
    or_ln257_1_fu_1013_p2 <= (icmp_ln257_3_fu_1007_p2 or grp_fu_485_p2);
    or_ln257_2_fu_1132_p2 <= (icmp_ln257_5_fu_1126_p2 or icmp_ln257_4_fu_1120_p2);
    or_ln257_fu_1104_p2 <= (icmp_ln257_fu_1092_p2 or icmp_ln257_1_fu_1098_p2);
    or_ln282_1_fu_1528_p2 <= (icmp_ln282_1_reg_2120 or icmp_ln278_1_reg_2105);
    or_ln282_fu_1317_p2 <= (icmp_ln282_reg_2053 or icmp_ln278_reg_2038);
    or_ln284_1_fu_1558_p2 <= (or_ln282_1_fu_1528_p2 or icmp_ln284_1_fu_1501_p2);
    or_ln284_fu_1347_p2 <= (or_ln282_fu_1317_p2 or icmp_ln284_fu_1290_p2);
    or_ln31_fu_860_p2 <= (icmp_ln31_fu_848_p2 or icmp_ln31_1_fu_854_p2);
    or_ln4_fu_677_p2 <= (tmp_5_reg_1832 or ap_const_lv7_1);
    p_Result_11_fu_1019_p3 <= (ap_const_lv1_0 & trunc_ln368_reg_1952);
    p_Result_12_fu_1044_p3 <= (ap_const_lv1_0 & trunc_ln368_1_fu_1036_p1);
    p_Result_13_fu_1069_p3 <= (ap_const_lv1_0 & trunc_ln368_2_fu_1061_p1);
    p_Result_14_fu_747_p3 <= (ap_const_lv1_0 & trunc_ln368_3_reg_1857);
    p_Result_15_fu_890_p3 <= (ap_const_lv1_0 & trunc_ln368_4_reg_1926);
    p_Result_16_fu_772_p3 <= (ap_const_lv1_0 & trunc_ln368_5_fu_764_p1);
    p_Result_17_fu_797_p3 <= (ap_const_lv1_0 & trunc_ln368_6_fu_789_p1);
    p_Result_4_fu_1380_p4 <= reg_V_1_fu_1365_p1(30 downto 23);
    p_Result_s_fu_1244_p4 <= reg_V_fu_1228_p1(30 downto 23);
    p_Val2_10_fu_785_p1 <= x_assign_fu_186;
    p_Val2_5_fu_1032_p1 <= x_assign_4_fu_190;
    p_Val2_6_fu_1057_p1 <= x_assign_fu_186;
    p_Val2_9_fu_760_p1 <= x_assign_4_fu_190;

    physMemPtr_V_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, physMemPtr_V_ARREADY, ap_predicate_op151_readreq_state11, ap_block_state11_io, zext_ln544_fu_541_p1, zext_ln544_1_fu_597_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_predicate_op151_readreq_state11 = ap_const_boolean_1))) then 
            physMemPtr_V_ARADDR <= zext_ln544_1_fu_597_p1(32 - 1 downto 0);
        elsif (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            physMemPtr_V_ARADDR <= zext_ln544_fu_541_p1(32 - 1 downto 0);
        else 
            physMemPtr_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, physMemPtr_V_ARREADY, ap_predicate_op151_readreq_state11, ap_block_state11_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_predicate_op151_readreq_state11 = ap_const_boolean_1))) then 
            physMemPtr_V_ARLEN <= ap_const_lv32_2;
        elsif (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            physMemPtr_V_ARLEN <= ap_const_lv32_1;
        else 
            physMemPtr_V_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, physMemPtr_V_ARREADY, ap_predicate_op151_readreq_state11, ap_block_state11_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_predicate_op151_readreq_state11 = ap_const_boolean_1)) or ((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            physMemPtr_V_ARVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    physMemPtr_V_AWADDR <= zext_ln544_2_fu_1667_p1(32 - 1 downto 0);

    physMemPtr_V_AWVALID_assign_proc : process(ap_CS_fsm_state79, physMemPtr_V_AWREADY)
    begin
        if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            physMemPtr_V_AWVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_BREADY_assign_proc : process(ap_CS_fsm_state86, physMemPtr_V_BVALID)
    begin
        if (((physMemPtr_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then 
            physMemPtr_V_BREADY <= ap_const_logic_1;
        else 
            physMemPtr_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state19, physMemPtr_V_RVALID)
    begin
        if ((((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            physMemPtr_V_RREADY <= ap_const_logic_1;
        else 
            physMemPtr_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_WDATA_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state81, sext_ln214_fu_1688_p1, sext_ln214_1_fu_1692_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            physMemPtr_V_WDATA <= sext_ln214_1_fu_1692_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            physMemPtr_V_WDATA <= sext_ln214_fu_1688_p1;
        else 
            physMemPtr_V_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_WVALID_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state81, physMemPtr_V_WREADY)
    begin
        if ((((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81)) or ((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80)))) then 
            physMemPtr_V_WVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_blk_n_AR_assign_proc : process(m_axi_physMemPtr_V_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state11, icmp_ln761_fu_551_p2, or_ln147_fu_591_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((or_ln147_fu_591_p2 = ap_const_lv1_0) and (icmp_ln761_fu_551_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            physMemPtr_V_blk_n_AR <= m_axi_physMemPtr_V_ARREADY;
        else 
            physMemPtr_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_AW_assign_proc : process(m_axi_physMemPtr_V_AWREADY, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            physMemPtr_V_blk_n_AW <= m_axi_physMemPtr_V_AWREADY;
        else 
            physMemPtr_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_B_assign_proc : process(m_axi_physMemPtr_V_BVALID, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            physMemPtr_V_blk_n_B <= m_axi_physMemPtr_V_BVALID;
        else 
            physMemPtr_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_R_assign_proc : process(m_axi_physMemPtr_V_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            physMemPtr_V_blk_n_R <= m_axi_physMemPtr_V_RVALID;
        else 
            physMemPtr_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_W_assign_proc : process(m_axi_physMemPtr_V_WREADY, ap_CS_fsm_state80, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            physMemPtr_V_blk_n_W <= m_axi_physMemPtr_V_WREADY;
        else 
            physMemPtr_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    r_V_fu_521_p4 <= basePhysAddr_V_0_data_reg(31 downto 2);
    ratio_fu_897_p1 <= p_Result_15_fu_890_p3;
    reg_V_1_fu_1365_p1 <= floatDstR_reg_2017;
    reg_V_fu_1228_p1 <= reg_515;
    ret_V_1_fu_1576_p2 <= std_logic_vector(unsigned(ap_const_lv31_2) + unsigned(zext_ln215_reg_1721));
    ret_V_fu_535_p2 <= std_logic_vector(unsigned(zext_ln215_fu_531_p1) + unsigned(ap_const_lv31_4));
    select_ln156_fu_623_p3 <= 
        add_ln156_fu_617_p2 when (icmp_ln156_fu_611_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln278_1_fu_1625_p3 <= 
        ap_const_lv24_0 when (icmp_ln278_1_reg_2105(0) = '1') else 
        select_ln295_1_fu_1619_p3;
    select_ln278_fu_1449_p3 <= 
        ap_const_lv24_0 when (icmp_ln278_reg_2038(0) = '1') else 
        select_ln295_fu_1443_p3;
    select_ln282_1_fu_1660_p3 <= 
        tmp_6_reg_2132 when (and_ln282_1_fu_1655_p2(0) = '1') else 
        select_ln285_3_fu_1642_p3;
    select_ln282_fu_1484_p3 <= 
        tmp_2_reg_2059 when (and_ln282_fu_1479_p2(0) = '1') else 
        select_ln285_1_fu_1466_p3;
    select_ln285_1_fu_1466_p3 <= 
        select_ln288_fu_1426_p3 when (and_ln285_1_fu_1461_p2(0) = '1') else 
        select_ln278_fu_1449_p3;
    select_ln285_2_fu_1550_p3 <= 
        lshr_ln286_1_fu_1522_p2 when (and_ln285_2_fu_1544_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln285_3_fu_1642_p3 <= 
        select_ln288_1_fu_1602_p3 when (and_ln285_3_fu_1637_p2(0) = '1') else 
        select_ln278_1_fu_1625_p3;
    select_ln285_fu_1339_p3 <= 
        lshr_ln286_fu_1311_p2 when (and_ln285_fu_1333_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln288_1_fu_1602_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_8_fu_1595_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln288_fu_1426_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_4_fu_1419_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln28_fu_932_p3 <= 
        bitcast_ln28_1_fu_917_p1 when (and_ln28_1_fu_926_p2(0) = '1') else 
        reg_505;
    select_ln295_1_fu_1619_p3 <= 
        shl_ln297_1_fu_1614_p2 when (and_ln295_1_reg_2158(0) = '1') else 
        select_ln285_2_reg_2153;
    select_ln295_fu_1443_p3 <= 
        shl_ln297_fu_1438_p2 when (and_ln295_reg_2085(0) = '1') else 
        select_ln285_reg_2080;
    select_ln303_1_fu_1682_p3 <= 
        sub_ln461_1_fu_1677_p2 when (p_Result_19_reg_2095(0) = '1') else 
        select_ln282_1_reg_2173;
    select_ln303_fu_1586_p3 <= 
        sub_ln461_fu_1581_p2 when (p_Result_18_reg_2028(0) = '1') else 
        select_ln282_reg_2126;
    select_ln35_fu_975_p3 <= 
        bitcast_ln35_1_fu_960_p1 when (and_ln35_1_fu_969_p2(0) = '1') else 
        reg_510;
        sext_ln214_1_fu_1692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln303_1_reg_2186),32));

        sext_ln214_fu_1688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln303_reg_2168),32));

        sext_ln281_1_fu_1498_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_reg_2112),24));

        sext_ln281_fu_1287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_2045),24));

        sext_ln294_1_fu_1592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_3_reg_2143),32));

    sext_ln294_1cast_fu_1610_p1 <= sext_ln294_1_fu_1592_p1(24 - 1 downto 0);
        sext_ln294_fu_1416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_2070),32));

    sext_ln294cast_fu_1434_p1 <= sext_ln294_fu_1416_p1(24 - 1 downto 0);
    sh_amt_1_fu_1300_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_reg_2045));
    sh_amt_2_fu_1404_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_1_fu_1390_p1));
    sh_amt_3_fu_1511_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_2_reg_2112));
    sh_amt_fu_1268_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_fu_1254_p1));
    shl_ln297_1_fu_1614_p2 <= std_logic_vector(shift_left(unsigned(tmp_6_reg_2132),to_integer(unsigned('0' & sext_ln294_1cast_fu_1610_p1(24-1 downto 0)))));
    shl_ln297_fu_1438_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_reg_2059),to_integer(unsigned('0' & sext_ln294cast_fu_1434_p1(24-1 downto 0)))));
    srcL_V_fu_607_p1 <= physMemPtr_V_RDATA(24 - 1 downto 0);
    srcR_V_fu_632_p1 <= physMemPtr_V_RDATA(24 - 1 downto 0);
    stageIndex_V_fu_658_p2 <= std_logic_vector(unsigned(t_V_reg_339) + unsigned(ap_const_lv3_1));
    sub_ln461_1_fu_1677_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(select_ln282_1_reg_2173));
    sub_ln461_fu_1581_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(select_ln282_reg_2126));
    thresh_1_fu_1026_p1 <= p_Result_11_fu_1019_p3;
    thresh_fu_754_p1 <= p_Result_14_fu_747_p3;
    tmp_11_fu_1110_p4 <= p_Val2_6_fu_1057_p1(30 downto 23);
    tmp_15_fu_810_p4 <= p_Val2_9_fu_760_p1(30 downto 23);
    tmp_19_fu_838_p4 <= p_Val2_10_fu_785_p1(30 downto 23);
    tmp_2_fu_1280_p3 <= (ap_const_lv1_1 & trunc_ln270_reg_2033);
    tmp_3_fu_682_p3 <= (ap_const_lv57_0 & or_ln4_fu_677_p2);
    tmp_4_fu_1419_p3 <= reg_V_reg_2023(31 downto 31);
    tmp_5_fu_664_p3 <= (t_V_reg_339 & ap_const_lv4_0);
    tmp_6_fu_1491_p3 <= (ap_const_lv1_1 & trunc_ln270_1_reg_2100);
    tmp_7_fu_696_p3 <= (ap_const_lv57_0 & or_ln18_fu_691_p2);
    tmp_8_fu_1595_p3 <= reg_V_1_reg_2090(31 downto 31);
    tmp_9_fu_1082_p4 <= p_Val2_5_fu_1032_p1(30 downto 23);
    trunc_ln24_fu_768_p1 <= p_Val2_9_fu_760_p1(23 - 1 downto 0);
    trunc_ln257_1_fu_1040_p1 <= p_Val2_5_fu_1032_p1(23 - 1 downto 0);
    trunc_ln257_2_fu_1065_p1 <= p_Val2_6_fu_1057_p1(23 - 1 downto 0);
    trunc_ln257_fu_1003_p1 <= configReg_q0(23 - 1 downto 0);
    trunc_ln262_1_fu_1368_p1 <= reg_V_1_fu_1365_p1(31 - 1 downto 0);
    trunc_ln262_fu_1232_p1 <= reg_V_fu_1228_p1(31 - 1 downto 0);
    trunc_ln270_1_fu_1394_p1 <= reg_V_1_fu_1365_p1(23 - 1 downto 0);
    trunc_ln270_fu_1258_p1 <= reg_V_fu_1228_p1(23 - 1 downto 0);
    trunc_ln31_1_fu_793_p1 <= p_Val2_10_fu_785_p1(23 - 1 downto 0);
    trunc_ln31_fu_731_p1 <= configReg_q0(23 - 1 downto 0);
    trunc_ln368_1_fu_1036_p1 <= p_Val2_5_fu_1032_p1(31 - 1 downto 0);
    trunc_ln368_2_fu_1061_p1 <= p_Val2_6_fu_1057_p1(31 - 1 downto 0);
    trunc_ln368_3_fu_727_p1 <= configReg_q0(31 - 1 downto 0);
    trunc_ln368_4_fu_886_p1 <= configReg_q0(31 - 1 downto 0);
    trunc_ln368_5_fu_764_p1 <= p_Val2_9_fu_760_p1(31 - 1 downto 0);
    trunc_ln368_6_fu_789_p1 <= p_Val2_10_fu_785_p1(31 - 1 downto 0);
    trunc_ln368_fu_999_p1 <= configReg_q0(31 - 1 downto 0);
    xor_ln11_fu_1177_p2 <= (bitcast_ln11_fu_1174_p1 xor ap_const_lv32_80000000);
    xor_ln12_fu_1201_p2 <= (bitcast_ln12_fu_1198_p1 xor ap_const_lv32_80000000);
    xor_ln142_fu_569_p0 <= (0=>lrclk_0_data_reg, others=>'-');
    xor_ln142_fu_569_p2 <= (xor_ln142_fu_569_p0 xor ap_const_lv1_1);
    xor_ln147_1_fu_585_p2 <= (or_ln142_fu_564_p2 xor ap_const_lv1_1);
    xor_ln147_fu_574_p2 <= (readyLch xor ap_const_lv1_1);
    xor_ln24_fu_921_p2 <= (ap_const_lv1_1 xor and_ln24_1_reg_1914);
    xor_ln278_1_fu_1650_p2 <= (icmp_ln278_1_reg_2105 xor ap_const_lv1_1);
    xor_ln278_fu_1474_p2 <= (icmp_ln278_reg_2038 xor ap_const_lv1_1);
    xor_ln282_1_fu_1532_p2 <= (or_ln282_1_fu_1528_p2 xor ap_const_lv1_1);
    xor_ln282_fu_1321_p2 <= (or_ln282_fu_1317_p2 xor ap_const_lv1_1);
    xor_ln284_1_fu_1564_p2 <= (or_ln284_1_fu_1558_p2 xor ap_const_lv1_1);
    xor_ln284_fu_1353_p2 <= (or_ln284_fu_1347_p2 xor ap_const_lv1_1);
    xor_ln285_1_fu_1632_p2 <= (icmp_ln285_1_reg_2138 xor ap_const_lv1_1);
    xor_ln285_fu_1456_p2 <= (icmp_ln285_reg_2065 xor ap_const_lv1_1);
    xor_ln28_fu_911_p2 <= (bitcast_ln28_fu_907_p1 xor ap_const_lv32_80000000);
    xor_ln31_fu_964_p2 <= (ap_const_lv1_1 xor and_ln31_1_reg_1920);
    xor_ln35_fu_954_p2 <= (bitcast_ln35_fu_950_p1 xor ap_const_lv32_80000000);
    zext_ln172_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_664_p3),64));
    zext_ln215_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_521_p4),31));
    zext_ln544_1_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_1716),64));
    zext_ln544_2_fu_1667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_reg_2163),64));
    zext_ln544_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_1726),64));
end behav;
