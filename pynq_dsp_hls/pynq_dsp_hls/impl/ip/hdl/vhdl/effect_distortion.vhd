-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity effect_distortion is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inData_l : IN STD_LOGIC_VECTOR (31 downto 0);
    inData_r : IN STD_LOGIC_VECTOR (31 downto 0);
    config_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    config_r_ce0 : OUT STD_LOGIC;
    config_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    config_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of effect_distortion is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv55_0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln368_fu_126_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln368_reg_378 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal or_ln257_1_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_1_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal thresh_fu_169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresh_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal absL_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal absL_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal absR_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal absR_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln257_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_2_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_2_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal monitorDstL_fu_291_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal monitorDstL_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal monitorDstR_fu_307_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal monitorDstR_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_91_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_443 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_448 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_117_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_83_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_87_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_103_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln4_fu_111_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_134_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln257_fu_130_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_3_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln257_2_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_162_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_1_fu_179_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_6_fu_187_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_2_fu_204_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_7_fu_212_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_225_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln257_1_fu_183_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_1_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln257_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_253_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln257_2_fu_208_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_5_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln257_4_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_83_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_1_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_2_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_3_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal bitcast_ln11_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln11_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln11_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_1_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln12_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln12_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln12_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln12_1_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_l_fu_330_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_r_fu_354_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component pynq_dsp_hls_fcmpeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    pynq_dsp_hls_fcmpeOg_U41 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_83_p0,
        din1 => thresh_fu_169_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_83_p2);

    pynq_dsp_hls_fcmpeOg_U42 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_87_p0,
        din1 => thresh_fu_169_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_87_p2);

    pynq_dsp_hls_fcmpeOg_U43 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => inData_l,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_91_p2);

    pynq_dsp_hls_fcmpeOg_U44 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => inData_r,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_97_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    absL_reg_407(30 downto 0) <= absL_fu_195_p1(30 downto 0);
                    absR_reg_413(30 downto 0) <= absR_fu_220_p1(30 downto 0);
                or_ln257_2_reg_425 <= or_ln257_2_fu_275_p2;
                or_ln257_reg_419 <= or_ln257_fu_247_p2;
                    thresh_reg_399(30 downto 0) <= thresh_fu_169_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    monitorDstL_reg_431(30 downto 0) <= monitorDstL_fu_291_p3(30 downto 0);
                    monitorDstR_reg_437(30 downto 0) <= monitorDstR_fu_307_p3(30 downto 0);
                tmp_14_reg_443 <= grp_fu_91_p2;
                tmp_16_reg_448 <= grp_fu_97_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                or_ln257_1_reg_383 <= or_ln257_1_fu_156_p2;
                trunc_ln368_reg_378 <= trunc_ln368_fu_126_p1;
            end if;
        end if;
    end process;
    thresh_reg_399(31) <= '0';
    absL_reg_407(31) <= '0';
    absR_reg_413(31) <= '0';
    monitorDstL_reg_431(31) <= '0';
    monitorDstR_reg_437(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    absL_fu_195_p1 <= p_Result_6_fu_187_p3;
    absR_fu_220_p1 <= p_Result_7_fu_212_p3;
    and_ln11_fu_313_p2 <= (tmp_14_reg_443 and or_ln257_reg_419);
    and_ln12_fu_337_p2 <= (tmp_16_reg_448 and or_ln257_2_reg_425);
    and_ln257_1_fu_285_p2 <= (grp_fu_83_p2 and and_ln257_fu_281_p2);
    and_ln257_2_fu_297_p2 <= (or_ln257_2_reg_425 and or_ln257_1_reg_383);
    and_ln257_3_fu_301_p2 <= (grp_fu_87_p2 and and_ln257_2_fu_297_p2);
    and_ln257_fu_281_p2 <= (or_ln257_reg_419 and or_ln257_1_reg_383);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= dst_l_fu_330_p3;
    ap_return_1 <= dst_r_fu_354_p3;
    bitcast_ln11_1_fu_326_p1 <= xor_ln11_fu_320_p2;
    bitcast_ln11_fu_317_p1 <= monitorDstL_reg_431;
    bitcast_ln12_1_fu_350_p1 <= xor_ln12_fu_344_p2;
    bitcast_ln12_fu_341_p1 <= monitorDstR_reg_437;
    config_r_address0 <= tmp_30_fu_117_p3(8 - 1 downto 0);

    config_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            config_r_ce0 <= ap_const_logic_1;
        else 
            config_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_l_fu_330_p3 <= 
        bitcast_ln11_1_fu_326_p1 when (and_ln11_fu_313_p2(0) = '1') else 
        monitorDstL_reg_431;
    dst_r_fu_354_p3 <= 
        bitcast_ln12_1_fu_350_p1 when (and_ln12_fu_337_p2(0) = '1') else 
        monitorDstR_reg_437;
    grp_fu_83_p0 <= p_Result_6_fu_187_p3;
    grp_fu_87_p0 <= p_Result_7_fu_212_p3;
    icmp_ln257_1_fu_241_p2 <= "1" when (trunc_ln257_1_fu_183_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_2_fu_144_p2 <= "0" when (tmp_8_fu_134_p4 = ap_const_lv8_FF) else "1";
    icmp_ln257_3_fu_150_p2 <= "1" when (trunc_ln257_fu_130_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_4_fu_263_p2 <= "0" when (tmp_10_fu_253_p4 = ap_const_lv8_FF) else "1";
    icmp_ln257_5_fu_269_p2 <= "1" when (trunc_ln257_2_fu_208_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_fu_235_p2 <= "0" when (tmp_7_fu_225_p4 = ap_const_lv8_FF) else "1";
    monitorDstL_fu_291_p3 <= 
        absL_reg_407 when (and_ln257_1_fu_285_p2(0) = '1') else 
        thresh_reg_399;
    monitorDstR_fu_307_p3 <= 
        absR_reg_413 when (and_ln257_3_fu_301_p2(0) = '1') else 
        thresh_reg_399;
    or_ln257_1_fu_156_p2 <= (icmp_ln257_3_fu_150_p2 or icmp_ln257_2_fu_144_p2);
    or_ln257_2_fu_275_p2 <= (icmp_ln257_5_fu_269_p2 or icmp_ln257_4_fu_263_p2);
    or_ln257_fu_247_p2 <= (icmp_ln257_fu_235_p2 or icmp_ln257_1_fu_241_p2);
    or_ln4_fu_111_p2 <= (tmp_29_fu_103_p3 or ap_const_lv9_1);
    p_Result_6_fu_187_p3 <= (ap_const_lv1_0 & trunc_ln368_1_fu_179_p1);
    p_Result_7_fu_212_p3 <= (ap_const_lv1_0 & trunc_ln368_2_fu_204_p1);
    p_Result_s_fu_162_p3 <= (ap_const_lv1_0 & trunc_ln368_reg_378);
    p_Val2_4_fu_175_p1 <= inData_l;
    p_Val2_5_fu_200_p1 <= inData_r;
    thresh_fu_169_p1 <= p_Result_s_fu_162_p3;
    tmp_10_fu_253_p4 <= p_Val2_5_fu_200_p1(30 downto 23);
    tmp_29_fu_103_p3 <= (config_offset & ap_const_lv4_0);
    tmp_30_fu_117_p3 <= (ap_const_lv55_0 & or_ln4_fu_111_p2);
    tmp_7_fu_225_p4 <= p_Val2_4_fu_175_p1(30 downto 23);
    tmp_8_fu_134_p4 <= config_r_q0(30 downto 23);
    trunc_ln257_1_fu_183_p1 <= p_Val2_4_fu_175_p1(23 - 1 downto 0);
    trunc_ln257_2_fu_208_p1 <= p_Val2_5_fu_200_p1(23 - 1 downto 0);
    trunc_ln257_fu_130_p1 <= config_r_q0(23 - 1 downto 0);
    trunc_ln368_1_fu_179_p1 <= p_Val2_4_fu_175_p1(31 - 1 downto 0);
    trunc_ln368_2_fu_204_p1 <= p_Val2_5_fu_200_p1(31 - 1 downto 0);
    trunc_ln368_fu_126_p1 <= config_r_q0(31 - 1 downto 0);
    xor_ln11_fu_320_p2 <= (bitcast_ln11_fu_317_p1 xor ap_const_lv32_80000000);
    xor_ln12_fu_344_p2 <= (bitcast_ln12_fu_341_p1 xor ap_const_lv32_80000000);
end behav;
