-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity effect_iir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inData_l : IN STD_LOGIC_VECTOR (31 downto 0);
    inData_r : IN STD_LOGIC_VECTOR (31 downto 0);
    config_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    config_r_ce0 : OUT STD_LOGIC;
    config_r_we0 : OUT STD_LOGIC;
    config_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    config_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    config_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of effect_iir is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv55_0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv9_C : STD_LOGIC_VECTOR (8 downto 0) := "000001100";
    constant ap_const_lv9_D : STD_LOGIC_VECTOR (8 downto 0) := "000001101";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_lv9_E : STD_LOGIC_VECTOR (8 downto 0) := "000001110";
    constant ap_const_lv9_F : STD_LOGIC_VECTOR (8 downto 0) := "000001111";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv9_9 : STD_LOGIC_VECTOR (8 downto 0) := "000001001";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv9_A : STD_LOGIC_VECTOR (8 downto 0) := "000001010";
    constant ap_const_lv9_B : STD_LOGIC_VECTOR (8 downto 0) := "000001011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_15_fu_247_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_reg_530 : STD_LOGIC_VECTOR (8 downto 0);
    signal config_addr_9_reg_556 : STD_LOGIC_VECTOR (7 downto 0);
    signal config_addr_10_reg_561 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal config_load_9_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal b0_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b0_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal b1_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b1_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal bz1L_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal bz1R_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal config_addr_11_reg_614 : STD_LOGIC_VECTOR (7 downto 0);
    signal config_addr_12_reg_619 : STD_LOGIC_VECTOR (7 downto 0);
    signal b2_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b2_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal bz2L_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal config_addr_5_reg_639 : STD_LOGIC_VECTOR (7 downto 0);
    signal bz2R_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal config_addr_6_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal config_load_6_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal config_addr_7_reg_664 : STD_LOGIC_VECTOR (7 downto 0);
    signal config_addr_8_reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal config_load_1_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal config_load_7_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal config_load_8_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal a1_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal a2_fu_478_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal az1L_fu_483_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal az2L_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_261_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_275_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_289_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_303_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_336_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_350_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_364_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_378_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_402_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_421_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_435_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_449_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_463_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal bitcast_ln705_2_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal bitcast_ln705_3_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln705_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal bitcast_ln705_1_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_188_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_193_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln112_fu_255_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln113_fu_270_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln121_fu_284_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln122_fu_298_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln114_fu_331_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln123_fu_345_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln124_fu_359_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln110_fu_373_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln117_fu_397_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln118_fu_416_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln111_fu_430_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln119_fu_444_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln120_fu_458_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);

    component pynq_dsp_hls_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    pynq_dsp_hls_faddbkb_U1 : component pynq_dsp_hls_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_184_p0,
        din1 => grp_fu_184_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_184_p2);

    pynq_dsp_hls_fmulcud_U2 : component pynq_dsp_hls_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_188_p0,
        din1 => grp_fu_188_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_188_p2);

    pynq_dsp_hls_fmulcud_U3 : component pynq_dsp_hls_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_193_p0,
        din1 => grp_fu_193_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_193_p2);

    pynq_dsp_hls_fmulcud_U4 : component pynq_dsp_hls_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_198_p0,
        din1 => grp_fu_198_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_198_p2);

    pynq_dsp_hls_fmulcud_U5 : component pynq_dsp_hls_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_202_p0,
        din1 => grp_fu_202_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_202_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                b0_reg_578 <= b0_fu_312_p1;
                b1_reg_583 <= b1_fu_317_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                b2_reg_629 <= b2_fu_387_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    config_addr_10_reg_561(7 downto 4) <= tmp_26_fu_303_p3(8 - 1 downto 0)(7 downto 4);
                config_load_9_reg_566 <= config_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    config_addr_11_reg_614(7 downto 4) <= tmp_27_fu_350_p3(8 - 1 downto 0)(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    config_addr_12_reg_619(7 downto 4) <= tmp_28_fu_364_p3(8 - 1 downto 0)(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    config_addr_5_reg_639(7 downto 4) <= tmp_21_fu_402_p3(8 - 1 downto 0)(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    config_addr_6_reg_649(7 downto 4) <= tmp_22_fu_421_p3(8 - 1 downto 0)(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    config_addr_7_reg_664(7 downto 4) <= tmp_23_fu_449_p3(8 - 1 downto 0)(7 downto 4);
                    config_addr_8_reg_669(7 downto 4) <= tmp_24_fu_463_p3(8 - 1 downto 0)(7 downto 4);
                config_load_1_reg_674 <= config_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    config_addr_9_reg_556(7 downto 4) <= tmp_25_fu_289_p3(8 - 1 downto 0)(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                config_load_6_reg_659 <= config_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                config_load_7_reg_679 <= config_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                config_load_8_reg_684 <= config_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_206 <= config_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_211 <= config_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_215 <= grp_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_221 <= grp_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_226 <= grp_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_232 <= config_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_237 <= grp_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_242 <= grp_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_12_reg_721 <= grp_fu_198_p2;
                tmp_14_reg_726 <= grp_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_15_reg_530(8 downto 4) <= tmp_15_fu_247_p3(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_2_reg_609 <= grp_fu_193_p2;
            end if;
        end if;
    end process;
    tmp_15_reg_530(3 downto 0) <= "0000";
    config_addr_9_reg_556(3 downto 0) <= "1100";
    config_addr_10_reg_561(3 downto 0) <= "1101";
    config_addr_11_reg_614(3 downto 0) <= "1110";
    config_addr_12_reg_619(3 downto 0) <= "1111";
    config_addr_5_reg_639(3 downto 0) <= "1000";
    config_addr_6_reg_649(3 downto 0) <= "1001";
    config_addr_7_reg_664(3 downto 0) <= "1010";
    config_addr_8_reg_669(3 downto 0) <= "1011";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a1_fu_472_p1 <= reg_211;
    a2_fu_478_p1 <= config_load_1_reg_674;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= reg_237;
    ap_return_1 <= reg_242;
    az1L_fu_483_p1 <= reg_232;
    az2L_fu_492_p1 <= config_load_7_reg_679;
    b0_fu_312_p1 <= reg_206;
    b1_fu_317_p1 <= reg_211;
    b2_fu_387_p1 <= reg_211;
    bitcast_ln705_1_fu_513_p1 <= reg_242;
    bitcast_ln705_2_fu_500_p1 <= inData_l;
    bitcast_ln705_3_fu_504_p1 <= inData_r;
    bitcast_ln705_fu_508_p1 <= reg_237;
    bz1L_fu_322_p1 <= config_load_9_reg_566;
    bz1R_fu_326_p1 <= reg_206;
    bz2L_fu_392_p1 <= reg_232;
    bz2R_fu_411_p1 <= reg_211;

    config_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state37, config_addr_9_reg_556, config_addr_10_reg_561, ap_CS_fsm_state4, config_addr_11_reg_614, config_addr_12_reg_619, config_addr_5_reg_639, config_addr_6_reg_649, config_addr_7_reg_664, config_addr_8_reg_669, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, tmp_18_fu_261_p3, tmp_19_fu_275_p3, tmp_25_fu_289_p3, tmp_26_fu_303_p3, tmp_20_fu_336_p3, tmp_27_fu_350_p3, tmp_28_fu_364_p3, tmp_16_fu_378_p3, tmp_21_fu_402_p3, tmp_22_fu_421_p3, tmp_17_fu_435_p3, tmp_23_fu_449_p3, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            config_r_address0 <= config_addr_6_reg_649;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            config_r_address0 <= config_addr_5_reg_639;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            config_r_address0 <= config_addr_12_reg_619;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            config_r_address0 <= config_addr_11_reg_614;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            config_r_address0 <= config_addr_10_reg_561;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            config_r_address0 <= config_addr_9_reg_556;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            config_r_address0 <= config_addr_7_reg_664;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            config_r_address0 <= config_addr_8_reg_669;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            config_r_address0 <= tmp_23_fu_449_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            config_r_address0 <= tmp_17_fu_435_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            config_r_address0 <= tmp_22_fu_421_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            config_r_address0 <= tmp_21_fu_402_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            config_r_address0 <= tmp_16_fu_378_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            config_r_address0 <= tmp_28_fu_364_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            config_r_address0 <= tmp_27_fu_350_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            config_r_address0 <= tmp_20_fu_336_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            config_r_address0 <= tmp_26_fu_303_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            config_r_address0 <= tmp_25_fu_289_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            config_r_address0 <= tmp_19_fu_275_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            config_r_address0 <= tmp_18_fu_261_p3(8 - 1 downto 0);
        else 
            config_r_address0 <= "XXXXXXXX";
        end if; 
    end process;


    config_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state37, ap_CS_fsm_state4, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            config_r_ce0 <= ap_const_logic_1;
        else 
            config_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    config_r_d0_assign_proc : process(reg_206, ap_CS_fsm_state22, reg_232, ap_CS_fsm_state23, ap_CS_fsm_state37, config_load_9_reg_566, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, bitcast_ln705_2_fu_500_p1, ap_CS_fsm_state21, bitcast_ln705_3_fu_504_p1, bitcast_ln705_fu_508_p1, ap_CS_fsm_state38, bitcast_ln705_1_fu_513_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            config_r_d0 <= bitcast_ln705_1_fu_513_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            config_r_d0 <= bitcast_ln705_fu_508_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            config_r_d0 <= reg_206;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            config_r_d0 <= config_load_9_reg_566;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            config_r_d0 <= bitcast_ln705_3_fu_504_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            config_r_d0 <= bitcast_ln705_2_fu_500_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            config_r_d0 <= reg_232;
        else 
            config_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    config_r_we0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state37, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            config_r_we0 <= ap_const_logic_1;
        else 
            config_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_184_p0_assign_proc : process(ap_CS_fsm_state10, reg_215, reg_226, ap_CS_fsm_state9, ap_CS_fsm_state16, reg_237, reg_242, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_184_p0 <= reg_242;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_184_p0 <= reg_237;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_184_p0 <= reg_226;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_184_p0 <= reg_215;
        else 
            grp_fu_184_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_184_p1_assign_proc : process(ap_CS_fsm_state10, reg_215, reg_221, reg_226, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state30, tmp_2_reg_609, ap_CS_fsm_state17, tmp_12_reg_721, tmp_14_reg_726, ap_CS_fsm_state24, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_184_p1 <= tmp_14_reg_726;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_184_p1 <= tmp_12_reg_721;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_184_p1 <= reg_226;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_184_p1 <= reg_215;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_184_p1 <= tmp_2_reg_609;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_184_p1 <= reg_221;
        else 
            grp_fu_184_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_188_p0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state13, b0_fu_312_p1, b0_reg_578, ap_CS_fsm_state6, bz2L_fu_392_p1, bz2R_fu_411_p1, ap_CS_fsm_state19, az1L_fu_483_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_188_p0 <= az1L_fu_483_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_188_p0 <= bz2R_fu_411_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_188_p0 <= bz2L_fu_392_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_188_p0 <= b0_reg_578;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_188_p0 <= b0_fu_312_p1;
        else 
            grp_fu_188_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_188_p1_assign_proc : process(inData_l, inData_r, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6, b2_fu_387_p1, b2_reg_629, a1_fu_472_p1, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_188_p1 <= a1_fu_472_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_188_p1 <= b2_reg_629;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_188_p1 <= b2_fu_387_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_188_p1 <= inData_r;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_188_p1 <= inData_l;
        else 
            grp_fu_188_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_193_p0_assign_proc : process(ap_CS_fsm_state5, bz1L_fu_322_p1, ap_CS_fsm_state6, bz1R_fu_326_p1, ap_CS_fsm_state19, az2L_fu_492_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_193_p0 <= az2L_fu_492_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_193_p0 <= bz1R_fu_326_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_193_p0 <= bz1L_fu_322_p1;
        else 
            grp_fu_193_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_193_p1_assign_proc : process(ap_CS_fsm_state5, b1_fu_317_p1, b1_reg_583, ap_CS_fsm_state6, ap_CS_fsm_state19, a2_fu_478_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_193_p1 <= a2_fu_478_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_193_p1 <= b1_reg_583;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_193_p1 <= b1_fu_317_p1;
        else 
            grp_fu_193_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_198_p0 <= config_load_6_reg_659;
    grp_fu_198_p1 <= reg_211;
    grp_fu_202_p0 <= config_load_8_reg_684;
    grp_fu_202_p1 <= config_load_1_reg_674;
    or_ln110_fu_373_p2 <= (tmp_15_reg_530 or ap_const_lv9_3);
    or_ln111_fu_430_p2 <= (tmp_15_reg_530 or ap_const_lv9_4);
    or_ln112_fu_255_p2 <= (tmp_15_fu_247_p3 or ap_const_lv9_5);
    or_ln113_fu_270_p2 <= (tmp_15_reg_530 or ap_const_lv9_6);
    or_ln114_fu_331_p2 <= (tmp_15_reg_530 or ap_const_lv9_7);
    or_ln117_fu_397_p2 <= (tmp_15_reg_530 or ap_const_lv9_8);
    or_ln118_fu_416_p2 <= (tmp_15_reg_530 or ap_const_lv9_9);
    or_ln119_fu_444_p2 <= (tmp_15_reg_530 or ap_const_lv9_A);
    or_ln120_fu_458_p2 <= (tmp_15_reg_530 or ap_const_lv9_B);
    or_ln121_fu_284_p2 <= (tmp_15_reg_530 or ap_const_lv9_C);
    or_ln122_fu_298_p2 <= (tmp_15_reg_530 or ap_const_lv9_D);
    or_ln123_fu_345_p2 <= (tmp_15_reg_530 or ap_const_lv9_E);
    or_ln124_fu_359_p2 <= (tmp_15_reg_530 or ap_const_lv9_F);
    tmp_15_fu_247_p3 <= (config_offset & ap_const_lv4_0);
    tmp_16_fu_378_p3 <= (ap_const_lv55_0 & or_ln110_fu_373_p2);
    tmp_17_fu_435_p3 <= (ap_const_lv55_0 & or_ln111_fu_430_p2);
    tmp_18_fu_261_p3 <= (ap_const_lv55_0 & or_ln112_fu_255_p2);
    tmp_19_fu_275_p3 <= (ap_const_lv55_0 & or_ln113_fu_270_p2);
    tmp_20_fu_336_p3 <= (ap_const_lv55_0 & or_ln114_fu_331_p2);
    tmp_21_fu_402_p3 <= (ap_const_lv55_0 & or_ln117_fu_397_p2);
    tmp_22_fu_421_p3 <= (ap_const_lv55_0 & or_ln118_fu_416_p2);
    tmp_23_fu_449_p3 <= (ap_const_lv55_0 & or_ln119_fu_444_p2);
    tmp_24_fu_463_p3 <= (ap_const_lv55_0 & or_ln120_fu_458_p2);
    tmp_25_fu_289_p3 <= (ap_const_lv55_0 & or_ln121_fu_284_p2);
    tmp_26_fu_303_p3 <= (ap_const_lv55_0 & or_ln122_fu_298_p2);
    tmp_27_fu_350_p3 <= (ap_const_lv55_0 & or_ln123_fu_345_p2);
    tmp_28_fu_364_p3 <= (ap_const_lv55_0 & or_ln124_fu_359_p2);
end behav;
