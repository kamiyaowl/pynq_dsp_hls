-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynq_dsp_hls is
generic (
    C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    lrclk_V : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_physMemPtr_V_AWVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_AWREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_physMemPtr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_WREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH/8-1 downto 0);
    m_axi_physMemPtr_V_WLAST : OUT STD_LOGIC;
    m_axi_physMemPtr_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_ARREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_physMemPtr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RVALID : IN STD_LOGIC;
    m_axi_physMemPtr_V_RREADY : OUT STD_LOGIC;
    m_axi_physMemPtr_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RLAST : IN STD_LOGIC;
    m_axi_physMemPtr_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_BVALID : IN STD_LOGIC;
    m_axi_physMemPtr_V_BREADY : OUT STD_LOGIC;
    m_axi_physMemPtr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH-1 downto 0);
    srcL : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcL_ap_vld : OUT STD_LOGIC;
    srcR : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcR_ap_vld : OUT STD_LOGIC;
    dstL : OUT STD_LOGIC_VECTOR (31 downto 0);
    dstL_ap_vld : OUT STD_LOGIC;
    dstR : OUT STD_LOGIC_VECTOR (31 downto 0);
    dstR_ap_vld : OUT STD_LOGIC;
    numOfStage_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    numOfStage_V_ap_vld : OUT STD_LOGIC;
    configSizePerStage_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    configSizePerStage_V_ap_vld : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pynq_dsp_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pynq_dsp_hls,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=32,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=3,HLS_SYN_FF=4326,HLS_SYN_LUT=6883,HLS_VERSION=2019_1_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (61 downto 0) := "00000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (61 downto 0) := "00000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (61 downto 0) := "00000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (61 downto 0) := "00000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (61 downto 0) := "00000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (61 downto 0) := "00000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (61 downto 0) := "00001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (61 downto 0) := "00010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (61 downto 0) := "00100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (61 downto 0) := "01000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (61 downto 0) := "10000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_4AFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "01001010111111111111111111111110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv9_18 : STD_LOGIC_VECTOR (8 downto 0) := "000011000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal lrclk_V_0_data_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal lrclk_V_0_vld_reg : STD_LOGIC := '0';
    signal lrclk_V_0_ack_out : STD_LOGIC;
    signal basePhysAddr_V : STD_LOGIC_VECTOR (31 downto 0);
    signal configReg_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal configReg_ce0 : STD_LOGIC;
    signal configReg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readyRch : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal readyLch : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal physMemPtr_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal physMemPtr_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln761_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln103_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal physMemPtr_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal physMemPtr_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal physMemPtr_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal icmp_ln761_reg_1328 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln103_reg_1337 : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_AWVALID : STD_LOGIC;
    signal physMemPtr_V_AWREADY : STD_LOGIC;
    signal physMemPtr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_WVALID : STD_LOGIC;
    signal physMemPtr_V_WREADY : STD_LOGIC;
    signal physMemPtr_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_ARVALID : STD_LOGIC;
    signal physMemPtr_V_ARREADY : STD_LOGIC;
    signal physMemPtr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_RVALID : STD_LOGIC;
    signal physMemPtr_V_RREADY : STD_LOGIC;
    signal physMemPtr_V_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_RLAST : STD_LOGIC;
    signal physMemPtr_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal physMemPtr_V_BVALID : STD_LOGIC;
    signal physMemPtr_V_BREADY : STD_LOGIC;
    signal physMemPtr_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal physMemPtr_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal icmp_ln887_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal r_V_fu_428_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_reg_1294 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln215_fu_438_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln215_reg_1299 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_fu_442_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_reg_1304 : STD_LOGIC_VECTOR (30 downto 0);
    signal status_V_reg_1323 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op113_readreq_state10 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal xor_ln98_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lsrc_V_fu_514_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lsrc_V_reg_1362 : STD_LOGIC_VECTOR (23 downto 0);
    signal rsrc_V_fu_518_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal rsrc_V_reg_1367 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1382 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1387 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsrcf_reg_1392 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rsrcf_reg_1398 : STD_LOGIC_VECTOR (31 downto 0);
    signal stageIndex_V_fu_544_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal stageIndex_V_reg_1407 : STD_LOGIC_VECTOR (2 downto 0);
    signal configReg_addr_1_reg_1417 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln125_fu_578_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln125_reg_1422 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal configReg_load_1_reg_1426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal or_ln257_1_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_1_reg_1431 : STD_LOGIC_VECTOR (0 downto 0);
    signal threash_fu_614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal threash_reg_1437 : STD_LOGIC_VECTOR (31 downto 0);
    signal labs_fu_639_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal labs_reg_1445 : STD_LOGIC_VECTOR (31 downto 0);
    signal rabs_fu_664_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rabs_reg_1451 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln257_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_reg_1457 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_2_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_2_reg_1463 : STD_LOGIC_VECTOR (0 downto 0);
    signal ldst_fu_735_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ldst_reg_1469 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal rdst_fu_751_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rdst_reg_1475 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1481 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_reg_1486 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_V_fu_813_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_reg_1490 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_reg_1495 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_fu_843_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln270_reg_1500 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln278_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_1505 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_853_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_reg_1512 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln282_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_reg_1520 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_865_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_reg_1526 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal icmp_ln285_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_1532 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1_fu_885_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_1_reg_1537 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_reg_1542 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_924_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_reg_1547 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_reg_1552 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_V_1_fu_950_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_1_reg_1557 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_reg_1562 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_1_fu_980_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln270_1_reg_1567 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln278_1_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_1_reg_1572 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_2_fu_990_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_2_reg_1579 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln282_1_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_1_reg_1587 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln282_fu_1070_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_reg_1593 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal tmp_4_fu_1077_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_reg_1599 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln285_1_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_1_reg_1605 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_3_fu_1097_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_3_reg_1610 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_1_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_1_reg_1615 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_2_fu_1136_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_2_reg_1620 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_1_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_1_reg_1625 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_1162_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_1_reg_1630 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln303_fu_1172_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln303_reg_1635 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_1_fu_1246_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_1_reg_1640 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln303_1_fu_1268_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln303_1_reg_1653 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_V_reg_306 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_phi_mux_readyRch_flag_1_phi_fu_321_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyRch_flag_1_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op351_writeresp_state62 : BOOLEAN;
    signal ap_block_state62 : BOOLEAN;
    signal ap_phi_mux_readyRch_new_1_phi_fu_336_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyRch_new_1_reg_331 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_readyLch_flag_1_phi_fu_351_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyLch_flag_1_reg_347 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln125_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_569_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_1253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln214_fu_1274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln214_1_fu_1278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln61_1_fu_804_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_3_fu_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal currentData_lch_fu_779_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_376_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_379_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_382_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_386_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln103_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln98_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln103_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln103_1_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_550_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln53_fu_563_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_582_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln257_2_fu_592_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_3_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln257_2_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_fu_619_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_fu_623_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_6_fu_631_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_1_fu_648_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_7_fu_656_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_669_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln257_fu_627_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_1_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln257_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_697_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln257_1_fu_652_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_5_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln257_4_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_1_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_2_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_3_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln60_fu_766_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln60_fu_769_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln60_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln60_1_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln61_fu_795_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln61_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_829_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln262_fu_817_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_fu_839_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln281_fu_872_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln282_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_fu_896_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_966_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln262_1_fu_954_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_1_fu_976_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_1005_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln294_fu_1002_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294cast_fu_1020_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln297_fu_1024_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln295_fu_1029_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln285_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_1_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_1012_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln278_fu_1035_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln278_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_1_fu_1052_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln281_1_fu_1084_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln282_1_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_1_fu_1118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_2_fu_1130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_1_fu_1108_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_1_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_1_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_1_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln461_fu_1167_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_fu_1181_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln294_1_fu_1178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_1cast_fu_1196_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln297_1_fu_1200_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln295_1_fu_1205_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln285_1_fu_1218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_3_fu_1223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_1_fu_1188_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln278_1_fu_1211_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln278_1_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_1_fu_1241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_3_fu_1228_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln461_1_fu_1263_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (61 downto 0);

    component pynq_dsp_hls_fmulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fdivcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_sitodEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fcmpeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pynq_dsp_hls_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        basePhysAddr_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        configReg_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        configReg_ce0 : IN STD_LOGIC;
        configReg_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_physMemPtr_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    pynq_dsp_hls_AXILiteS_s_axi_U : component pynq_dsp_hls_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        basePhysAddr_V => basePhysAddr_V,
        configReg_address0 => configReg_address0,
        configReg_ce0 => configReg_ce0,
        configReg_q0 => configReg_q0);

    pynq_dsp_hls_physMemPtr_V_m_axi_U : component pynq_dsp_hls_physMemPtr_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PHYSMEMPTR_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_PHYSMEMPTR_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_PHYSMEMPTR_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PHYSMEMPTR_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PHYSMEMPTR_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_physMemPtr_V_AWVALID,
        AWREADY => m_axi_physMemPtr_V_AWREADY,
        AWADDR => m_axi_physMemPtr_V_AWADDR,
        AWID => m_axi_physMemPtr_V_AWID,
        AWLEN => m_axi_physMemPtr_V_AWLEN,
        AWSIZE => m_axi_physMemPtr_V_AWSIZE,
        AWBURST => m_axi_physMemPtr_V_AWBURST,
        AWLOCK => m_axi_physMemPtr_V_AWLOCK,
        AWCACHE => m_axi_physMemPtr_V_AWCACHE,
        AWPROT => m_axi_physMemPtr_V_AWPROT,
        AWQOS => m_axi_physMemPtr_V_AWQOS,
        AWREGION => m_axi_physMemPtr_V_AWREGION,
        AWUSER => m_axi_physMemPtr_V_AWUSER,
        WVALID => m_axi_physMemPtr_V_WVALID,
        WREADY => m_axi_physMemPtr_V_WREADY,
        WDATA => m_axi_physMemPtr_V_WDATA,
        WSTRB => m_axi_physMemPtr_V_WSTRB,
        WLAST => m_axi_physMemPtr_V_WLAST,
        WID => m_axi_physMemPtr_V_WID,
        WUSER => m_axi_physMemPtr_V_WUSER,
        ARVALID => m_axi_physMemPtr_V_ARVALID,
        ARREADY => m_axi_physMemPtr_V_ARREADY,
        ARADDR => m_axi_physMemPtr_V_ARADDR,
        ARID => m_axi_physMemPtr_V_ARID,
        ARLEN => m_axi_physMemPtr_V_ARLEN,
        ARSIZE => m_axi_physMemPtr_V_ARSIZE,
        ARBURST => m_axi_physMemPtr_V_ARBURST,
        ARLOCK => m_axi_physMemPtr_V_ARLOCK,
        ARCACHE => m_axi_physMemPtr_V_ARCACHE,
        ARPROT => m_axi_physMemPtr_V_ARPROT,
        ARQOS => m_axi_physMemPtr_V_ARQOS,
        ARREGION => m_axi_physMemPtr_V_ARREGION,
        ARUSER => m_axi_physMemPtr_V_ARUSER,
        RVALID => m_axi_physMemPtr_V_RVALID,
        RREADY => m_axi_physMemPtr_V_RREADY,
        RDATA => m_axi_physMemPtr_V_RDATA,
        RLAST => m_axi_physMemPtr_V_RLAST,
        RID => m_axi_physMemPtr_V_RID,
        RUSER => m_axi_physMemPtr_V_RUSER,
        RRESP => m_axi_physMemPtr_V_RRESP,
        BVALID => m_axi_physMemPtr_V_BVALID,
        BREADY => m_axi_physMemPtr_V_BREADY,
        BRESP => m_axi_physMemPtr_V_BRESP,
        BID => m_axi_physMemPtr_V_BID,
        BUSER => m_axi_physMemPtr_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => physMemPtr_V_ARVALID,
        I_ARREADY => physMemPtr_V_ARREADY,
        I_ARADDR => physMemPtr_V_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => physMemPtr_V_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => physMemPtr_V_RVALID,
        I_RREADY => physMemPtr_V_RREADY,
        I_RDATA => physMemPtr_V_RDATA,
        I_RID => physMemPtr_V_RID,
        I_RUSER => physMemPtr_V_RUSER,
        I_RRESP => physMemPtr_V_RRESP,
        I_RLAST => physMemPtr_V_RLAST,
        I_AWVALID => physMemPtr_V_AWVALID,
        I_AWREADY => physMemPtr_V_AWREADY,
        I_AWADDR => physMemPtr_V_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_2,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => physMemPtr_V_WVALID,
        I_WREADY => physMemPtr_V_WREADY,
        I_WDATA => physMemPtr_V_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => physMemPtr_V_BVALID,
        I_BREADY => physMemPtr_V_BREADY,
        I_BRESP => physMemPtr_V_BRESP,
        I_BID => physMemPtr_V_BID,
        I_BUSER => physMemPtr_V_BUSER);

    pynq_dsp_hls_fmulbkb_U1 : component pynq_dsp_hls_fmulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_361_p0,
        din1 => ap_const_lv32_4AFFFFFE,
        ce => ap_const_logic_1,
        dout => grp_fu_361_p2);

    pynq_dsp_hls_fdivcud_U2 : component pynq_dsp_hls_fdivcud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_1382,
        din1 => ap_const_lv32_4AFFFFFE,
        ce => ap_const_logic_1,
        dout => grp_fu_366_p2);

    pynq_dsp_hls_fdivcud_U3 : component pynq_dsp_hls_fdivcud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_1_reg_1387,
        din1 => ap_const_lv32_4AFFFFFE,
        ce => ap_const_logic_1,
        dout => grp_fu_371_p2);

    pynq_dsp_hls_sitodEe_U4 : component pynq_dsp_hls_sitodEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_376_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_376_p1);

    pynq_dsp_hls_sitodEe_U5 : component pynq_dsp_hls_sitodEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_379_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_379_p1);

    pynq_dsp_hls_fcmpeOg_U6 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_382_p0,
        din1 => threash_fu_614_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_382_p2);

    pynq_dsp_hls_fcmpeOg_U7 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_386_p0,
        din1 => threash_fu_614_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_386_p2);

    pynq_dsp_hls_fcmpeOg_U8 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x_assign_3_fu_178,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_390_p2);

    pynq_dsp_hls_fcmpeOg_U9 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x_assign_fu_174,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_395_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    lrclk_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    readyLch_flag_1_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (or_ln103_fu_498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln761_fu_458_p2 = ap_const_lv1_0))) then 
                readyLch_flag_1_reg_347 <= xor_ln98_fu_476_p2;
            elsif ((not(((ap_predicate_op351_writeresp_state62 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state62) and (or_ln103_reg_1337 = ap_const_lv1_0) and (icmp_ln761_reg_1328 = ap_const_lv1_0))) then 
                readyLch_flag_1_reg_347 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln761_fu_458_p2 = ap_const_lv1_1))) then 
                readyLch_flag_1_reg_347 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    readyRch_flag_1_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (or_ln103_fu_498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln761_fu_458_p2 = ap_const_lv1_0))) then 
                readyRch_flag_1_reg_317 <= lrclk_V_0_data_reg;
            elsif ((not(((ap_predicate_op351_writeresp_state62 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state62) and (or_ln103_reg_1337 = ap_const_lv1_0) and (icmp_ln761_reg_1328 = ap_const_lv1_0))) then 
                readyRch_flag_1_reg_317 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln761_fu_458_p2 = ap_const_lv1_1))) then 
                readyRch_flag_1_reg_317 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    readyRch_new_1_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (or_ln103_fu_498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln761_fu_458_p2 = ap_const_lv1_0))) then 
                readyRch_new_1_reg_331 <= ap_const_lv1_1;
            elsif ((not(((ap_predicate_op351_writeresp_state62 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state62) and (or_ln103_reg_1337 = ap_const_lv1_0) and (icmp_ln761_reg_1328 = ap_const_lv1_0))) then 
                readyRch_new_1_reg_331 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    t_V_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                t_V_reg_306 <= stageIndex_V_reg_1407;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                t_V_reg_306 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    x_assign_3_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln125_reg_1422 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                x_assign_3_fu_178 <= currentData_lch_fu_779_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                x_assign_3_fu_178 <= lsrcf_reg_1392;
            end if; 
        end if;
    end process;

    x_assign_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln125_reg_1422 = ap_const_lv4_1) and (ap_const_lv1_1 = and_ln61_reg_1486) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                x_assign_fu_174 <= bitcast_ln61_1_fu_804_p1;
            elsif (((trunc_ln125_reg_1422 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state48) and (ap_const_lv1_0 = and_ln61_reg_1486))) then 
                x_assign_fu_174 <= rdst_reg_1475;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                x_assign_fu_174 <= rsrcf_reg_1398;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                and_ln284_1_reg_1615 <= and_ln284_1_fu_1124_p2;
                icmp_ln285_1_reg_1605 <= icmp_ln285_1_fu_1092_p2;
                ret_V_1_reg_1630 <= ret_V_1_fu_1162_p2;
                select_ln282_reg_1593 <= select_ln282_fu_1070_p3;
                    tmp_4_reg_1599(22 downto 0) <= tmp_4_fu_1077_p3(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                and_ln284_reg_1542 <= and_ln284_fu_912_p2;
                icmp_ln278_1_reg_1572 <= icmp_ln278_1_fu_984_p2;
                icmp_ln282_1_reg_1587 <= icmp_ln282_1_fu_996_p2;
                icmp_ln285_reg_1532 <= icmp_ln285_fu_880_p2;
                p_Result_9_reg_1562 <= reg_V_1_fu_950_p1(31 downto 31);
                reg_V_1_reg_1557 <= reg_V_1_fu_950_p1;
                sh_amt_2_reg_1579 <= sh_amt_2_fu_990_p2;
                    tmp_2_reg_1526(22 downto 0) <= tmp_2_fu_865_p3(22 downto 0);
                trunc_ln270_1_reg_1567 <= trunc_ln270_1_fu_980_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) and (icmp_ln278_1_reg_1572 = ap_const_lv1_0))) then
                and_ln295_1_reg_1625 <= and_ln295_1_fu_1156_p2;
                select_ln285_2_reg_1620 <= select_ln285_2_fu_1136_p3;
                sh_amt_3_reg_1610 <= sh_amt_3_fu_1097_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp_ln278_reg_1505 = ap_const_lv1_0))) then
                and_ln295_reg_1552 <= and_ln295_fu_944_p2;
                select_ln285_reg_1547 <= select_ln285_fu_924_p3;
                sh_amt_1_reg_1537 <= sh_amt_1_fu_885_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                and_ln61_reg_1486 <= and_ln61_fu_757_p2;
                ldst_reg_1469 <= ldst_fu_735_p3;
                rdst_reg_1475 <= rdst_fu_751_p3;
                tmp_12_reg_1481 <= grp_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (icmp_ln887_fu_538_p2 = ap_const_lv1_0))) then
                    configReg_addr_1_reg_1417(3 downto 2) <= tmp_6_fu_569_p3(4 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                configReg_load_1_reg_1426 <= configReg_q0;
                or_ln257_1_reg_1431 <= or_ln257_1_fu_608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                icmp_ln278_reg_1505 <= icmp_ln278_fu_847_p2;
                icmp_ln282_reg_1520 <= icmp_ln282_fu_859_p2;
                p_Result_8_reg_1495 <= reg_V_fu_813_p1(31 downto 31);
                reg_V_reg_1490 <= reg_V_fu_813_p1;
                sh_amt_reg_1512 <= sh_amt_fu_853_p2;
                trunc_ln270_reg_1500 <= trunc_ln270_fu_843_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                icmp_ln761_reg_1328 <= icmp_ln761_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                    labs_reg_1445(30 downto 0) <= labs_fu_639_p1(30 downto 0);
                or_ln257_2_reg_1463 <= or_ln257_2_fu_719_p2;
                or_ln257_reg_1457 <= or_ln257_fu_691_p2;
                    rabs_reg_1451(30 downto 0) <= rabs_fu_664_p1(30 downto 0);
                threash_reg_1437 <= threash_fu_614_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lrclk_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lrclk_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (lrclk_V_0_vld_reg = ap_const_logic_1)))) then
                lrclk_V_0_data_reg <= lrclk_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                lsrc_V_reg_1362 <= lsrc_V_fu_514_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                lsrcf_reg_1392 <= grp_fu_366_p2;
                rsrcf_reg_1398 <= grp_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln761_fu_458_p2 = ap_const_lv1_0))) then
                or_ln103_reg_1337 <= or_ln103_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                r_V_reg_1294 <= basePhysAddr_V(31 downto 2);
                ret_V_reg_1304 <= ret_V_fu_442_p2;
                    zext_ln215_reg_1299(29 downto 0) <= zext_ln215_fu_438_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op351_writeresp_state62 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_phi_mux_readyLch_flag_1_phi_fu_351_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                readyLch <= ap_phi_mux_readyRch_new_1_phi_fu_336_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op351_writeresp_state62 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_phi_mux_readyRch_flag_1_phi_fu_321_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                readyRch <= ap_phi_mux_readyRch_new_1_phi_fu_336_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51))) then
                reg_422 <= grp_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                rsrc_V_reg_1367 <= rsrc_V_fu_518_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                select_ln282_1_reg_1640 <= select_ln282_1_fu_1246_p3;
                select_ln303_reg_1635 <= select_ln303_fu_1172_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                select_ln303_1_reg_1653 <= select_ln303_1_fu_1268_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                stageIndex_V_reg_1407 <= stageIndex_V_fu_544_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                status_V_reg_1323 <= physMemPtr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_1_reg_1387 <= grp_fu_379_p1;
                tmp_reg_1382 <= grp_fu_376_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                trunc_ln125_reg_1422 <= trunc_ln125_fu_578_p1;
            end if;
        end if;
    end process;
    zext_ln215_reg_1299(30) <= '0';
    configReg_addr_1_reg_1417(1 downto 0) <= "01";
    labs_reg_1445(31) <= '0';
    rabs_reg_1451(31) <= '0';
    tmp_2_reg_1526(23) <= '1';
    tmp_4_reg_1599(23) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, icmp_ln761_fu_458_p2, or_ln103_fu_498_p2, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state62, physMemPtr_V_AWREADY, physMemPtr_V_WREADY, physMemPtr_V_ARREADY, physMemPtr_V_RVALID, physMemPtr_V_BVALID, ap_CS_fsm_state42, icmp_ln887_fu_538_p2, ap_block_state10_io, trunc_ln125_fu_578_p1, ap_CS_fsm_state43, ap_predicate_op351_writeresp_state62)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln103_fu_498_p2 = ap_const_lv1_0) and (icmp_ln761_fu_458_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10) and ((or_ln103_fu_498_p2 = ap_const_lv1_1) or (icmp_ln761_fu_458_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((icmp_ln887_fu_538_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and ((trunc_ln125_fu_578_p1 = ap_const_lv4_0) or ((trunc_ln125_fu_578_p1 = ap_const_lv4_A) or ((trunc_ln125_fu_578_p1 = ap_const_lv4_B) or ((trunc_ln125_fu_578_p1 = ap_const_lv4_C) or ((trunc_ln125_fu_578_p1 = ap_const_lv4_D) or ((trunc_ln125_fu_578_p1 = ap_const_lv4_F) or (trunc_ln125_fu_578_p1 = ap_const_lv4_E))))))))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                elsif (((trunc_ln125_fu_578_p1 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                if ((not(((ap_predicate_op351_writeresp_state62 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln103_fu_487_p2 <= (xor_ln103_fu_481_p2 and lrclk_V_0_data_reg);
    and_ln257_1_fu_729_p2 <= (grp_fu_382_p2 and and_ln257_fu_725_p2);
    and_ln257_2_fu_741_p2 <= (or_ln257_2_reg_1463 and or_ln257_1_reg_1431);
    and_ln257_3_fu_745_p2 <= (grp_fu_386_p2 and and_ln257_2_fu_741_p2);
    and_ln257_fu_725_p2 <= (or_ln257_reg_1457 and or_ln257_1_reg_1431);
    and_ln282_1_fu_1241_p2 <= (xor_ln278_1_fu_1236_p2 and icmp_ln282_1_reg_1587);
    and_ln282_fu_1065_p2 <= (xor_ln278_fu_1060_p2 and icmp_ln282_reg_1520);
    and_ln284_1_fu_1124_p2 <= (xor_ln282_1_fu_1118_p2 and icmp_ln284_1_fu_1087_p2);
    and_ln284_fu_912_p2 <= (xor_ln282_fu_906_p2 and icmp_ln284_fu_875_p2);
    and_ln285_1_fu_1047_p2 <= (xor_ln285_fu_1042_p2 and and_ln284_reg_1542);
    and_ln285_2_fu_1130_p2 <= (icmp_ln285_1_fu_1092_p2 and and_ln284_1_fu_1124_p2);
    and_ln285_3_fu_1223_p2 <= (xor_ln285_1_fu_1218_p2 and and_ln284_1_reg_1615);
    and_ln285_fu_918_p2 <= (icmp_ln285_fu_880_p2 and and_ln284_fu_912_p2);
    and_ln295_1_fu_1156_p2 <= (xor_ln284_1_fu_1150_p2 and icmp_ln295_1_fu_1102_p2);
    and_ln295_fu_944_p2 <= (xor_ln284_fu_938_p2 and icmp_ln295_fu_890_p2);
    and_ln60_fu_762_p2 <= (tmp_12_reg_1481 and or_ln257_reg_1457);
    and_ln61_fu_757_p2 <= (or_ln257_2_reg_1463 and grp_fu_395_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_io_assign_proc : process(physMemPtr_V_ARREADY, ap_predicate_op113_readreq_state10)
    begin
                ap_block_state10_io <= ((ap_predicate_op113_readreq_state10 = ap_const_boolean_1) and (physMemPtr_V_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state62_assign_proc : process(physMemPtr_V_BVALID, ap_predicate_op351_writeresp_state62)
    begin
                ap_block_state62 <= ((ap_predicate_op351_writeresp_state62 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state62, physMemPtr_V_BVALID, ap_predicate_op351_writeresp_state62)
    begin
        if ((not(((ap_predicate_op351_writeresp_state62 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_readyLch_flag_1_phi_fu_351_p6_assign_proc : process(ap_CS_fsm_state62, icmp_ln761_reg_1328, or_ln103_reg_1337, readyLch_flag_1_reg_347)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) and (or_ln103_reg_1337 = ap_const_lv1_0) and (icmp_ln761_reg_1328 = ap_const_lv1_0))) then 
            ap_phi_mux_readyLch_flag_1_phi_fu_351_p6 <= ap_const_lv1_1;
        else 
            ap_phi_mux_readyLch_flag_1_phi_fu_351_p6 <= readyLch_flag_1_reg_347;
        end if; 
    end process;


    ap_phi_mux_readyRch_flag_1_phi_fu_321_p6_assign_proc : process(ap_CS_fsm_state62, icmp_ln761_reg_1328, or_ln103_reg_1337, readyRch_flag_1_reg_317)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) and (or_ln103_reg_1337 = ap_const_lv1_0) and (icmp_ln761_reg_1328 = ap_const_lv1_0))) then 
            ap_phi_mux_readyRch_flag_1_phi_fu_321_p6 <= ap_const_lv1_1;
        else 
            ap_phi_mux_readyRch_flag_1_phi_fu_321_p6 <= readyRch_flag_1_reg_317;
        end if; 
    end process;


    ap_phi_mux_readyRch_new_1_phi_fu_336_p6_assign_proc : process(ap_CS_fsm_state62, icmp_ln761_reg_1328, or_ln103_reg_1337, readyRch_new_1_reg_331)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) and (or_ln103_reg_1337 = ap_const_lv1_0) and (icmp_ln761_reg_1328 = ap_const_lv1_0))) then 
            ap_phi_mux_readyRch_new_1_phi_fu_336_p6 <= ap_const_lv1_0;
        else 
            ap_phi_mux_readyRch_new_1_phi_fu_336_p6 <= readyRch_new_1_reg_331;
        end if; 
    end process;


    ap_predicate_op113_readreq_state10_assign_proc : process(icmp_ln761_fu_458_p2, or_ln103_fu_498_p2)
    begin
                ap_predicate_op113_readreq_state10 <= ((or_ln103_fu_498_p2 = ap_const_lv1_0) and (icmp_ln761_fu_458_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op351_writeresp_state62_assign_proc : process(icmp_ln761_reg_1328, or_ln103_reg_1337)
    begin
                ap_predicate_op351_writeresp_state62 <= ((or_ln103_reg_1337 = ap_const_lv1_0) and (icmp_ln761_reg_1328 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state62, physMemPtr_V_BVALID, ap_predicate_op351_writeresp_state62)
    begin
        if ((not(((ap_predicate_op351_writeresp_state62 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln60_1_fu_775_p1 <= xor_ln60_fu_769_p2;
    bitcast_ln60_fu_766_p1 <= ldst_reg_1469;
    bitcast_ln61_1_fu_804_p1 <= xor_ln61_fu_798_p2;
    bitcast_ln61_fu_795_p1 <= rdst_reg_1475;

    configReg_address0_assign_proc : process(ap_CS_fsm_state42, configReg_addr_1_reg_1417, ap_CS_fsm_state43, zext_ln125_fu_558_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            configReg_address0 <= configReg_addr_1_reg_1417;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            configReg_address0 <= zext_ln125_fu_558_p1(4 - 1 downto 0);
        else 
            configReg_address0 <= "XXXX";
        end if; 
    end process;


    configReg_ce0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            configReg_ce0 <= ap_const_logic_1;
        else 
            configReg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    configSizePerStage_V <= ap_const_lv32_4;

    configSizePerStage_V_ap_vld_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            configSizePerStage_V_ap_vld <= ap_const_logic_1;
        else 
            configSizePerStage_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    currentData_lch_fu_779_p3 <= 
        bitcast_ln60_1_fu_775_p1 when (and_ln60_fu_762_p2(0) = '1') else 
        ldst_reg_1469;
    dstL <= reg_422;

    dstL_ap_vld_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            dstL_ap_vld <= ap_const_logic_1;
        else 
            dstL_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dstR <= reg_422;

    dstR_ap_vld_assign_proc : process(ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            dstR_ap_vld <= ap_const_logic_1;
        else 
            dstR_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exp_V_1_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_fu_966_p4),9));
    exp_V_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_829_p4),9));

    grp_fu_361_p0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state49, x_assign_fu_174, x_assign_3_fu_178)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_361_p0 <= x_assign_fu_174;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_361_p0 <= x_assign_3_fu_178;
        else 
            grp_fu_361_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

        grp_fu_376_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(lsrc_V_reg_1362),32));

        grp_fu_379_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(rsrc_V_reg_1367),32));

    grp_fu_382_p0 <= p_Result_6_fu_631_p3;
    grp_fu_386_p0 <= p_Result_7_fu_656_p3;
    icmp_ln257_1_fu_685_p2 <= "1" when (trunc_ln257_fu_627_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_2_fu_596_p2 <= "0" when (tmp_9_fu_582_p4 = ap_const_lv8_FF) else "1";
    icmp_ln257_3_fu_602_p2 <= "1" when (trunc_ln257_2_fu_592_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_4_fu_707_p2 <= "0" when (tmp_10_fu_697_p4 = ap_const_lv8_FF) else "1";
    icmp_ln257_5_fu_713_p2 <= "1" when (trunc_ln257_1_fu_652_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_fu_679_p2 <= "0" when (tmp_8_fu_669_p4 = ap_const_lv8_FF) else "1";
    icmp_ln278_1_fu_984_p2 <= "1" when (trunc_ln262_1_fu_954_p1 = ap_const_lv31_0) else "0";
    icmp_ln278_fu_847_p2 <= "1" when (trunc_ln262_fu_817_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_1_fu_996_p2 <= "1" when (p_Result_4_fu_966_p4 = ap_const_lv8_96) else "0";
    icmp_ln282_fu_859_p2 <= "1" when (p_Result_s_fu_829_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_1_fu_1087_p2 <= "1" when (signed(sh_amt_2_reg_1579) > signed(ap_const_lv9_0)) else "0";
    icmp_ln284_fu_875_p2 <= "1" when (signed(sh_amt_reg_1512) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_1_fu_1092_p2 <= "1" when (signed(sh_amt_2_reg_1579) < signed(ap_const_lv9_19)) else "0";
    icmp_ln285_fu_880_p2 <= "1" when (signed(sh_amt_reg_1512) < signed(ap_const_lv9_19)) else "0";
    icmp_ln295_1_fu_1102_p2 <= "1" when (signed(sh_amt_3_fu_1097_p2) < signed(ap_const_lv9_18)) else "0";
    icmp_ln295_fu_890_p2 <= "1" when (signed(sh_amt_1_fu_885_p2) < signed(ap_const_lv9_18)) else "0";
    icmp_ln761_fu_458_p2 <= "1" when (status_V_reg_1323 = ap_const_lv32_0) else "0";
    icmp_ln887_fu_538_p2 <= "1" when (t_V_reg_306 = ap_const_lv3_4) else "0";
    labs_fu_639_p1 <= p_Result_6_fu_631_p3;
    ldst_fu_735_p3 <= 
        labs_reg_1445 when (and_ln257_1_fu_729_p2(0) = '1') else 
        threash_reg_1437;

    lrclk_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state62, physMemPtr_V_ARREADY, physMemPtr_V_BVALID, ap_predicate_op351_writeresp_state62)
    begin
        if (((not(((ap_predicate_op351_writeresp_state62 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            lrclk_V_0_ack_out <= ap_const_logic_1;
        else 
            lrclk_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln286_1_fu_1108_p2 <= std_logic_vector(shift_right(unsigned(tmp_4_fu_1077_p3),to_integer(unsigned('0' & sext_ln281_1_fu_1084_p1(24-1 downto 0)))));
    lshr_ln286_fu_896_p2 <= std_logic_vector(shift_right(unsigned(tmp_2_fu_865_p3),to_integer(unsigned('0' & sext_ln281_fu_872_p1(24-1 downto 0)))));
    lsrc_V_fu_514_p1 <= physMemPtr_V_RDATA(24 - 1 downto 0);
    numOfStage_V <= ap_const_lv32_4;

    numOfStage_V_ap_vld_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            numOfStage_V_ap_vld <= ap_const_logic_1;
        else 
            numOfStage_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln103_fu_498_p2 <= (xor_ln103_1_fu_492_p2 or and_ln103_fu_487_p2);
    or_ln257_1_fu_608_p2 <= (icmp_ln257_3_fu_602_p2 or icmp_ln257_2_fu_596_p2);
    or_ln257_2_fu_719_p2 <= (icmp_ln257_5_fu_713_p2 or icmp_ln257_4_fu_707_p2);
    or_ln257_fu_691_p2 <= (icmp_ln257_fu_679_p2 or icmp_ln257_1_fu_685_p2);
    or_ln282_1_fu_1114_p2 <= (icmp_ln282_1_reg_1587 or icmp_ln278_1_reg_1572);
    or_ln282_fu_902_p2 <= (icmp_ln282_reg_1520 or icmp_ln278_reg_1505);
    or_ln284_1_fu_1144_p2 <= (or_ln282_1_fu_1114_p2 or icmp_ln284_1_fu_1087_p2);
    or_ln284_fu_932_p2 <= (or_ln282_fu_902_p2 or icmp_ln284_fu_875_p2);
    or_ln53_fu_563_p2 <= (tmp_3_fu_550_p3 or ap_const_lv5_1);
    or_ln98_fu_471_p2 <= (readyRch or lrclk_V_0_data_reg);
    p_Result_4_fu_966_p4 <= reg_V_1_fu_950_p1(30 downto 23);
    p_Result_6_fu_631_p3 <= (ap_const_lv1_0 & trunc_ln368_fu_623_p1);
    p_Result_7_fu_656_p3 <= (ap_const_lv1_0 & trunc_ln368_1_fu_648_p1);
    p_Result_s_fu_829_p4 <= reg_V_fu_813_p1(30 downto 23);
    p_Val2_4_fu_619_p1 <= x_assign_3_fu_178;
    p_Val2_5_fu_644_p1 <= x_assign_fu_174;

    physMemPtr_V_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, physMemPtr_V_ARREADY, ap_predicate_op113_readreq_state10, ap_block_state10_io, zext_ln544_fu_448_p1, zext_ln544_1_fu_504_p1)
    begin
        if (((ap_predicate_op113_readreq_state10 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            physMemPtr_V_ARADDR <= zext_ln544_1_fu_504_p1(32 - 1 downto 0);
        elsif (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            physMemPtr_V_ARADDR <= zext_ln544_fu_448_p1(32 - 1 downto 0);
        else 
            physMemPtr_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, physMemPtr_V_ARREADY, ap_predicate_op113_readreq_state10, ap_block_state10_io)
    begin
        if (((ap_predicate_op113_readreq_state10 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            physMemPtr_V_ARLEN <= ap_const_lv32_2;
        elsif (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            physMemPtr_V_ARLEN <= ap_const_lv32_1;
        else 
            physMemPtr_V_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, physMemPtr_V_ARREADY, ap_predicate_op113_readreq_state10, ap_block_state10_io)
    begin
        if ((((ap_predicate_op113_readreq_state10 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            physMemPtr_V_ARVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    physMemPtr_V_AWADDR <= zext_ln544_2_fu_1253_p1(32 - 1 downto 0);

    physMemPtr_V_AWVALID_assign_proc : process(ap_CS_fsm_state55, physMemPtr_V_AWREADY)
    begin
        if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            physMemPtr_V_AWVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_BREADY_assign_proc : process(ap_CS_fsm_state62, physMemPtr_V_BVALID, ap_predicate_op351_writeresp_state62)
    begin
        if ((not(((ap_predicate_op351_writeresp_state62 = ap_const_boolean_1) and (physMemPtr_V_BVALID = ap_const_logic_0))) and (ap_predicate_op351_writeresp_state62 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            physMemPtr_V_BREADY <= ap_const_logic_1;
        else 
            physMemPtr_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_RREADY_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state18, physMemPtr_V_RVALID)
    begin
        if ((((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            physMemPtr_V_RREADY <= ap_const_logic_1;
        else 
            physMemPtr_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_WDATA_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state57, sext_ln214_fu_1274_p1, sext_ln214_1_fu_1278_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            physMemPtr_V_WDATA <= sext_ln214_1_fu_1278_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            physMemPtr_V_WDATA <= sext_ln214_fu_1274_p1;
        else 
            physMemPtr_V_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_WVALID_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state57, physMemPtr_V_WREADY)
    begin
        if ((((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56)))) then 
            physMemPtr_V_WVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_blk_n_AR_assign_proc : process(m_axi_physMemPtr_V_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state10, icmp_ln761_fu_458_p2, or_ln103_fu_498_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln103_fu_498_p2 = ap_const_lv1_0) and (icmp_ln761_fu_458_p2 = ap_const_lv1_0)))) then 
            physMemPtr_V_blk_n_AR <= m_axi_physMemPtr_V_ARREADY;
        else 
            physMemPtr_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_AW_assign_proc : process(m_axi_physMemPtr_V_AWREADY, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            physMemPtr_V_blk_n_AW <= m_axi_physMemPtr_V_AWREADY;
        else 
            physMemPtr_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_B_assign_proc : process(m_axi_physMemPtr_V_BVALID, ap_CS_fsm_state62, icmp_ln761_reg_1328, or_ln103_reg_1337)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) and (or_ln103_reg_1337 = ap_const_lv1_0) and (icmp_ln761_reg_1328 = ap_const_lv1_0))) then 
            physMemPtr_V_blk_n_B <= m_axi_physMemPtr_V_BVALID;
        else 
            physMemPtr_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_R_assign_proc : process(m_axi_physMemPtr_V_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            physMemPtr_V_blk_n_R <= m_axi_physMemPtr_V_RVALID;
        else 
            physMemPtr_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_W_assign_proc : process(m_axi_physMemPtr_V_WREADY, ap_CS_fsm_state56, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            physMemPtr_V_blk_n_W <= m_axi_physMemPtr_V_WREADY;
        else 
            physMemPtr_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    r_V_fu_428_p4 <= basePhysAddr_V(31 downto 2);
    rabs_fu_664_p1 <= p_Result_7_fu_656_p3;
    rdst_fu_751_p3 <= 
        rabs_reg_1451 when (and_ln257_3_fu_745_p2(0) = '1') else 
        threash_reg_1437;
    reg_V_1_fu_950_p1 <= reg_422;
    reg_V_fu_813_p1 <= reg_422;
    ret_V_1_fu_1162_p2 <= std_logic_vector(unsigned(ap_const_lv31_2) + unsigned(zext_ln215_reg_1299));
    ret_V_fu_442_p2 <= std_logic_vector(unsigned(zext_ln215_fu_438_p1) + unsigned(ap_const_lv31_4));
    rsrc_V_fu_518_p1 <= physMemPtr_V_RDATA(24 - 1 downto 0);
    select_ln278_1_fu_1211_p3 <= 
        ap_const_lv24_0 when (icmp_ln278_1_reg_1572(0) = '1') else 
        select_ln295_1_fu_1205_p3;
    select_ln278_fu_1035_p3 <= 
        ap_const_lv24_0 when (icmp_ln278_reg_1505(0) = '1') else 
        select_ln295_fu_1029_p3;
    select_ln282_1_fu_1246_p3 <= 
        tmp_4_reg_1599 when (and_ln282_1_fu_1241_p2(0) = '1') else 
        select_ln285_3_fu_1228_p3;
    select_ln282_fu_1070_p3 <= 
        tmp_2_reg_1526 when (and_ln282_fu_1065_p2(0) = '1') else 
        select_ln285_1_fu_1052_p3;
    select_ln285_1_fu_1052_p3 <= 
        select_ln288_fu_1012_p3 when (and_ln285_1_fu_1047_p2(0) = '1') else 
        select_ln278_fu_1035_p3;
    select_ln285_2_fu_1136_p3 <= 
        lshr_ln286_1_fu_1108_p2 when (and_ln285_2_fu_1130_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln285_3_fu_1228_p3 <= 
        select_ln288_1_fu_1188_p3 when (and_ln285_3_fu_1223_p2(0) = '1') else 
        select_ln278_1_fu_1211_p3;
    select_ln285_fu_924_p3 <= 
        lshr_ln286_fu_896_p2 when (and_ln285_fu_918_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln288_1_fu_1188_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_7_fu_1181_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln288_fu_1012_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_5_fu_1005_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln295_1_fu_1205_p3 <= 
        shl_ln297_1_fu_1200_p2 when (and_ln295_1_reg_1625(0) = '1') else 
        select_ln285_2_reg_1620;
    select_ln295_fu_1029_p3 <= 
        shl_ln297_fu_1024_p2 when (and_ln295_reg_1552(0) = '1') else 
        select_ln285_reg_1547;
    select_ln303_1_fu_1268_p3 <= 
        sub_ln461_1_fu_1263_p2 when (p_Result_9_reg_1562(0) = '1') else 
        select_ln282_1_reg_1640;
    select_ln303_fu_1172_p3 <= 
        sub_ln461_fu_1167_p2 when (p_Result_8_reg_1495(0) = '1') else 
        select_ln282_reg_1593;
        sext_ln214_1_fu_1278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln303_1_reg_1653),32));

        sext_ln214_fu_1274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln303_reg_1635),32));

        sext_ln281_1_fu_1084_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_reg_1579),24));

        sext_ln281_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1512),24));

        sext_ln294_1_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_3_reg_1610),32));

    sext_ln294_1cast_fu_1196_p1 <= sext_ln294_1_fu_1178_p1(24 - 1 downto 0);
        sext_ln294_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_1537),32));

    sext_ln294cast_fu_1020_p1 <= sext_ln294_fu_1002_p1(24 - 1 downto 0);
    sh_amt_1_fu_885_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_reg_1512));
    sh_amt_2_fu_990_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_1_fu_976_p1));
    sh_amt_3_fu_1097_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_2_reg_1579));
    sh_amt_fu_853_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_fu_839_p1));
    shl_ln297_1_fu_1200_p2 <= std_logic_vector(shift_left(unsigned(tmp_4_reg_1599),to_integer(unsigned('0' & sext_ln294_1cast_fu_1196_p1(24-1 downto 0)))));
    shl_ln297_fu_1024_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_reg_1526),to_integer(unsigned('0' & sext_ln294cast_fu_1020_p1(24-1 downto 0)))));
    srcL <= lsrcf_reg_1392;

    srcL_ap_vld_assign_proc : process(ap_CS_fsm_state42, icmp_ln887_fu_538_p2)
    begin
        if (((icmp_ln887_fu_538_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            srcL_ap_vld <= ap_const_logic_1;
        else 
            srcL_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    srcR <= rsrcf_reg_1398;

    srcR_ap_vld_assign_proc : process(ap_CS_fsm_state42, icmp_ln887_fu_538_p2)
    begin
        if (((icmp_ln887_fu_538_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            srcR_ap_vld <= ap_const_logic_1;
        else 
            srcR_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    stageIndex_V_fu_544_p2 <= std_logic_vector(unsigned(t_V_reg_306) + unsigned(ap_const_lv3_1));
    sub_ln461_1_fu_1263_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(select_ln282_1_reg_1640));
    sub_ln461_fu_1167_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(select_ln282_reg_1593));
    threash_fu_614_p1 <= configReg_load_1_reg_1426;
    tmp_10_fu_697_p4 <= p_Val2_5_fu_644_p1(30 downto 23);
    tmp_2_fu_865_p3 <= (ap_const_lv1_1 & trunc_ln270_reg_1500);
    tmp_3_fu_550_p3 <= (t_V_reg_306 & ap_const_lv2_0);
    tmp_4_fu_1077_p3 <= (ap_const_lv1_1 & trunc_ln270_1_reg_1567);
    tmp_5_fu_1005_p3 <= reg_V_reg_1490(31 downto 31);
    tmp_6_fu_569_p3 <= (ap_const_lv59_0 & or_ln53_fu_563_p2);
    tmp_7_fu_1181_p3 <= reg_V_1_reg_1557(31 downto 31);
    tmp_8_fu_669_p4 <= p_Val2_4_fu_619_p1(30 downto 23);
    tmp_9_fu_582_p4 <= configReg_q0(30 downto 23);
    trunc_ln125_fu_578_p1 <= configReg_q0(4 - 1 downto 0);
    trunc_ln257_1_fu_652_p1 <= p_Val2_5_fu_644_p1(23 - 1 downto 0);
    trunc_ln257_2_fu_592_p1 <= configReg_q0(23 - 1 downto 0);
    trunc_ln257_fu_627_p1 <= p_Val2_4_fu_619_p1(23 - 1 downto 0);
    trunc_ln262_1_fu_954_p1 <= reg_V_1_fu_950_p1(31 - 1 downto 0);
    trunc_ln262_fu_817_p1 <= reg_V_fu_813_p1(31 - 1 downto 0);
    trunc_ln270_1_fu_980_p1 <= reg_V_1_fu_950_p1(23 - 1 downto 0);
    trunc_ln270_fu_843_p1 <= reg_V_fu_813_p1(23 - 1 downto 0);
    trunc_ln368_1_fu_648_p1 <= p_Val2_5_fu_644_p1(31 - 1 downto 0);
    trunc_ln368_fu_623_p1 <= p_Val2_4_fu_619_p1(31 - 1 downto 0);
    xor_ln103_1_fu_492_p2 <= (or_ln98_fu_471_p2 xor ap_const_lv1_1);
    xor_ln103_fu_481_p2 <= (readyLch xor ap_const_lv1_1);
    xor_ln278_1_fu_1236_p2 <= (icmp_ln278_1_reg_1572 xor ap_const_lv1_1);
    xor_ln278_fu_1060_p2 <= (icmp_ln278_reg_1505 xor ap_const_lv1_1);
    xor_ln282_1_fu_1118_p2 <= (or_ln282_1_fu_1114_p2 xor ap_const_lv1_1);
    xor_ln282_fu_906_p2 <= (or_ln282_fu_902_p2 xor ap_const_lv1_1);
    xor_ln284_1_fu_1150_p2 <= (or_ln284_1_fu_1144_p2 xor ap_const_lv1_1);
    xor_ln284_fu_938_p2 <= (or_ln284_fu_932_p2 xor ap_const_lv1_1);
    xor_ln285_1_fu_1218_p2 <= (icmp_ln285_1_reg_1605 xor ap_const_lv1_1);
    xor_ln285_fu_1042_p2 <= (icmp_ln285_reg_1532 xor ap_const_lv1_1);
    xor_ln60_fu_769_p2 <= (bitcast_ln60_fu_766_p1 xor ap_const_lv32_80000000);
    xor_ln61_fu_798_p2 <= (bitcast_ln61_fu_795_p1 xor ap_const_lv32_80000000);
    xor_ln98_fu_476_p2 <= (lrclk_V_0_data_reg xor ap_const_lv1_1);
    zext_ln125_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_550_p3),64));
    zext_ln215_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_428_p4),31));
    zext_ln544_1_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_1294),64));
    zext_ln544_2_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_reg_1630),64));
    zext_ln544_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_1304),64));
end behav;
