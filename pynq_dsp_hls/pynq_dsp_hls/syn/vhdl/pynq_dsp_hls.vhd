-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynq_dsp_hls is
generic (
    C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_EXTMEMPTR_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_EXTMEMPTR_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EXTMEMPTR_V_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PHYSMEMPTR_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PHYSMEMPTR_V_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_EXTMEMPTR_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_EXTMEMPTR_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_EXTMEMPTR_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_EXTMEMPTR_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    lrclk : IN STD_LOGIC;
    m_axi_physMemPtr_V_AWVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_AWREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_physMemPtr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_WREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH/8-1 downto 0);
    m_axi_physMemPtr_V_WLAST : OUT STD_LOGIC;
    m_axi_physMemPtr_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARVALID : OUT STD_LOGIC;
    m_axi_physMemPtr_V_ARREADY : IN STD_LOGIC;
    m_axi_physMemPtr_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_physMemPtr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_physMemPtr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_physMemPtr_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RVALID : IN STD_LOGIC;
    m_axi_physMemPtr_V_RREADY : OUT STD_LOGIC;
    m_axi_physMemPtr_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RLAST : IN STD_LOGIC;
    m_axi_physMemPtr_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_BVALID : IN STD_LOGIC;
    m_axi_physMemPtr_V_BREADY : OUT STD_LOGIC;
    m_axi_physMemPtr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_physMemPtr_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_physMemPtr_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_AWVALID : OUT STD_LOGIC;
    m_axi_extMemPtr_V_AWREADY : IN STD_LOGIC;
    m_axi_extMemPtr_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_extMemPtr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_AWUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_WVALID : OUT STD_LOGIC;
    m_axi_extMemPtr_V_WREADY : IN STD_LOGIC;
    m_axi_extMemPtr_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_DATA_WIDTH/8-1 downto 0);
    m_axi_extMemPtr_V_WLAST : OUT STD_LOGIC;
    m_axi_extMemPtr_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_WUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_ARVALID : OUT STD_LOGIC;
    m_axi_extMemPtr_V_ARREADY : IN STD_LOGIC;
    m_axi_extMemPtr_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ADDR_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_extMemPtr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_extMemPtr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_extMemPtr_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ARUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_RVALID : IN STD_LOGIC;
    m_axi_extMemPtr_V_RREADY : OUT STD_LOGIC;
    m_axi_extMemPtr_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_DATA_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_RLAST : IN STD_LOGIC;
    m_axi_extMemPtr_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_RUSER_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_BVALID : IN STD_LOGIC;
    m_axi_extMemPtr_V_BREADY : OUT STD_LOGIC;
    m_axi_extMemPtr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_extMemPtr_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_ID_WIDTH-1 downto 0);
    m_axi_extMemPtr_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_EXTMEMPTR_V_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pynq_dsp_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pynq_dsp_hls,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.503400,HLS_SYN_LAT=58,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=40,HLS_SYN_FF=12259,HLS_SYN_LUT=17592,HLS_VERSION=2019_1_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (129 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (129 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (129 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (129 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (129 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (129 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (129 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (129 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (129 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (129 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_4AFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "01001010111111111111111111111110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv57_0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_const_lv7_A : STD_LOGIC_VECTOR (6 downto 0) := "0001010";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv7_C : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_const_lv7_D : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_const_lv7_E : STD_LOGIC_VECTOR (6 downto 0) := "0001110";
    constant ap_const_lv7_F : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv9_18 : STD_LOGIC_VECTOR (8 downto 0) := "000011000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal lrclk_0_data_reg : STD_LOGIC := '0';
    signal lrclk_0_vld_reg : STD_LOGIC := '0';
    signal lrclk_0_ack_out : STD_LOGIC;
    signal basePhysAddr_V : STD_LOGIC_VECTOR (31 downto 0);
    signal basePhysAddr_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal basePhysAddr_V_0_vld_reg : STD_LOGIC := '0';
    signal basePhysAddr_V_0_ack_out : STD_LOGIC;
    signal monitorSrcL_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal monitorSrcL_1_vld_reg : STD_LOGIC := '0';
    signal monitorSrcL_1_vld_in : STD_LOGIC;
    signal monitorSrcR_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal monitorSrcR_1_vld_reg : STD_LOGIC := '0';
    signal monitorSrcR_1_vld_in : STD_LOGIC;
    signal monitorDstL_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal monitorDstL_1_vld_reg : STD_LOGIC := '0';
    signal monitorDstL_1_vld_in : STD_LOGIC;
    signal monitorDstR_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal monitorDstR_1_vld_reg : STD_LOGIC := '0';
    signal monitorDstR_1_vld_in : STD_LOGIC;
    signal counter_i : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal counter_0_vld_reg : STD_LOGIC := '0';
    signal counter_0_ack_out : STD_LOGIC;
    signal counter_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal counter_1_vld_reg : STD_LOGIC := '0';
    signal counter_1_vld_in : STD_LOGIC;
    signal numOfStage_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal numOfStage_1_vld_reg : STD_LOGIC := '0';
    signal numOfStage_1_vld_in : STD_LOGIC;
    signal configSizePerStage_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal configSizePerStage_1_vld_reg : STD_LOGIC := '0';
    signal configSizePerStage_1_vld_in : STD_LOGIC;
    signal configReg_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_ce0 : STD_LOGIC;
    signal configReg_we0 : STD_LOGIC;
    signal configReg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal configReg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readyRch : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal readyLch : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal srcDatas_l_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal srcDatas_r_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal srcDatas_l_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal srcDatas_l_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal srcDatas_l_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal srcDatas_r_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal srcDatas_r_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal srcDatas_r_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal physMemPtr_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal physMemPtr_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln761_fu_1428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln198_fu_1468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal physMemPtr_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal physMemPtr_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal physMemPtr_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal physMemPtr_V_AWVALID : STD_LOGIC;
    signal physMemPtr_V_AWREADY : STD_LOGIC;
    signal physMemPtr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_WVALID : STD_LOGIC;
    signal physMemPtr_V_WREADY : STD_LOGIC;
    signal physMemPtr_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_ARVALID : STD_LOGIC;
    signal physMemPtr_V_ARREADY : STD_LOGIC;
    signal physMemPtr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_RVALID : STD_LOGIC;
    signal physMemPtr_V_RREADY : STD_LOGIC;
    signal physMemPtr_V_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal physMemPtr_V_RLAST : STD_LOGIC;
    signal physMemPtr_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal physMemPtr_V_BVALID : STD_LOGIC;
    signal physMemPtr_V_BREADY : STD_LOGIC;
    signal physMemPtr_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal physMemPtr_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal physMemPtr_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal extMemPtr_V_AWVALID : STD_LOGIC;
    signal extMemPtr_V_AWREADY : STD_LOGIC;
    signal extMemPtr_V_WVALID : STD_LOGIC;
    signal extMemPtr_V_WREADY : STD_LOGIC;
    signal extMemPtr_V_ARVALID : STD_LOGIC;
    signal extMemPtr_V_ARREADY : STD_LOGIC;
    signal extMemPtr_V_RVALID : STD_LOGIC;
    signal extMemPtr_V_RREADY : STD_LOGIC;
    signal extMemPtr_V_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal extMemPtr_V_RLAST : STD_LOGIC;
    signal extMemPtr_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal extMemPtr_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal extMemPtr_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal extMemPtr_V_BVALID : STD_LOGIC;
    signal extMemPtr_V_BREADY : STD_LOGIC;
    signal extMemPtr_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal extMemPtr_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal extMemPtr_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1340 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal reg_1345 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_1238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1349 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal and_ln24_1_reg_3633 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal grp_fu_1244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1356 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln31_1_reg_3639 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal reg_1369 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_fu_1230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1374 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal reg_1383 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal reg_1388 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal grp_fu_1234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1393 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_V_fu_1398_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_reg_3162 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln215_fu_1408_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln215_reg_3167 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_fu_1412_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_reg_3172 : STD_LOGIC_VECTOR (30 downto 0);
    signal status_V_reg_3183 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln193_fu_1446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op196_readreq_state11 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal srcL_V_fu_1484_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal srcL_V_reg_3245 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln207_fu_1500_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal srcR_V_fu_1509_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal srcR_V_reg_3255 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_1266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_3270 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_1269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_3275 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal floatSrcL_reg_3280 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_1261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal floatSrcR_reg_3285 : STD_LOGIC_VECTOR (31 downto 0);
    signal stageIndex_V_fu_1539_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal stageIndex_V_reg_3293 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_4_fu_1545_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_3298 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln887_fu_1533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal configReg_addr_15_reg_3327 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_addr_1_reg_3332 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_addr_2_reg_3337 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_addr_4_reg_3347 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_addr_5_reg_3352 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_addr_6_reg_3357 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_addr_7_reg_3362 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_addr_8_reg_3367 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_addr_9_reg_3372 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_addr_10_reg_3377 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_addr_11_reg_3382 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_addr_12_reg_3387 : STD_LOGIC_VECTOR (5 downto 0);
    signal configReg_addr_13_reg_3392 : STD_LOGIC_VECTOR (5 downto 0);
    signal id_fu_1768_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal id_reg_3397 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln241_fu_1772_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln241_reg_3401 : STD_LOGIC_VECTOR (1 downto 0);
    signal dstDatas_0_l_5_fu_1776_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln237_fu_1790_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln237_reg_3414 : STD_LOGIC_VECTOR (1 downto 0);
    signal bz0L_fu_1794_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal bz0L_reg_3420 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal configReg_load_13_reg_3426 : STD_LOGIC_VECTOR (31 downto 0);
    signal bz0R_fu_1807_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal bz0R_reg_3432 : STD_LOGIC_VECTOR (31 downto 0);
    signal b0_fu_1820_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b0_reg_3438 : STD_LOGIC_VECTOR (31 downto 0);
    signal b1_fu_1825_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b1_reg_3443 : STD_LOGIC_VECTOR (31 downto 0);
    signal bz1L_fu_1830_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bz1R_fu_1834_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_2_i_reg_3458 : STD_LOGIC_VECTOR (31 downto 0);
    signal b2_fu_1839_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b2_reg_3463 : STD_LOGIC_VECTOR (31 downto 0);
    signal bz2L_fu_1844_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bz2R_fu_1849_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal configReg_load_10_reg_3478 : STD_LOGIC_VECTOR (31 downto 0);
    signal configReg_load_5_reg_3483 : STD_LOGIC_VECTOR (31 downto 0);
    signal configReg_load_11_reg_3488 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal configReg_load_12_reg_3493 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal a1_fu_1854_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal a2_fu_1860_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal az1L_fu_1865_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal az2L_fu_1874_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_i_reg_3530 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_reg_3535 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln234_fu_1920_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln234_reg_3540 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal tmp_35_fu_1924_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_reg_3544 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_1939_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_reg_3549 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal grp_effect_delay_fu_1218_ap_ready : STD_LOGIC;
    signal grp_effect_delay_fu_1218_ap_done : STD_LOGIC;
    signal dstDatas_0_r_reg_3562 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln231_fu_1978_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln231_reg_3570 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal x_assign_5_fu_1982_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_5_reg_3574 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_6_fu_1996_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_6_reg_3581 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_3_fu_2010_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln368_3_reg_3588 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln24_1_fu_2024_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_1_reg_3593 : STD_LOGIC_VECTOR (0 downto 0);
    signal thresh_fu_2037_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresh_reg_3599 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal absL_fu_2062_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal absL_reg_3609 : STD_LOGIC_VECTOR (31 downto 0);
    signal absR_fu_2086_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal absR_reg_3615 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln24_fu_2113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_reg_3621 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_fu_2141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_reg_3627 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_1_fu_2151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal and_ln31_1_fu_2161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln368_4_fu_2167_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln368_4_reg_3645 : STD_LOGIC_VECTOR (30 downto 0);
    signal ratio_fu_2178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal grp_fu_1272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_reg_3656 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_3661 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_l_1_fu_2221_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal dst_r_1_fu_2264_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_r_1_reg_3674 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln228_fu_2286_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln228_reg_3682 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal x_assign_4_fu_2290_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_4_reg_3686 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_fu_2304_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_3692 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_fu_2318_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln368_reg_3698 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln257_1_fu_2332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_1_reg_3703 : STD_LOGIC_VECTOR (0 downto 0);
    signal thresh_1_fu_2345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresh_1_reg_3709 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal absL_1_fu_2370_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal absL_1_reg_3717 : STD_LOGIC_VECTOR (31 downto 0);
    signal absR_1_fu_2394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal absR_1_reg_3723 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln257_fu_2421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_reg_3729 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_2_fu_2449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln257_2_reg_3735 : STD_LOGIC_VECTOR (0 downto 0);
    signal monitorDstL_1_fu_2465_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal monitorDstL_1_reg_3741 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal monitorDstR_1_fu_2481_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal monitorDstR_1_reg_3747 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_3753 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_3758 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_l_fu_2504_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal dst_r_fu_2528_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_r_reg_3771 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal reg_V_fu_2588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_reg_3784 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_18_reg_3789 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_fu_2618_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln270_reg_3794 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln278_fu_2622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_3799 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_2628_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_reg_3806 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln282_fu_2634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_reg_3814 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_2640_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_reg_3820 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal icmp_ln285_fu_2655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_3826 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1_fu_2660_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_1_reg_3831 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_fu_2687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_reg_3836 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_2699_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_reg_3841 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_fu_2719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_reg_3846 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_V_1_fu_2725_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_1_reg_3851 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_19_reg_3856 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_1_fu_2755_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln270_1_reg_3861 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln278_1_fu_2759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_1_reg_3866 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_2_fu_2765_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_2_reg_3873 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln282_1_fu_2771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_1_reg_3881 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln282_fu_2845_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_reg_3887 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal tmp_s_fu_2852_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_reg_3893 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln285_1_fu_2867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_1_reg_3899 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_3_fu_2872_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_3_reg_3904 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_1_fu_2899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_1_reg_3909 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_2_fu_2911_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_2_reg_3914 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_1_fu_2931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_1_reg_3919 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_2937_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_1_reg_3924 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln303_fu_2947_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln303_reg_3929 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_1_fu_3021_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_1_reg_3934 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln303_1_fu_3043_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln303_1_reg_3947 : STD_LOGIC_VECTOR (23 downto 0);
    signal stageIndex_V_1_fu_3063_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal stageIndex_V_1_reg_3955 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal grp_effect_delay_fu_1218_ap_start : STD_LOGIC;
    signal grp_effect_delay_fu_1218_ap_idle : STD_LOGIC;
    signal grp_effect_delay_fu_1218_config_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_effect_delay_fu_1218_config_r_ce0 : STD_LOGIC;
    signal grp_effect_delay_fu_1218_config_r_we0 : STD_LOGIC;
    signal grp_effect_delay_fu_1218_config_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWVALID : STD_LOGIC;
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WVALID : STD_LOGIC;
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WLAST : STD_LOGIC;
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARVALID : STD_LOGIC;
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_RREADY : STD_LOGIC;
    signal grp_effect_delay_fu_1218_m_axi_extMemPtr_V_BREADY : STD_LOGIC;
    signal grp_effect_delay_fu_1218_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_effect_delay_fu_1218_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_dstDatas_l_3_0_be_phi_fu_609_p40 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_3_0_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_phi_mux_dstDatas_l_2_0_be_phi_fu_660_p40 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_2_0_reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_dstDatas_l_1_0_be_phi_fu_711_p40 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_1_0_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_dstDatas_l_0_0_be_phi_fu_762_p40 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_0_0_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_reg_529 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_dstDatas_l_3_4_phi_fu_544_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_dstDatas_l_2_4_phi_fu_560_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_dstDatas_l_1_4_phi_fu_576_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_dstDatas_l_0_4_phi_fu_592_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_3_0_be_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal dstDatas_l_2_0_be_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_1_0_be_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_0_0_be_reg_758 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_3_3_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_2_3_reg_830 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_1_3_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_0_3_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_3_2_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_2_2_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_1_2_reg_935 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_0_2_reg_956 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_3_1_reg_977 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_2_1_reg_998 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_1_1_reg_1019 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_0_1_reg_1040 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_3_5_reg_1061 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_2_5_reg_1082 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_1_5_reg_1103 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_l_0_5_reg_1124 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_t_V_1_phi_fu_1149_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal t_V_1_reg_1145 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal phi_ln257_reg_1157 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln887_1_fu_3057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_readyRch_flag_1_phi_fu_1176_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyRch_flag_1_reg_1171 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal readyRch_new_1_reg_1186 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_readyLch_flag_1_phi_fu_1208_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal readyLch_flag_1_reg_1203 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_effect_delay_fu_1218_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln225_fu_1553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_1563_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_1577_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_1591_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_1605_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_1619_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_1633_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_1647_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_1661_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_1675_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_1689_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_1703_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_1717_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_1731_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_1745_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_1759_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_1418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_1474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_3028_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln214_fu_3049_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln214_1_fu_3053_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal monitorSrcL_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal monitorSrcR_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal monitorDstL_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal monitorDstR_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal counter_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal numOfStage_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal configSizePerStage_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state130 : BOOLEAN;
    signal select_ln258_1_fu_3098_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_3_r_fu_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_0_r_5_fu_2551_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_3_r_1_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_3_r_2_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstDatas_3_r_3_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal bitcast_ln705_2_fu_1882_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal bitcast_ln705_3_fu_1886_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln705_fu_1890_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln705_1_fu_1895_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal grp_fu_1230_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal grp_fu_1234_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1238_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1244_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1248_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1252_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_1266_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1269_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1272_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal grp_fu_1276_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1324_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln193_fu_1441_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln193_fu_1446_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln198_fu_1457_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln198_fu_1451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln193_fu_1441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln198_fu_1457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln198_1_fu_1462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_fu_1488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln207_fu_1494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln4_fu_1558_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln18_fu_1572_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln110_fu_1586_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln111_fu_1600_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln112_fu_1614_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln113_fu_1628_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln114_fu_1642_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln117_fu_1656_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln118_fu_1670_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln119_fu_1684_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln120_fu_1698_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln121_fu_1712_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln122_fu_1726_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln123_fu_1740_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln124_fu_1754_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal dstDatas_0_l_5_fu_1776_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln31_fu_2014_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln24_3_fu_2018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_fu_2030_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_fu_2043_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_5_fu_2046_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_16_fu_2054_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_10_fu_2067_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_6_fu_2070_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_17_fu_2078_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_2091_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln24_fu_2050_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln24_1_fu_2107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_fu_2101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_2119_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_1_fu_2074_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln31_1_fu_2135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_2129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_fu_2147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_fu_2157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_2171_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_fu_2188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln28_fu_2192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln28_fu_2184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_fu_2202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_2207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_1_fu_2198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_2213_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln35_fu_2231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln35_fu_2235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln35_fu_2227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln31_fu_2245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_1_fu_2250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln35_1_fu_2241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln35_fu_2256_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln257_fu_2322_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_3_fu_2326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_2338_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_2351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_1_fu_2354_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_12_fu_2362_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_2375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_2_fu_2378_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_13_fu_2386_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_2399_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln257_1_fu_2358_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_1_fu_2415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln257_fu_2409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_2427_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln257_2_fu_2382_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln257_5_fu_2443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln257_4_fu_2437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_fu_2455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_1_fu_2459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_2_fu_2471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln257_3_fu_2475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_fu_2491_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln11_fu_2494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln11_fu_2487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_1_fu_2500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln12_fu_2515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln12_fu_2518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln12_fu_2511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln12_1_fu_2524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_2604_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln262_fu_2592_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_fu_2614_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln281_fu_2647_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln282_fu_2677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_2650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_2681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_2693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_fu_2671_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_fu_2707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_fu_2665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_2713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_2741_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln262_1_fu_2729_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_1_fu_2751_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_2780_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln294_fu_2777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294cast_fu_2795_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln297_fu_2799_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln295_fu_2804_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln285_fu_2817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_1_fu_2822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_2787_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln278_fu_2810_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln278_fu_2835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_2840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_1_fu_2827_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln281_1_fu_2859_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln282_1_fu_2889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_fu_2862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_1_fu_2893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_2_fu_2905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_1_fu_2883_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_1_fu_2919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_1_fu_2877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_1_fu_2925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln461_fu_2942_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_fu_2956_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln294_1_fu_2953_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_1cast_fu_2971_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln297_1_fu_2975_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln295_1_fu_2980_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln285_1_fu_2993_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_3_fu_2998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_1_fu_2963_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln278_1_fu_2986_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln278_1_fu_3011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_1_fu_3016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_3_fu_3003_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln461_1_fu_3038_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln258_fu_3078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln258_1_fu_3092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln258_fu_3084_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1230_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1234_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (129 downto 0);

    component effect_delay IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inData_l : IN STD_LOGIC_VECTOR (31 downto 0);
        inData_r : IN STD_LOGIC_VECTOR (31 downto 0);
        config_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        config_r_ce0 : OUT STD_LOGIC;
        config_r_we0 : OUT STD_LOGIC;
        config_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        config_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        config_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_AWVALID : OUT STD_LOGIC;
        m_axi_extMemPtr_V_AWREADY : IN STD_LOGIC;
        m_axi_extMemPtr_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_WVALID : OUT STD_LOGIC;
        m_axi_extMemPtr_V_WREADY : IN STD_LOGIC;
        m_axi_extMemPtr_V_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_WLAST : OUT STD_LOGIC;
        m_axi_extMemPtr_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_ARVALID : OUT STD_LOGIC;
        m_axi_extMemPtr_V_ARREADY : IN STD_LOGIC;
        m_axi_extMemPtr_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_extMemPtr_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_extMemPtr_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_RVALID : IN STD_LOGIC;
        m_axi_extMemPtr_V_RREADY : OUT STD_LOGIC;
        m_axi_extMemPtr_V_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_extMemPtr_V_RLAST : IN STD_LOGIC;
        m_axi_extMemPtr_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_BVALID : IN STD_LOGIC;
        m_axi_extMemPtr_V_BREADY : OUT STD_LOGIC;
        m_axi_extMemPtr_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_extMemPtr_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_extMemPtr_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_faddfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fdivg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_sitohbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_fcmpeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pynq_dsp_hls_mux_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        basePhysAddr_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        monitorSrcL : IN STD_LOGIC_VECTOR (31 downto 0);
        monitorSrcL_ap_vld : IN STD_LOGIC;
        monitorSrcR : IN STD_LOGIC_VECTOR (31 downto 0);
        monitorSrcR_ap_vld : IN STD_LOGIC;
        monitorDstL : IN STD_LOGIC_VECTOR (31 downto 0);
        monitorDstL_ap_vld : IN STD_LOGIC;
        monitorDstR : IN STD_LOGIC_VECTOR (31 downto 0);
        monitorDstR_ap_vld : IN STD_LOGIC;
        counter_o : IN STD_LOGIC_VECTOR (31 downto 0);
        counter_o_ap_vld : IN STD_LOGIC;
        counter_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        numOfStage : IN STD_LOGIC_VECTOR (31 downto 0);
        numOfStage_ap_vld : IN STD_LOGIC;
        configSizePerStage : IN STD_LOGIC_VECTOR (31 downto 0);
        configSizePerStage_ap_vld : IN STD_LOGIC;
        configReg_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        configReg_ce0 : IN STD_LOGIC;
        configReg_we0 : IN STD_LOGIC;
        configReg_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        configReg_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynq_dsp_hls_physMemPtr_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pynq_dsp_hls_extMemPtr_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    pynq_dsp_hls_AXILiteS_s_axi_U : component pynq_dsp_hls_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        basePhysAddr_V => basePhysAddr_V,
        monitorSrcL => monitorSrcL_1_data_reg,
        monitorSrcL_ap_vld => monitorSrcL_1_vld_reg,
        monitorSrcR => monitorSrcR_1_data_reg,
        monitorSrcR_ap_vld => monitorSrcR_1_vld_reg,
        monitorDstL => monitorDstL_1_data_reg,
        monitorDstL_ap_vld => monitorDstL_1_vld_reg,
        monitorDstR => monitorDstR_1_data_reg,
        monitorDstR_ap_vld => monitorDstR_1_vld_reg,
        counter_o => counter_1_data_reg,
        counter_o_ap_vld => counter_1_vld_reg,
        counter_i => counter_i,
        numOfStage => numOfStage_1_data_reg,
        numOfStage_ap_vld => numOfStage_1_vld_reg,
        configSizePerStage => configSizePerStage_1_data_reg,
        configSizePerStage_ap_vld => configSizePerStage_1_vld_reg,
        configReg_address0 => configReg_address0,
        configReg_ce0 => configReg_ce0,
        configReg_we0 => configReg_we0,
        configReg_d0 => configReg_d0,
        configReg_q0 => configReg_q0);

    pynq_dsp_hls_physMemPtr_V_m_axi_U : component pynq_dsp_hls_physMemPtr_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PHYSMEMPTR_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_PHYSMEMPTR_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_PHYSMEMPTR_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PHYSMEMPTR_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PHYSMEMPTR_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_physMemPtr_V_AWVALID,
        AWREADY => m_axi_physMemPtr_V_AWREADY,
        AWADDR => m_axi_physMemPtr_V_AWADDR,
        AWID => m_axi_physMemPtr_V_AWID,
        AWLEN => m_axi_physMemPtr_V_AWLEN,
        AWSIZE => m_axi_physMemPtr_V_AWSIZE,
        AWBURST => m_axi_physMemPtr_V_AWBURST,
        AWLOCK => m_axi_physMemPtr_V_AWLOCK,
        AWCACHE => m_axi_physMemPtr_V_AWCACHE,
        AWPROT => m_axi_physMemPtr_V_AWPROT,
        AWQOS => m_axi_physMemPtr_V_AWQOS,
        AWREGION => m_axi_physMemPtr_V_AWREGION,
        AWUSER => m_axi_physMemPtr_V_AWUSER,
        WVALID => m_axi_physMemPtr_V_WVALID,
        WREADY => m_axi_physMemPtr_V_WREADY,
        WDATA => m_axi_physMemPtr_V_WDATA,
        WSTRB => m_axi_physMemPtr_V_WSTRB,
        WLAST => m_axi_physMemPtr_V_WLAST,
        WID => m_axi_physMemPtr_V_WID,
        WUSER => m_axi_physMemPtr_V_WUSER,
        ARVALID => m_axi_physMemPtr_V_ARVALID,
        ARREADY => m_axi_physMemPtr_V_ARREADY,
        ARADDR => m_axi_physMemPtr_V_ARADDR,
        ARID => m_axi_physMemPtr_V_ARID,
        ARLEN => m_axi_physMemPtr_V_ARLEN,
        ARSIZE => m_axi_physMemPtr_V_ARSIZE,
        ARBURST => m_axi_physMemPtr_V_ARBURST,
        ARLOCK => m_axi_physMemPtr_V_ARLOCK,
        ARCACHE => m_axi_physMemPtr_V_ARCACHE,
        ARPROT => m_axi_physMemPtr_V_ARPROT,
        ARQOS => m_axi_physMemPtr_V_ARQOS,
        ARREGION => m_axi_physMemPtr_V_ARREGION,
        ARUSER => m_axi_physMemPtr_V_ARUSER,
        RVALID => m_axi_physMemPtr_V_RVALID,
        RREADY => m_axi_physMemPtr_V_RREADY,
        RDATA => m_axi_physMemPtr_V_RDATA,
        RLAST => m_axi_physMemPtr_V_RLAST,
        RID => m_axi_physMemPtr_V_RID,
        RUSER => m_axi_physMemPtr_V_RUSER,
        RRESP => m_axi_physMemPtr_V_RRESP,
        BVALID => m_axi_physMemPtr_V_BVALID,
        BREADY => m_axi_physMemPtr_V_BREADY,
        BRESP => m_axi_physMemPtr_V_BRESP,
        BID => m_axi_physMemPtr_V_BID,
        BUSER => m_axi_physMemPtr_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => physMemPtr_V_ARVALID,
        I_ARREADY => physMemPtr_V_ARREADY,
        I_ARADDR => physMemPtr_V_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => physMemPtr_V_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => physMemPtr_V_RVALID,
        I_RREADY => physMemPtr_V_RREADY,
        I_RDATA => physMemPtr_V_RDATA,
        I_RID => physMemPtr_V_RID,
        I_RUSER => physMemPtr_V_RUSER,
        I_RRESP => physMemPtr_V_RRESP,
        I_RLAST => physMemPtr_V_RLAST,
        I_AWVALID => physMemPtr_V_AWVALID,
        I_AWREADY => physMemPtr_V_AWREADY,
        I_AWADDR => physMemPtr_V_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_2,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => physMemPtr_V_WVALID,
        I_WREADY => physMemPtr_V_WREADY,
        I_WDATA => physMemPtr_V_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => physMemPtr_V_BVALID,
        I_BREADY => physMemPtr_V_BREADY,
        I_BRESP => physMemPtr_V_BRESP,
        I_BID => physMemPtr_V_BID,
        I_BUSER => physMemPtr_V_BUSER);

    pynq_dsp_hls_extMemPtr_V_m_axi_U : component pynq_dsp_hls_extMemPtr_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_EXTMEMPTR_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_EXTMEMPTR_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_EXTMEMPTR_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_EXTMEMPTR_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_EXTMEMPTR_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_EXTMEMPTR_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_EXTMEMPTR_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_EXTMEMPTR_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_extMemPtr_V_AWVALID,
        AWREADY => m_axi_extMemPtr_V_AWREADY,
        AWADDR => m_axi_extMemPtr_V_AWADDR,
        AWID => m_axi_extMemPtr_V_AWID,
        AWLEN => m_axi_extMemPtr_V_AWLEN,
        AWSIZE => m_axi_extMemPtr_V_AWSIZE,
        AWBURST => m_axi_extMemPtr_V_AWBURST,
        AWLOCK => m_axi_extMemPtr_V_AWLOCK,
        AWCACHE => m_axi_extMemPtr_V_AWCACHE,
        AWPROT => m_axi_extMemPtr_V_AWPROT,
        AWQOS => m_axi_extMemPtr_V_AWQOS,
        AWREGION => m_axi_extMemPtr_V_AWREGION,
        AWUSER => m_axi_extMemPtr_V_AWUSER,
        WVALID => m_axi_extMemPtr_V_WVALID,
        WREADY => m_axi_extMemPtr_V_WREADY,
        WDATA => m_axi_extMemPtr_V_WDATA,
        WSTRB => m_axi_extMemPtr_V_WSTRB,
        WLAST => m_axi_extMemPtr_V_WLAST,
        WID => m_axi_extMemPtr_V_WID,
        WUSER => m_axi_extMemPtr_V_WUSER,
        ARVALID => m_axi_extMemPtr_V_ARVALID,
        ARREADY => m_axi_extMemPtr_V_ARREADY,
        ARADDR => m_axi_extMemPtr_V_ARADDR,
        ARID => m_axi_extMemPtr_V_ARID,
        ARLEN => m_axi_extMemPtr_V_ARLEN,
        ARSIZE => m_axi_extMemPtr_V_ARSIZE,
        ARBURST => m_axi_extMemPtr_V_ARBURST,
        ARLOCK => m_axi_extMemPtr_V_ARLOCK,
        ARCACHE => m_axi_extMemPtr_V_ARCACHE,
        ARPROT => m_axi_extMemPtr_V_ARPROT,
        ARQOS => m_axi_extMemPtr_V_ARQOS,
        ARREGION => m_axi_extMemPtr_V_ARREGION,
        ARUSER => m_axi_extMemPtr_V_ARUSER,
        RVALID => m_axi_extMemPtr_V_RVALID,
        RREADY => m_axi_extMemPtr_V_RREADY,
        RDATA => m_axi_extMemPtr_V_RDATA,
        RLAST => m_axi_extMemPtr_V_RLAST,
        RID => m_axi_extMemPtr_V_RID,
        RUSER => m_axi_extMemPtr_V_RUSER,
        RRESP => m_axi_extMemPtr_V_RRESP,
        BVALID => m_axi_extMemPtr_V_BVALID,
        BREADY => m_axi_extMemPtr_V_BREADY,
        BRESP => m_axi_extMemPtr_V_BRESP,
        BID => m_axi_extMemPtr_V_BID,
        BUSER => m_axi_extMemPtr_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => extMemPtr_V_ARVALID,
        I_ARREADY => extMemPtr_V_ARREADY,
        I_ARADDR => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARADDR,
        I_ARID => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARID,
        I_ARLEN => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARLEN,
        I_ARSIZE => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARSIZE,
        I_ARLOCK => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARLOCK,
        I_ARCACHE => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARCACHE,
        I_ARQOS => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARQOS,
        I_ARPROT => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARPROT,
        I_ARUSER => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARUSER,
        I_ARBURST => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARBURST,
        I_ARREGION => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARREGION,
        I_RVALID => extMemPtr_V_RVALID,
        I_RREADY => extMemPtr_V_RREADY,
        I_RDATA => extMemPtr_V_RDATA,
        I_RID => extMemPtr_V_RID,
        I_RUSER => extMemPtr_V_RUSER,
        I_RRESP => extMemPtr_V_RRESP,
        I_RLAST => extMemPtr_V_RLAST,
        I_AWVALID => extMemPtr_V_AWVALID,
        I_AWREADY => extMemPtr_V_AWREADY,
        I_AWADDR => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWADDR,
        I_AWID => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWID,
        I_AWLEN => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWLEN,
        I_AWSIZE => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWSIZE,
        I_AWLOCK => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWLOCK,
        I_AWCACHE => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWCACHE,
        I_AWQOS => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWQOS,
        I_AWPROT => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWPROT,
        I_AWUSER => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWUSER,
        I_AWBURST => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWBURST,
        I_AWREGION => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWREGION,
        I_WVALID => extMemPtr_V_WVALID,
        I_WREADY => extMemPtr_V_WREADY,
        I_WDATA => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WDATA,
        I_WID => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WID,
        I_WUSER => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WUSER,
        I_WLAST => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WLAST,
        I_WSTRB => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WSTRB,
        I_BVALID => extMemPtr_V_BVALID,
        I_BREADY => extMemPtr_V_BREADY,
        I_BRESP => extMemPtr_V_BRESP,
        I_BID => extMemPtr_V_BID,
        I_BUSER => extMemPtr_V_BUSER);

    grp_effect_delay_fu_1218 : component effect_delay
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_effect_delay_fu_1218_ap_start,
        ap_done => grp_effect_delay_fu_1218_ap_done,
        ap_idle => grp_effect_delay_fu_1218_ap_idle,
        ap_ready => grp_effect_delay_fu_1218_ap_ready,
        inData_l => tmp_35_reg_3544,
        inData_r => tmp_36_reg_3549,
        config_r_address0 => grp_effect_delay_fu_1218_config_r_address0,
        config_r_ce0 => grp_effect_delay_fu_1218_config_r_ce0,
        config_r_we0 => grp_effect_delay_fu_1218_config_r_we0,
        config_r_d0 => grp_effect_delay_fu_1218_config_r_d0,
        config_r_q0 => configReg_q0,
        config_offset => t_V_reg_529,
        m_axi_extMemPtr_V_AWVALID => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWVALID,
        m_axi_extMemPtr_V_AWREADY => extMemPtr_V_AWREADY,
        m_axi_extMemPtr_V_AWADDR => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWADDR,
        m_axi_extMemPtr_V_AWID => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWID,
        m_axi_extMemPtr_V_AWLEN => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWLEN,
        m_axi_extMemPtr_V_AWSIZE => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWSIZE,
        m_axi_extMemPtr_V_AWBURST => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWBURST,
        m_axi_extMemPtr_V_AWLOCK => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWLOCK,
        m_axi_extMemPtr_V_AWCACHE => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWCACHE,
        m_axi_extMemPtr_V_AWPROT => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWPROT,
        m_axi_extMemPtr_V_AWQOS => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWQOS,
        m_axi_extMemPtr_V_AWREGION => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWREGION,
        m_axi_extMemPtr_V_AWUSER => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWUSER,
        m_axi_extMemPtr_V_WVALID => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WVALID,
        m_axi_extMemPtr_V_WREADY => extMemPtr_V_WREADY,
        m_axi_extMemPtr_V_WDATA => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WDATA,
        m_axi_extMemPtr_V_WSTRB => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WSTRB,
        m_axi_extMemPtr_V_WLAST => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WLAST,
        m_axi_extMemPtr_V_WID => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WID,
        m_axi_extMemPtr_V_WUSER => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WUSER,
        m_axi_extMemPtr_V_ARVALID => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARVALID,
        m_axi_extMemPtr_V_ARREADY => extMemPtr_V_ARREADY,
        m_axi_extMemPtr_V_ARADDR => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARADDR,
        m_axi_extMemPtr_V_ARID => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARID,
        m_axi_extMemPtr_V_ARLEN => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARLEN,
        m_axi_extMemPtr_V_ARSIZE => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARSIZE,
        m_axi_extMemPtr_V_ARBURST => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARBURST,
        m_axi_extMemPtr_V_ARLOCK => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARLOCK,
        m_axi_extMemPtr_V_ARCACHE => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARCACHE,
        m_axi_extMemPtr_V_ARPROT => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARPROT,
        m_axi_extMemPtr_V_ARQOS => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARQOS,
        m_axi_extMemPtr_V_ARREGION => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARREGION,
        m_axi_extMemPtr_V_ARUSER => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARUSER,
        m_axi_extMemPtr_V_RVALID => extMemPtr_V_RVALID,
        m_axi_extMemPtr_V_RREADY => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_RREADY,
        m_axi_extMemPtr_V_RDATA => extMemPtr_V_RDATA,
        m_axi_extMemPtr_V_RLAST => extMemPtr_V_RLAST,
        m_axi_extMemPtr_V_RID => extMemPtr_V_RID,
        m_axi_extMemPtr_V_RUSER => extMemPtr_V_RUSER,
        m_axi_extMemPtr_V_RRESP => extMemPtr_V_RRESP,
        m_axi_extMemPtr_V_BVALID => extMemPtr_V_BVALID,
        m_axi_extMemPtr_V_BREADY => grp_effect_delay_fu_1218_m_axi_extMemPtr_V_BREADY,
        m_axi_extMemPtr_V_BRESP => extMemPtr_V_BRESP,
        m_axi_extMemPtr_V_BID => extMemPtr_V_BID,
        m_axi_extMemPtr_V_BUSER => extMemPtr_V_BUSER,
        ap_return_0 => grp_effect_delay_fu_1218_ap_return_0,
        ap_return_1 => grp_effect_delay_fu_1218_ap_return_1);

    pynq_dsp_hls_faddfYi_U21 : component pynq_dsp_hls_faddfYi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1230_p0,
        din1 => grp_fu_1230_p1,
        opcode => grp_fu_1230_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_1230_p2);

    pynq_dsp_hls_faddfYi_U22 : component pynq_dsp_hls_faddfYi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1234_p0,
        din1 => grp_fu_1234_p1,
        opcode => grp_fu_1234_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_1234_p2);

    pynq_dsp_hls_fmulcud_U23 : component pynq_dsp_hls_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1238_p0,
        din1 => grp_fu_1238_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1238_p2);

    pynq_dsp_hls_fmulcud_U24 : component pynq_dsp_hls_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1244_p0,
        din1 => grp_fu_1244_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1244_p2);

    pynq_dsp_hls_fmulcud_U25 : component pynq_dsp_hls_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1248_p0,
        din1 => grp_fu_1248_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1248_p2);

    pynq_dsp_hls_fmulcud_U26 : component pynq_dsp_hls_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1252_p0,
        din1 => grp_fu_1252_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1252_p2);

    pynq_dsp_hls_fdivg8j_U27 : component pynq_dsp_hls_fdivg8j
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_3270,
        din1 => ap_const_lv32_4AFFFFFE,
        ce => ap_const_logic_1,
        dout => grp_fu_1256_p2);

    pynq_dsp_hls_fdivg8j_U28 : component pynq_dsp_hls_fdivg8j
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_1_reg_3275,
        din1 => ap_const_lv32_4AFFFFFE,
        ce => ap_const_logic_1,
        dout => grp_fu_1261_p2);

    pynq_dsp_hls_sitohbi_U29 : component pynq_dsp_hls_sitohbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1266_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1266_p1);

    pynq_dsp_hls_sitohbi_U30 : component pynq_dsp_hls_sitohbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1269_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1269_p1);

    pynq_dsp_hls_fcmpeOg_U31 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1272_p0,
        din1 => grp_fu_1272_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_1272_p2);

    pynq_dsp_hls_fcmpeOg_U32 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1276_p0,
        din1 => grp_fu_1276_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_1276_p2);

    pynq_dsp_hls_fcmpeOg_U33 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x_assign_4_reg_3686,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_1282_p2);

    pynq_dsp_hls_fcmpeOg_U34 : component pynq_dsp_hls_fcmpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x_assign_reg_3692,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_1287_p2);

    pynq_dsp_hls_mux_ibs_U35 : component pynq_dsp_hls_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => srcDatas_l_0,
        din1 => srcDatas_l_1,
        din2 => srcDatas_l_2,
        din3 => srcDatas_l_3,
        din4 => dstDatas_0_l_5_fu_1776_p5,
        dout => dstDatas_0_l_5_fu_1776_p6);

    pynq_dsp_hls_mux_ibs_U36 : component pynq_dsp_hls_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => srcDatas_l_0,
        din1 => srcDatas_l_1,
        din2 => srcDatas_l_2,
        din3 => srcDatas_l_3,
        din4 => trunc_ln237_reg_3414,
        dout => bz0L_fu_1794_p6);

    pynq_dsp_hls_mux_ibs_U37 : component pynq_dsp_hls_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => srcDatas_r_0,
        din1 => srcDatas_r_1,
        din2 => srcDatas_r_2,
        din3 => srcDatas_r_3,
        din4 => trunc_ln237_reg_3414,
        dout => bz0R_fu_1807_p6);

    pynq_dsp_hls_mux_ibs_U38 : component pynq_dsp_hls_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => srcDatas_l_0,
        din1 => srcDatas_l_1,
        din2 => srcDatas_l_2,
        din3 => srcDatas_l_3,
        din4 => trunc_ln234_fu_1920_p1,
        dout => tmp_35_fu_1924_p6);

    pynq_dsp_hls_mux_ibs_U39 : component pynq_dsp_hls_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => srcDatas_r_0,
        din1 => srcDatas_r_1,
        din2 => srcDatas_r_2,
        din3 => srcDatas_r_3,
        din4 => trunc_ln234_fu_1920_p1,
        dout => tmp_36_fu_1939_p6);

    pynq_dsp_hls_mux_ibs_U40 : component pynq_dsp_hls_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => srcDatas_l_0,
        din1 => srcDatas_l_1,
        din2 => srcDatas_l_2,
        din3 => srcDatas_l_3,
        din4 => trunc_ln231_fu_1978_p1,
        dout => x_assign_5_fu_1982_p6);

    pynq_dsp_hls_mux_ibs_U41 : component pynq_dsp_hls_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => srcDatas_r_0,
        din1 => srcDatas_r_1,
        din2 => srcDatas_r_2,
        din3 => srcDatas_r_3,
        din4 => trunc_ln231_fu_1978_p1,
        dout => x_assign_6_fu_1996_p6);

    pynq_dsp_hls_mux_ibs_U42 : component pynq_dsp_hls_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => srcDatas_l_0,
        din1 => srcDatas_l_1,
        din2 => srcDatas_l_2,
        din3 => srcDatas_l_3,
        din4 => trunc_ln228_fu_2286_p1,
        dout => x_assign_4_fu_2290_p6);

    pynq_dsp_hls_mux_ibs_U43 : component pynq_dsp_hls_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => srcDatas_r_0,
        din1 => srcDatas_r_1,
        din2 => srcDatas_r_2,
        din3 => srcDatas_r_3,
        din4 => trunc_ln228_fu_2286_p1,
        dout => x_assign_fu_2304_p6);

    pynq_dsp_hls_mux_ibs_U44 : component pynq_dsp_hls_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => srcDatas_r_0,
        din1 => srcDatas_r_1,
        din2 => srcDatas_r_2,
        din3 => srcDatas_r_3,
        din4 => trunc_ln241_reg_3401,
        dout => dstDatas_0_r_5_fu_2551_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_effect_delay_fu_1218_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_effect_delay_fu_1218_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                    grp_effect_delay_fu_1218_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_effect_delay_fu_1218_ap_ready = ap_const_logic_1)) then 
                    grp_effect_delay_fu_1218_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    basePhysAddr_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    configSizePerStage_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    configSizePerStage_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (configSizePerStage_1_vld_reg = ap_const_logic_0) and (configSizePerStage_1_vld_in = ap_const_logic_1))) then 
                configSizePerStage_1_vld_reg <= ap_const_logic_1;
            elsif (((configSizePerStage_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (configSizePerStage_1_vld_reg = ap_const_logic_1))) then 
                configSizePerStage_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    counter_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    counter_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    counter_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (counter_1_vld_reg = ap_const_logic_0) and (counter_1_vld_in = ap_const_logic_1))) then 
                counter_1_vld_reg <= ap_const_logic_1;
            elsif (((counter_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (counter_1_vld_reg = ap_const_logic_1))) then 
                counter_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    dstDatas_3_r_1_fu_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_1))) then 
                dstDatas_3_r_1_fu_232 <= dstDatas_0_r_5_fu_2551_p6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_1))) then 
                dstDatas_3_r_1_fu_232 <= dst_r_reg_3771;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_1))) then 
                dstDatas_3_r_1_fu_232 <= dst_r_1_reg_3674;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_1))) then 
                dstDatas_3_r_1_fu_232 <= dstDatas_0_r_reg_3562;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_1) and (id_reg_3397 = ap_const_lv3_4))) then 
                dstDatas_3_r_1_fu_232 <= reg_1383;
            end if; 
        end if;
    end process;

    dstDatas_3_r_2_fu_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_2))) then 
                dstDatas_3_r_2_fu_236 <= dstDatas_0_r_5_fu_2551_p6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_2))) then 
                dstDatas_3_r_2_fu_236 <= dst_r_reg_3771;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_2))) then 
                dstDatas_3_r_2_fu_236 <= dst_r_1_reg_3674;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_2))) then 
                dstDatas_3_r_2_fu_236 <= dstDatas_0_r_reg_3562;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_2) and (id_reg_3397 = ap_const_lv3_4))) then 
                dstDatas_3_r_2_fu_236 <= reg_1383;
            end if; 
        end if;
    end process;

    dstDatas_3_r_3_fu_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_3))) then 
                dstDatas_3_r_3_fu_240 <= dstDatas_0_r_5_fu_2551_p6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_3))) then 
                dstDatas_3_r_3_fu_240 <= dst_r_reg_3771;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_3))) then 
                dstDatas_3_r_3_fu_240 <= dst_r_1_reg_3674;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_3))) then 
                dstDatas_3_r_3_fu_240 <= dstDatas_0_r_reg_3562;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_3) and (id_reg_3397 = ap_const_lv3_4))) then 
                dstDatas_3_r_3_fu_240 <= reg_1383;
            end if; 
        end if;
    end process;

    dstDatas_3_r_fu_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_0))) then 
                dstDatas_3_r_fu_228 <= dstDatas_0_r_5_fu_2551_p6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_0))) then 
                dstDatas_3_r_fu_228 <= dst_r_reg_3771;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_0))) then 
                dstDatas_3_r_fu_228 <= dst_r_1_reg_3674;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_0))) then 
                dstDatas_3_r_fu_228 <= dstDatas_0_r_reg_3562;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_0) and (id_reg_3397 = ap_const_lv3_4))) then 
                dstDatas_3_r_fu_228 <= reg_1383;
            end if; 
        end if;
    end process;

    dstDatas_l_0_0_be_reg_758_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_3)))) then 
                dstDatas_l_0_0_be_reg_758 <= dstDatas_l_0_5_reg_1124;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_0) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_1) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_2) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_3) and (id_reg_3397 = ap_const_lv3_4)))) then 
                dstDatas_l_0_0_be_reg_758 <= ap_phi_mux_dstDatas_l_0_4_phi_fu_592_p8;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_3)))) then 
                dstDatas_l_0_0_be_reg_758 <= dstDatas_l_0_3_reg_872;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_3)))) then 
                dstDatas_l_0_0_be_reg_758 <= dstDatas_l_0_2_reg_956;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_3)))) then 
                dstDatas_l_0_0_be_reg_758 <= dstDatas_l_0_1_reg_1040;
            end if; 
        end if;
    end process;

    dstDatas_l_0_1_reg_1040_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_0))) then 
                dstDatas_l_0_1_reg_1040 <= dst_l_fu_2504_p3;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_3)))) then 
                dstDatas_l_0_1_reg_1040 <= dstDatas_l_0_0_reg_517;
            end if; 
        end if;
    end process;

    dstDatas_l_0_2_reg_956_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_0))) then 
                dstDatas_l_0_2_reg_956 <= dst_l_1_fu_2221_p3;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_3)))) then 
                dstDatas_l_0_2_reg_956 <= dstDatas_l_0_0_reg_517;
            end if; 
        end if;
    end process;

    dstDatas_l_0_3_reg_872_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_0))) then 
                dstDatas_l_0_3_reg_872 <= grp_effect_delay_fu_1218_ap_return_0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_3)))) then 
                dstDatas_l_0_3_reg_872 <= dstDatas_l_0_0_reg_517;
            end if; 
        end if;
    end process;

    dstDatas_l_0_5_reg_1124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_0))) then 
                dstDatas_l_0_5_reg_1124 <= dstDatas_0_l_5_fu_1776_p6;
            elsif (((not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_1)) or (not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_2)) or (not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_3)))) then 
                dstDatas_l_0_5_reg_1124 <= dstDatas_l_0_0_reg_517;
            end if; 
        end if;
    end process;

    dstDatas_l_1_0_be_reg_707_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_3)))) then 
                dstDatas_l_1_0_be_reg_707 <= dstDatas_l_1_5_reg_1103;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_0) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_1) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_2) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_3) and (id_reg_3397 = ap_const_lv3_4)))) then 
                dstDatas_l_1_0_be_reg_707 <= ap_phi_mux_dstDatas_l_1_4_phi_fu_576_p8;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_3)))) then 
                dstDatas_l_1_0_be_reg_707 <= dstDatas_l_1_3_reg_851;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_3)))) then 
                dstDatas_l_1_0_be_reg_707 <= dstDatas_l_1_2_reg_935;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_3)))) then 
                dstDatas_l_1_0_be_reg_707 <= dstDatas_l_1_1_reg_1019;
            end if; 
        end if;
    end process;

    dstDatas_l_1_1_reg_1019_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_1))) then 
                dstDatas_l_1_1_reg_1019 <= dst_l_fu_2504_p3;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_3)))) then 
                dstDatas_l_1_1_reg_1019 <= dstDatas_l_1_0_reg_505;
            end if; 
        end if;
    end process;

    dstDatas_l_1_2_reg_935_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_1))) then 
                dstDatas_l_1_2_reg_935 <= dst_l_1_fu_2221_p3;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_3)))) then 
                dstDatas_l_1_2_reg_935 <= dstDatas_l_1_0_reg_505;
            end if; 
        end if;
    end process;

    dstDatas_l_1_3_reg_851_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_1))) then 
                dstDatas_l_1_3_reg_851 <= grp_effect_delay_fu_1218_ap_return_0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_3)))) then 
                dstDatas_l_1_3_reg_851 <= dstDatas_l_1_0_reg_505;
            end if; 
        end if;
    end process;

    dstDatas_l_1_5_reg_1103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_1))) then 
                dstDatas_l_1_5_reg_1103 <= dstDatas_0_l_5_fu_1776_p6;
            elsif (((not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_0)) or (not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_2)) or (not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_3)))) then 
                dstDatas_l_1_5_reg_1103 <= dstDatas_l_1_0_reg_505;
            end if; 
        end if;
    end process;

    dstDatas_l_2_0_be_reg_656_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_3)))) then 
                dstDatas_l_2_0_be_reg_656 <= dstDatas_l_2_5_reg_1082;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_0) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_1) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_2) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_3) and (id_reg_3397 = ap_const_lv3_4)))) then 
                dstDatas_l_2_0_be_reg_656 <= ap_phi_mux_dstDatas_l_2_4_phi_fu_560_p8;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_3)))) then 
                dstDatas_l_2_0_be_reg_656 <= dstDatas_l_2_3_reg_830;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_3)))) then 
                dstDatas_l_2_0_be_reg_656 <= dstDatas_l_2_2_reg_914;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_3)))) then 
                dstDatas_l_2_0_be_reg_656 <= dstDatas_l_2_1_reg_998;
            end if; 
        end if;
    end process;

    dstDatas_l_2_1_reg_998_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_2))) then 
                dstDatas_l_2_1_reg_998 <= dst_l_fu_2504_p3;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_3)))) then 
                dstDatas_l_2_1_reg_998 <= dstDatas_l_2_0_reg_493;
            end if; 
        end if;
    end process;

    dstDatas_l_2_2_reg_914_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_2))) then 
                dstDatas_l_2_2_reg_914 <= dst_l_1_fu_2221_p3;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_3)))) then 
                dstDatas_l_2_2_reg_914 <= dstDatas_l_2_0_reg_493;
            end if; 
        end if;
    end process;

    dstDatas_l_2_3_reg_830_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_2))) then 
                dstDatas_l_2_3_reg_830 <= grp_effect_delay_fu_1218_ap_return_0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_3)))) then 
                dstDatas_l_2_3_reg_830 <= dstDatas_l_2_0_reg_493;
            end if; 
        end if;
    end process;

    dstDatas_l_2_5_reg_1082_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_2))) then 
                dstDatas_l_2_5_reg_1082 <= dstDatas_0_l_5_fu_1776_p6;
            elsif (((not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_0)) or (not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_1)) or (not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_3)))) then 
                dstDatas_l_2_5_reg_1082 <= dstDatas_l_2_0_reg_493;
            end if; 
        end if;
    end process;

    dstDatas_l_3_0_be_reg_605_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state112) and (trunc_ln241_reg_3401 = ap_const_lv2_3)))) then 
                dstDatas_l_3_0_be_reg_605 <= dstDatas_l_3_5_reg_1061;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_0) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_1) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_2) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_3) and (id_reg_3397 = ap_const_lv3_4)))) then 
                dstDatas_l_3_0_be_reg_605 <= ap_phi_mux_dstDatas_l_3_4_phi_fu_544_p8;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (trunc_ln234_reg_3540 = ap_const_lv2_3)))) then 
                dstDatas_l_3_0_be_reg_605 <= dstDatas_l_3_3_reg_809;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state106) and (trunc_ln231_reg_3570 = ap_const_lv2_3)))) then 
                dstDatas_l_3_0_be_reg_605 <= dstDatas_l_3_2_reg_893;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state111) and (trunc_ln228_reg_3682 = ap_const_lv2_3)))) then 
                dstDatas_l_3_0_be_reg_605 <= dstDatas_l_3_1_reg_977;
            end if; 
        end if;
    end process;

    dstDatas_l_3_1_reg_977_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_2)))) then 
                dstDatas_l_3_1_reg_977 <= dstDatas_l_3_0_reg_481;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state110) and (trunc_ln228_reg_3682 = ap_const_lv2_3))) then 
                dstDatas_l_3_1_reg_977 <= dst_l_fu_2504_p3;
            end if; 
        end if;
    end process;

    dstDatas_l_3_2_reg_893_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_2)))) then 
                dstDatas_l_3_2_reg_893 <= dstDatas_l_3_0_reg_481;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state105) and (trunc_ln231_reg_3570 = ap_const_lv2_3))) then 
                dstDatas_l_3_2_reg_893 <= dst_l_1_fu_2221_p3;
            end if; 
        end if;
    end process;

    dstDatas_l_3_3_reg_809_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_2)))) then 
                dstDatas_l_3_3_reg_809 <= dstDatas_l_3_0_reg_481;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1) and (trunc_ln234_reg_3540 = ap_const_lv2_3))) then 
                dstDatas_l_3_3_reg_809 <= grp_effect_delay_fu_1218_ap_return_0;
            end if; 
        end if;
    end process;

    dstDatas_l_3_5_reg_1061_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_0)) or (not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_1)) or (not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_2)))) then 
                dstDatas_l_3_5_reg_1061 <= dstDatas_l_3_0_reg_481;
            elsif ((not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln241_fu_1772_p1 = ap_const_lv2_3))) then 
                dstDatas_l_3_5_reg_1061 <= dstDatas_0_l_5_fu_1776_p6;
            end if; 
        end if;
    end process;

    lrclk_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorDstL_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorDstL_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorDstL_1_vld_reg = ap_const_logic_0) and (monitorDstL_1_vld_in = ap_const_logic_1))) then 
                monitorDstL_1_vld_reg <= ap_const_logic_1;
            elsif (((monitorDstL_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (monitorDstL_1_vld_reg = ap_const_logic_1))) then 
                monitorDstL_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    monitorDstR_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorDstR_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorDstR_1_vld_reg = ap_const_logic_0) and (monitorDstR_1_vld_in = ap_const_logic_1))) then 
                monitorDstR_1_vld_reg <= ap_const_logic_1;
            elsif (((monitorDstR_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (monitorDstR_1_vld_reg = ap_const_logic_1))) then 
                monitorDstR_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    monitorSrcL_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorSrcL_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorSrcL_1_vld_reg = ap_const_logic_0) and (monitorSrcL_1_vld_in = ap_const_logic_1))) then 
                monitorSrcL_1_vld_reg <= ap_const_logic_1;
            elsif (((monitorSrcL_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (monitorSrcL_1_vld_reg = ap_const_logic_1))) then 
                monitorSrcL_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    monitorSrcR_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    monitorSrcR_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorSrcR_1_vld_reg = ap_const_logic_0) and (monitorSrcR_1_vld_in = ap_const_logic_1))) then 
                monitorSrcR_1_vld_reg <= ap_const_logic_1;
            elsif (((monitorSrcR_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (monitorSrcR_1_vld_reg = ap_const_logic_1))) then 
                monitorSrcR_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    numOfStage_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    numOfStage_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (numOfStage_1_vld_reg = ap_const_logic_0) and (numOfStage_1_vld_in = ap_const_logic_1))) then 
                numOfStage_1_vld_reg <= ap_const_logic_1;
            elsif (((numOfStage_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (numOfStage_1_vld_reg = ap_const_logic_1))) then 
                numOfStage_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    phi_ln257_reg_1157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_1_fu_3057_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state127))) then
                if ((ap_phi_mux_t_V_1_phi_fu_1149_p4 = ap_const_lv2_0)) then 
                    phi_ln257_reg_1157 <= dstDatas_l_0_0_reg_517;
                elsif ((not((ap_phi_mux_t_V_1_phi_fu_1149_p4 = ap_const_lv2_0)) and not((ap_phi_mux_t_V_1_phi_fu_1149_p4 = ap_const_lv2_1)))) then 
                    phi_ln257_reg_1157 <= dstDatas_l_2_0_reg_493;
                elsif ((ap_phi_mux_t_V_1_phi_fu_1149_p4 = ap_const_lv2_1)) then 
                    phi_ln257_reg_1157 <= dstDatas_l_1_0_reg_505;
                end if;
            end if; 
        end if;
    end process;

    readyLch_flag_1_reg_1203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_io) and (or_ln198_fu_1468_p2 = ap_const_lv1_1) and (icmp_ln761_fu_1428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                readyLch_flag_1_reg_1203 <= xor_ln193_fu_1446_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
                readyLch_flag_1_reg_1203 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_state11_io) and (icmp_ln761_fu_1428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                readyLch_flag_1_reg_1203 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    readyRch_flag_1_reg_1171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_io) and (or_ln198_fu_1468_p2 = ap_const_lv1_1) and (icmp_ln761_fu_1428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                readyRch_flag_1_reg_1171 <= (0=>lrclk_0_data_reg, others=>'-');
            elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
                readyRch_flag_1_reg_1171 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_state11_io) and (icmp_ln761_fu_1428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                readyRch_flag_1_reg_1171 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    readyRch_new_1_reg_1186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_io) and (or_ln198_fu_1468_p2 = ap_const_lv1_1) and (icmp_ln761_fu_1428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                readyRch_new_1_reg_1186 <= ap_const_lv1_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
                readyRch_new_1_reg_1186 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    t_V_1_reg_1145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
                t_V_1_reg_1145 <= stageIndex_V_1_reg_3955;
            elsif (((physMemPtr_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state126))) then 
                t_V_1_reg_1145 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    t_V_reg_529_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                t_V_reg_529 <= stageIndex_V_reg_3293;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                t_V_reg_529 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state108)) then
                    absL_1_reg_3717(30 downto 0) <= absL_1_fu_2370_p1(30 downto 0);
                    absR_1_reg_3723(30 downto 0) <= absR_1_fu_2394_p1(30 downto 0);
                or_ln257_2_reg_3735 <= or_ln257_2_fu_2449_p2;
                or_ln257_reg_3729 <= or_ln257_fu_2421_p2;
                    thresh_1_reg_3709(30 downto 0) <= thresh_1_fu_2345_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                    absL_reg_3609(30 downto 0) <= absL_fu_2062_p1(30 downto 0);
                    absR_reg_3615(30 downto 0) <= absR_fu_2086_p1(30 downto 0);
                or_ln24_reg_3621 <= or_ln24_fu_2113_p2;
                or_ln31_reg_3627 <= or_ln31_fu_2141_p2;
                    thresh_reg_3599(30 downto 0) <= thresh_fu_2037_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                and_ln24_1_reg_3633 <= and_ln24_1_fu_2151_p2;
                and_ln31_1_reg_3639 <= and_ln31_1_fu_2161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state118)) then
                and_ln284_1_reg_3909 <= and_ln284_1_fu_2899_p2;
                icmp_ln285_1_reg_3899 <= icmp_ln285_1_fu_2867_p2;
                ret_V_1_reg_3924 <= ret_V_1_fu_2937_p2;
                select_ln282_reg_3887 <= select_ln282_fu_2845_p3;
                    tmp_s_reg_3893(22 downto 0) <= tmp_s_fu_2852_p3(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state117)) then
                and_ln284_reg_3836 <= and_ln284_fu_2687_p2;
                icmp_ln278_1_reg_3866 <= icmp_ln278_1_fu_2759_p2;
                icmp_ln282_1_reg_3881 <= icmp_ln282_1_fu_2771_p2;
                icmp_ln285_reg_3826 <= icmp_ln285_fu_2655_p2;
                p_Result_19_reg_3856 <= reg_V_1_fu_2725_p1(31 downto 31);
                reg_V_1_reg_3851 <= reg_V_1_fu_2725_p1;
                sh_amt_2_reg_3873 <= sh_amt_2_fu_2765_p2;
                    tmp_2_reg_3820(22 downto 0) <= tmp_2_fu_2640_p3(22 downto 0);
                trunc_ln270_1_reg_3861 <= trunc_ln270_1_fu_2755_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln278_1_reg_3866 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state118))) then
                and_ln295_1_reg_3919 <= and_ln295_1_fu_2931_p2;
                select_ln285_2_reg_3914 <= select_ln285_2_fu_2911_p3;
                sh_amt_3_reg_3904 <= sh_amt_3_fu_2872_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln278_reg_3799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state117))) then
                and_ln295_reg_3846 <= and_ln295_fu_2719_p2;
                select_ln285_reg_3841 <= select_ln285_fu_2699_p3;
                sh_amt_1_reg_3831 <= sh_amt_1_fu_2660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                b0_reg_3438 <= b0_fu_1820_p1;
                b1_reg_3443 <= b1_fu_1825_p1;
                bz0R_reg_3432 <= bz0R_fu_1807_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                b2_reg_3463 <= b2_fu_1839_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (basePhysAddr_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (basePhysAddr_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (basePhysAddr_V_0_vld_reg = ap_const_logic_1)))) then
                basePhysAddr_V_0_data_reg <= basePhysAddr_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                bz0L_reg_3420 <= bz0L_fu_1794_p6;
                configReg_load_13_reg_3426 <= configReg_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                    configReg_addr_10_reg_3377(5 downto 4) <= tmp_24_fu_1717_p3(6 - 1 downto 0)(5 downto 4);
                    configReg_addr_11_reg_3382(5 downto 4) <= tmp_25_fu_1731_p3(6 - 1 downto 0)(5 downto 4);
                    configReg_addr_12_reg_3387(5 downto 4) <= tmp_26_fu_1745_p3(6 - 1 downto 0)(5 downto 4);
                    configReg_addr_13_reg_3392(5 downto 4) <= tmp_30_fu_1759_p3(6 - 1 downto 0)(5 downto 4);
                    configReg_addr_15_reg_3327(5 downto 4) <= tmp_7_fu_1577_p3(6 - 1 downto 0)(5 downto 4);
                    configReg_addr_1_reg_3332(5 downto 4) <= tmp_3_fu_1591_p3(6 - 1 downto 0)(5 downto 4);
                    configReg_addr_2_reg_3337(5 downto 4) <= tmp_8_fu_1605_p3(6 - 1 downto 0)(5 downto 4);
                    configReg_addr_4_reg_3347(5 downto 4) <= tmp_15_fu_1633_p3(6 - 1 downto 0)(5 downto 4);
                    configReg_addr_5_reg_3352(5 downto 4) <= tmp_17_fu_1647_p3(6 - 1 downto 0)(5 downto 4);
                    configReg_addr_6_reg_3357(5 downto 4) <= tmp_19_fu_1661_p3(6 - 1 downto 0)(5 downto 4);
                    configReg_addr_7_reg_3362(5 downto 4) <= tmp_21_fu_1675_p3(6 - 1 downto 0)(5 downto 4);
                    configReg_addr_8_reg_3367(5 downto 4) <= tmp_22_fu_1689_p3(6 - 1 downto 0)(5 downto 4);
                    configReg_addr_9_reg_3372(5 downto 4) <= tmp_23_fu_1703_p3(6 - 1 downto 0)(5 downto 4);
                id_reg_3397 <= id_fu_1768_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                configReg_load_10_reg_3478 <= configReg_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                configReg_load_11_reg_3488 <= configReg_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                configReg_load_12_reg_3493 <= configReg_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                configReg_load_5_reg_3483 <= configReg_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (configSizePerStage_1_vld_reg = ap_const_logic_0) and (configSizePerStage_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (configSizePerStage_1_vld_in = ap_const_logic_1) and (configSizePerStage_1_vld_reg = ap_const_logic_1)))) then
                configSizePerStage_1_data_reg(4) <= '1';
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (counter_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (counter_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (counter_0_vld_reg = ap_const_logic_1)))) then
                counter_0_data_reg <= counter_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (counter_1_vld_reg = ap_const_logic_0) and (counter_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (counter_1_vld_in = ap_const_logic_1) and (counter_1_vld_reg = ap_const_logic_1)))) then
                counter_1_data_reg <= select_ln207_fu_1500_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1))) then
                dstDatas_0_r_reg_3562 <= grp_effect_delay_fu_1218_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                dstDatas_l_0_0_reg_517 <= ap_phi_mux_dstDatas_l_0_0_be_phi_fu_762_p40;
                dstDatas_l_1_0_reg_505 <= ap_phi_mux_dstDatas_l_1_0_be_phi_fu_711_p40;
                dstDatas_l_2_0_reg_493 <= ap_phi_mux_dstDatas_l_2_0_be_phi_fu_660_p40;
                dstDatas_l_3_0_reg_481 <= ap_phi_mux_dstDatas_l_3_0_be_phi_fu_609_p40;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state105)) then
                dst_r_1_reg_3674 <= dst_r_1_fu_2264_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state110)) then
                dst_r_reg_3771 <= dst_r_fu_2528_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                floatSrcL_reg_3280 <= grp_fu_1256_p2;
                floatSrcR_reg_3285 <= grp_fu_1261_p2;
                srcDatas_l_0 <= grp_fu_1256_p2;
                srcDatas_r_0 <= grp_fu_1261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state116)) then
                icmp_ln278_reg_3799 <= icmp_ln278_fu_2622_p2;
                icmp_ln282_reg_3814 <= icmp_ln282_fu_2634_p2;
                p_Result_18_reg_3789 <= reg_V_fu_2588_p1(31 downto 31);
                reg_V_reg_3784 <= reg_V_fu_2588_p1;
                sh_amt_reg_3806 <= sh_amt_fu_2628_p2;
                trunc_ln270_reg_3794 <= trunc_ln270_fu_2618_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lrclk_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (lrclk_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (lrclk_0_vld_reg = ap_const_logic_1)))) then
                lrclk_0_data_reg <= lrclk;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorDstL_1_vld_reg = ap_const_logic_0) and (monitorDstL_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (monitorDstL_1_vld_in = ap_const_logic_1) and (monitorDstL_1_vld_reg = ap_const_logic_1)))) then
                monitorDstL_1_data_reg <= reg_1349;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then
                    monitorDstL_1_reg_3741(30 downto 0) <= monitorDstL_1_fu_2465_p3(30 downto 0);
                    monitorDstR_1_reg_3747(30 downto 0) <= monitorDstR_1_fu_2481_p3(30 downto 0);
                tmp_18_reg_3753 <= grp_fu_1282_p2;
                tmp_20_reg_3758 <= grp_fu_1287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorDstR_1_vld_reg = ap_const_logic_0) and (monitorDstR_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (monitorDstR_1_vld_in = ap_const_logic_1) and (monitorDstR_1_vld_reg = ap_const_logic_1)))) then
                monitorDstR_1_data_reg <= reg_1362;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorSrcL_1_vld_reg = ap_const_logic_0) and (monitorSrcL_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (monitorSrcL_1_vld_in = ap_const_logic_1) and (monitorSrcL_1_vld_reg = ap_const_logic_1)))) then
                monitorSrcL_1_data_reg <= floatSrcL_reg_3280;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (monitorSrcR_1_vld_reg = ap_const_logic_0) and (monitorSrcR_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (monitorSrcR_1_vld_in = ap_const_logic_1) and (monitorSrcR_1_vld_reg = ap_const_logic_1)))) then
                monitorSrcR_1_data_reg <= floatSrcR_reg_3285;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (numOfStage_1_vld_reg = ap_const_logic_0) and (numOfStage_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (numOfStage_1_vld_in = ap_const_logic_1) and (numOfStage_1_vld_reg = ap_const_logic_1)))) then
                numOfStage_1_data_reg(2) <= '1';
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                or_ln24_1_reg_3593 <= or_ln24_1_fu_2024_p2;
                trunc_ln231_reg_3570 <= trunc_ln231_fu_1978_p1;
                trunc_ln368_3_reg_3588 <= trunc_ln368_3_fu_2010_p1;
                x_assign_5_reg_3574 <= x_assign_5_fu_1982_p6;
                x_assign_6_reg_3581 <= x_assign_6_fu_1996_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then
                or_ln257_1_reg_3703 <= or_ln257_1_fu_2332_p2;
                trunc_ln228_reg_3682 <= trunc_ln228_fu_2286_p1;
                trunc_ln368_reg_3698 <= trunc_ln368_fu_2318_p1;
                x_assign_4_reg_3686 <= x_assign_4_fu_2290_p6;
                x_assign_reg_3692 <= x_assign_fu_2304_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_V_reg_3162 <= basePhysAddr_V_0_data_reg(31 downto 2);
                ret_V_reg_3172 <= ret_V_fu_1412_p2;
                    zext_ln215_reg_3167(29 downto 0) <= zext_ln215_fu_1408_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state130) and (ap_phi_mux_readyLch_flag_1_phi_fu_1208_p6 = ap_const_lv1_1))) then
                readyLch <= readyRch_new_1_reg_1186;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state130) and (ap_phi_mux_readyRch_flag_1_phi_fu_1176_p6 = ap_const_lv1_1))) then
                readyRch <= readyRch_new_1_reg_1186;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then
                reg_1340 <= configReg_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45))) then
                reg_1345 <= configReg_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state50) or ((ap_const_lv1_0 = and_ln24_1_reg_3633) and (ap_const_logic_1 = ap_CS_fsm_state97)))) then
                reg_1349 <= grp_fu_1238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state50) or ((ap_const_lv1_0 = and_ln31_1_reg_3639) and (ap_const_logic_1 = ap_CS_fsm_state97)))) then
                reg_1356 <= grp_fu_1244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state51))) then
                reg_1362 <= grp_fu_1238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state53))) then
                reg_1369 <= configReg_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state57))) then
                reg_1374 <= grp_fu_1230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state58))) then
                reg_1383 <= grp_fu_1230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln24_1_reg_3633) and (ap_const_logic_1 = ap_CS_fsm_state104)) or ((ap_const_lv1_0 = and_ln24_1_reg_3633) and (ap_const_logic_1 = ap_CS_fsm_state93)))) then
                reg_1388 <= grp_fu_1230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln31_1_reg_3639) and (ap_const_logic_1 = ap_CS_fsm_state104)) or ((ap_const_lv1_0 = and_ln31_1_reg_3639) and (ap_const_logic_1 = ap_CS_fsm_state93)))) then
                reg_1393 <= grp_fu_1234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state119))) then
                select_ln282_1_reg_3934 <= select_ln282_1_fu_3021_p3;
                select_ln303_reg_3929 <= select_ln303_fu_2947_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state120))) then
                select_ln303_1_reg_3947 <= select_ln303_1_fu_3043_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state128) and (t_V_1_reg_1145 = ap_const_lv2_0))) then
                srcDatas_l_1 <= phi_ln257_reg_1157;
                srcDatas_r_1 <= select_ln258_1_fu_3098_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state128) and (t_V_1_reg_1145 = ap_const_lv2_1))) then
                srcDatas_l_2 <= phi_ln257_reg_1157;
                srcDatas_r_2 <= select_ln258_1_fu_3098_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((t_V_1_reg_1145 = ap_const_lv2_1)) and not((t_V_1_reg_1145 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state128))) then
                srcDatas_l_3 <= phi_ln257_reg_1157;
                srcDatas_r_3 <= select_ln258_1_fu_3098_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                srcL_V_reg_3245 <= srcL_V_fu_1484_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                srcR_V_reg_3255 <= srcR_V_fu_1509_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state127)) then
                stageIndex_V_1_reg_3955 <= stageIndex_V_1_fu_3063_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                stageIndex_V_reg_3293 <= stageIndex_V_fu_1539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                status_V_reg_3183 <= physMemPtr_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                tmp_12_i_reg_3530 <= grp_fu_1248_p2;
                tmp_14_i_reg_3535 <= grp_fu_1252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_1_reg_3275 <= grp_fu_1269_p1;
                tmp_reg_3270 <= grp_fu_1266_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                tmp_2_i_reg_3458 <= grp_fu_1244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln24_1_reg_3633) and (ap_const_logic_1 = ap_CS_fsm_state104))) then
                tmp_31_reg_3656 <= grp_fu_1272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln31_1_reg_3639) and (ap_const_logic_1 = ap_CS_fsm_state104))) then
                tmp_34_reg_3661 <= grp_fu_1276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                tmp_35_reg_3544 <= tmp_35_fu_1924_p6;
                tmp_36_reg_3549 <= tmp_36_fu_1939_p6;
                trunc_ln234_reg_3540 <= trunc_ln234_fu_1920_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_1533_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    tmp_4_reg_3298(6 downto 4) <= tmp_4_fu_1545_p3(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                trunc_ln237_reg_3414 <= trunc_ln237_fu_1790_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                trunc_ln241_reg_3401 <= trunc_ln241_fu_1772_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                trunc_ln368_4_reg_3645 <= trunc_ln368_4_fu_2167_p1;
            end if;
        end if;
    end process;
    numOfStage_1_data_reg(1 downto 0) <= "00";
    numOfStage_1_data_reg(31 downto 3) <= "00000000000000000000000000000";
    configSizePerStage_1_data_reg(3 downto 0) <= "0000";
    configSizePerStage_1_data_reg(31 downto 5) <= "000000000000000000000000000";
    zext_ln215_reg_3167(30) <= '0';
    tmp_4_reg_3298(3 downto 0) <= "0000";
    configReg_addr_15_reg_3327(3 downto 0) <= "0010";
    configReg_addr_1_reg_3332(3 downto 0) <= "0011";
    configReg_addr_2_reg_3337(3 downto 0) <= "0100";
    configReg_addr_4_reg_3347(3 downto 0) <= "0110";
    configReg_addr_5_reg_3352(3 downto 0) <= "0111";
    configReg_addr_6_reg_3357(3 downto 0) <= "1000";
    configReg_addr_7_reg_3362(3 downto 0) <= "1001";
    configReg_addr_8_reg_3367(3 downto 0) <= "1010";
    configReg_addr_9_reg_3372(3 downto 0) <= "1011";
    configReg_addr_10_reg_3377(3 downto 0) <= "1100";
    configReg_addr_11_reg_3382(3 downto 0) <= "1101";
    configReg_addr_12_reg_3387(3 downto 0) <= "1110";
    configReg_addr_13_reg_3392(3 downto 0) <= "1111";
    thresh_reg_3599(31) <= '0';
    absL_reg_3609(31) <= '0';
    absR_reg_3615(31) <= '0';
    thresh_1_reg_3709(31) <= '0';
    absL_1_reg_3717(31) <= '0';
    absR_1_reg_3723(31) <= '0';
    monitorDstL_1_reg_3741(31) <= '0';
    monitorDstR_1_reg_3747(31) <= '0';
    tmp_2_reg_3820(23) <= '1';
    tmp_s_reg_3893(23) <= '1';
    monitorSrcL_1_state(1 downto 0) <= "00";
    monitorSrcR_1_state(1 downto 0) <= "00";
    monitorDstL_1_state(1 downto 0) <= "00";
    monitorDstR_1_state(1 downto 0) <= "00";
    counter_1_state(1 downto 0) <= "00";
    numOfStage_1_state(1 downto 0) <= "00";
    configSizePerStage_1_state(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state11, icmp_ln761_fu_1428_p2, or_ln198_fu_1468_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state126, physMemPtr_V_AWREADY, physMemPtr_V_WREADY, physMemPtr_V_ARREADY, physMemPtr_V_RVALID, physMemPtr_V_BVALID, ap_block_state11_io, ap_CS_fsm_state42, icmp_ln887_fu_1533_p2, ap_CS_fsm_state43, id_fu_1768_p1, ap_CS_fsm_state82, grp_effect_delay_fu_1218_ap_done, ap_CS_fsm_state127, icmp_ln887_1_fu_3057_p2, ap_CS_fsm_state130, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_boolean_0 = ap_block_state11_io) and (or_ln198_fu_1468_p2 = ap_const_lv1_0) and (icmp_ln761_fu_1428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and ((or_ln198_fu_1468_p2 = ap_const_lv1_1) or (icmp_ln761_fu_1428_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state130;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (icmp_ln887_fu_1533_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state113;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                if ((not((id_fu_1768_p1 = ap_const_lv3_4)) and not((id_fu_1768_p1 = ap_const_lv3_3)) and not((id_fu_1768_p1 = ap_const_lv3_2)) and not((id_fu_1768_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (id_fu_1768_p1 = ap_const_lv3_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state107;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (id_fu_1768_p1 = ap_const_lv3_2))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (id_fu_1768_p1 = ap_const_lv3_3))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_effect_delay_fu_1218_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state119))) then
                    ap_NS_fsm <= ap_ST_fsm_state120;
                else
                    ap_NS_fsm <= ap_ST_fsm_state119;
                end if;
            when ap_ST_fsm_state120 => 
                if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state120))) then
                    ap_NS_fsm <= ap_ST_fsm_state121;
                else
                    ap_NS_fsm <= ap_ST_fsm_state120;
                end if;
            when ap_ST_fsm_state121 => 
                if (((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state121))) then
                    ap_NS_fsm <= ap_ST_fsm_state122;
                else
                    ap_NS_fsm <= ap_ST_fsm_state121;
                end if;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                if (((physMemPtr_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state126))) then
                    ap_NS_fsm <= ap_ST_fsm_state127;
                else
                    ap_NS_fsm <= ap_ST_fsm_state126;
                end if;
            when ap_ST_fsm_state127 => 
                if (((icmp_ln887_1_fu_3057_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state127))) then
                    ap_NS_fsm <= ap_ST_fsm_state128;
                else
                    ap_NS_fsm <= ap_ST_fsm_state129;
                end if;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state130))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state130;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a1_fu_1854_p1 <= reg_1345;
    a2_fu_1860_p1 <= configReg_load_5_reg_3483;
    absL_1_fu_2370_p1 <= p_Result_12_fu_2362_p3;
    absL_fu_2062_p1 <= p_Result_16_fu_2054_p3;
    absR_1_fu_2394_p1 <= p_Result_13_fu_2386_p3;
    absR_fu_2086_p1 <= p_Result_17_fu_2078_p3;
    add_ln207_fu_1494_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(counter_0_data_reg));
    and_ln11_fu_2487_p2 <= (tmp_18_reg_3753 and or_ln257_reg_3729);
    and_ln12_fu_2511_p2 <= (tmp_20_reg_3758 and or_ln257_2_reg_3735);
    and_ln198_fu_1457_p0 <= (0=>lrclk_0_data_reg, others=>'-');
    and_ln198_fu_1457_p2 <= (xor_ln198_fu_1451_p2 and and_ln198_fu_1457_p0);
    and_ln24_1_fu_2151_p2 <= (grp_fu_1272_p2 and and_ln24_fu_2147_p2);
    and_ln24_fu_2147_p2 <= (or_ln24_reg_3621 and or_ln24_1_reg_3593);
    and_ln257_1_fu_2459_p2 <= (grp_fu_1272_p2 and and_ln257_fu_2455_p2);
    and_ln257_2_fu_2471_p2 <= (or_ln257_2_reg_3735 and or_ln257_1_reg_3703);
    and_ln257_3_fu_2475_p2 <= (grp_fu_1276_p2 and and_ln257_2_fu_2471_p2);
    and_ln257_fu_2455_p2 <= (or_ln257_reg_3729 and or_ln257_1_reg_3703);
    and_ln282_1_fu_3016_p2 <= (xor_ln278_1_fu_3011_p2 and icmp_ln282_1_reg_3881);
    and_ln282_fu_2840_p2 <= (xor_ln278_fu_2835_p2 and icmp_ln282_reg_3814);
    and_ln284_1_fu_2899_p2 <= (xor_ln282_1_fu_2893_p2 and icmp_ln284_1_fu_2862_p2);
    and_ln284_fu_2687_p2 <= (xor_ln282_fu_2681_p2 and icmp_ln284_fu_2650_p2);
    and_ln285_1_fu_2822_p2 <= (xor_ln285_fu_2817_p2 and and_ln284_reg_3836);
    and_ln285_2_fu_2905_p2 <= (icmp_ln285_1_fu_2867_p2 and and_ln284_1_fu_2899_p2);
    and_ln285_3_fu_2998_p2 <= (xor_ln285_1_fu_2993_p2 and and_ln284_1_reg_3909);
    and_ln285_fu_2693_p2 <= (icmp_ln285_fu_2655_p2 and and_ln284_fu_2687_p2);
    and_ln28_1_fu_2207_p2 <= (xor_ln24_fu_2202_p2 and and_ln28_fu_2184_p2);
    and_ln28_fu_2184_p2 <= (tmp_31_reg_3656 and or_ln24_reg_3621);
    and_ln295_1_fu_2931_p2 <= (xor_ln284_1_fu_2925_p2 and icmp_ln295_1_fu_2877_p2);
    and_ln295_fu_2719_p2 <= (xor_ln284_fu_2713_p2 and icmp_ln295_fu_2665_p2);
    and_ln31_1_fu_2161_p2 <= (grp_fu_1276_p2 and and_ln31_fu_2157_p2);
    and_ln31_fu_2157_p2 <= (or_ln31_reg_3627 and or_ln24_1_reg_3593);
    and_ln35_1_fu_2250_p2 <= (xor_ln31_fu_2245_p2 and and_ln35_fu_2227_p2);
    and_ln35_fu_2227_p2 <= (tmp_34_reg_3661 and or_ln31_reg_3627);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state121 <= ap_CS_fsm(120);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state128 <= ap_CS_fsm(127);
    ap_CS_fsm_state129 <= ap_CS_fsm(128);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);

    ap_block_state11_io_assign_proc : process(physMemPtr_V_ARREADY, ap_predicate_op196_readreq_state11)
    begin
                ap_block_state11_io <= ((physMemPtr_V_ARREADY = ap_const_logic_0) and (ap_predicate_op196_readreq_state11 = ap_const_boolean_1));
    end process;


    ap_block_state130_assign_proc : process(monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
                ap_block_state130 <= ((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state130, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state130))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_dstDatas_l_0_0_be_phi_fu_762_p40_assign_proc : process(id_reg_3397, trunc_ln237_reg_3414, ap_CS_fsm_state80, ap_phi_mux_dstDatas_l_0_4_phi_fu_592_p8, dstDatas_l_0_0_be_reg_758)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_0) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_1) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_2) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_3) and (id_reg_3397 = ap_const_lv3_4)))) then 
            ap_phi_mux_dstDatas_l_0_0_be_phi_fu_762_p40 <= ap_phi_mux_dstDatas_l_0_4_phi_fu_592_p8;
        else 
            ap_phi_mux_dstDatas_l_0_0_be_phi_fu_762_p40 <= dstDatas_l_0_0_be_reg_758;
        end if; 
    end process;


    ap_phi_mux_dstDatas_l_0_4_phi_fu_592_p8_assign_proc : process(reg_1374, id_reg_3397, trunc_ln237_reg_3414, ap_CS_fsm_state80, dstDatas_l_0_0_reg_517)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_0) and (id_reg_3397 = ap_const_lv3_4))) then 
            ap_phi_mux_dstDatas_l_0_4_phi_fu_592_p8 <= reg_1374;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_1) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_2) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_3) and (id_reg_3397 = ap_const_lv3_4)))) then 
            ap_phi_mux_dstDatas_l_0_4_phi_fu_592_p8 <= dstDatas_l_0_0_reg_517;
        else 
            ap_phi_mux_dstDatas_l_0_4_phi_fu_592_p8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_dstDatas_l_1_0_be_phi_fu_711_p40_assign_proc : process(id_reg_3397, trunc_ln237_reg_3414, ap_CS_fsm_state80, ap_phi_mux_dstDatas_l_1_4_phi_fu_576_p8, dstDatas_l_1_0_be_reg_707)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_0) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_1) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_2) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_3) and (id_reg_3397 = ap_const_lv3_4)))) then 
            ap_phi_mux_dstDatas_l_1_0_be_phi_fu_711_p40 <= ap_phi_mux_dstDatas_l_1_4_phi_fu_576_p8;
        else 
            ap_phi_mux_dstDatas_l_1_0_be_phi_fu_711_p40 <= dstDatas_l_1_0_be_reg_707;
        end if; 
    end process;


    ap_phi_mux_dstDatas_l_1_4_phi_fu_576_p8_assign_proc : process(reg_1374, id_reg_3397, trunc_ln237_reg_3414, ap_CS_fsm_state80, dstDatas_l_1_0_reg_505)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_1) and (id_reg_3397 = ap_const_lv3_4))) then 
            ap_phi_mux_dstDatas_l_1_4_phi_fu_576_p8 <= reg_1374;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_0) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_2) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_3) and (id_reg_3397 = ap_const_lv3_4)))) then 
            ap_phi_mux_dstDatas_l_1_4_phi_fu_576_p8 <= dstDatas_l_1_0_reg_505;
        else 
            ap_phi_mux_dstDatas_l_1_4_phi_fu_576_p8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_dstDatas_l_2_0_be_phi_fu_660_p40_assign_proc : process(id_reg_3397, trunc_ln237_reg_3414, ap_CS_fsm_state80, ap_phi_mux_dstDatas_l_2_4_phi_fu_560_p8, dstDatas_l_2_0_be_reg_656)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_0) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_1) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_2) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_3) and (id_reg_3397 = ap_const_lv3_4)))) then 
            ap_phi_mux_dstDatas_l_2_0_be_phi_fu_660_p40 <= ap_phi_mux_dstDatas_l_2_4_phi_fu_560_p8;
        else 
            ap_phi_mux_dstDatas_l_2_0_be_phi_fu_660_p40 <= dstDatas_l_2_0_be_reg_656;
        end if; 
    end process;


    ap_phi_mux_dstDatas_l_2_4_phi_fu_560_p8_assign_proc : process(reg_1374, id_reg_3397, trunc_ln237_reg_3414, ap_CS_fsm_state80, dstDatas_l_2_0_reg_493)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_2) and (id_reg_3397 = ap_const_lv3_4))) then 
            ap_phi_mux_dstDatas_l_2_4_phi_fu_560_p8 <= reg_1374;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_0) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_1) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_3) and (id_reg_3397 = ap_const_lv3_4)))) then 
            ap_phi_mux_dstDatas_l_2_4_phi_fu_560_p8 <= dstDatas_l_2_0_reg_493;
        else 
            ap_phi_mux_dstDatas_l_2_4_phi_fu_560_p8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_dstDatas_l_3_0_be_phi_fu_609_p40_assign_proc : process(id_reg_3397, trunc_ln237_reg_3414, ap_CS_fsm_state80, ap_phi_mux_dstDatas_l_3_4_phi_fu_544_p8, dstDatas_l_3_0_be_reg_605)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_0) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_1) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_2) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_3) and (id_reg_3397 = ap_const_lv3_4)))) then 
            ap_phi_mux_dstDatas_l_3_0_be_phi_fu_609_p40 <= ap_phi_mux_dstDatas_l_3_4_phi_fu_544_p8;
        else 
            ap_phi_mux_dstDatas_l_3_0_be_phi_fu_609_p40 <= dstDatas_l_3_0_be_reg_605;
        end if; 
    end process;


    ap_phi_mux_dstDatas_l_3_4_phi_fu_544_p8_assign_proc : process(reg_1374, id_reg_3397, trunc_ln237_reg_3414, dstDatas_l_3_0_reg_481, ap_CS_fsm_state80)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_0) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_1) and (id_reg_3397 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_2) and (id_reg_3397 = ap_const_lv3_4)))) then 
            ap_phi_mux_dstDatas_l_3_4_phi_fu_544_p8 <= dstDatas_l_3_0_reg_481;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) and (trunc_ln237_reg_3414 = ap_const_lv2_3) and (id_reg_3397 = ap_const_lv3_4))) then 
            ap_phi_mux_dstDatas_l_3_4_phi_fu_544_p8 <= reg_1374;
        else 
            ap_phi_mux_dstDatas_l_3_4_phi_fu_544_p8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ap_phi_mux_readyLch_flag_1_phi_fu_1208_p6 <= readyLch_flag_1_reg_1203;
    ap_phi_mux_readyRch_flag_1_phi_fu_1176_p6 <= readyRch_flag_1_reg_1171;
    ap_phi_mux_t_V_1_phi_fu_1149_p4 <= t_V_1_reg_1145;

    ap_predicate_op196_readreq_state11_assign_proc : process(icmp_ln761_fu_1428_p2, or_ln198_fu_1468_p2)
    begin
                ap_predicate_op196_readreq_state11 <= ((or_ln198_fu_1468_p2 = ap_const_lv1_0) and (icmp_ln761_fu_1428_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state130, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if ((not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state130))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    az1L_fu_1865_p1 <= reg_1369;
    az2L_fu_1874_p1 <= configReg_load_11_reg_3488;
    b0_fu_1820_p1 <= reg_1340;
    b1_fu_1825_p1 <= reg_1345;
    b2_fu_1839_p1 <= reg_1345;

    basePhysAddr_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state130, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state130)))) then 
            basePhysAddr_V_0_ack_out <= ap_const_logic_1;
        else 
            basePhysAddr_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln11_1_fu_2500_p1 <= xor_ln11_fu_2494_p2;
    bitcast_ln11_fu_2491_p1 <= monitorDstL_1_reg_3741;
    bitcast_ln12_1_fu_2524_p1 <= xor_ln12_fu_2518_p2;
    bitcast_ln12_fu_2515_p1 <= monitorDstR_1_reg_3747;
    bitcast_ln28_1_fu_2198_p1 <= xor_ln28_fu_2192_p2;
    bitcast_ln28_fu_2188_p1 <= reg_1388;
    bitcast_ln35_1_fu_2241_p1 <= xor_ln35_fu_2235_p2;
    bitcast_ln35_fu_2231_p1 <= reg_1393;
    bitcast_ln705_1_fu_1895_p1 <= reg_1383;
    bitcast_ln705_2_fu_1882_p1 <= bz0L_reg_3420;
    bitcast_ln705_3_fu_1886_p1 <= bz0R_reg_3432;
    bitcast_ln705_fu_1890_p1 <= reg_1374;
    bz1L_fu_1830_p1 <= configReg_load_13_reg_3426;
    bz1R_fu_1834_p1 <= reg_1340;
    bz2L_fu_1844_p1 <= reg_1369;
    bz2R_fu_1849_p1 <= reg_1345;

    configReg_address0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state64, ap_CS_fsm_state51, ap_CS_fsm_state58, ap_CS_fsm_state53, ap_CS_fsm_state56, ap_CS_fsm_state65, ap_CS_fsm_state79, ap_CS_fsm_state42, ap_CS_fsm_state43, configReg_addr_15_reg_3327, configReg_addr_1_reg_3332, configReg_addr_2_reg_3337, configReg_addr_4_reg_3347, configReg_addr_5_reg_3352, configReg_addr_6_reg_3357, configReg_addr_7_reg_3362, configReg_addr_8_reg_3367, configReg_addr_9_reg_3372, configReg_addr_10_reg_3377, configReg_addr_11_reg_3382, configReg_addr_12_reg_3387, configReg_addr_13_reg_3392, id_fu_1768_p1, ap_CS_fsm_state46, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state82, grp_effect_delay_fu_1218_config_r_address0, ap_CS_fsm_state80, zext_ln225_fu_1553_p1, tmp_5_fu_1563_p3, tmp_10_fu_1619_p3, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            configReg_address0 <= configReg_addr_15_reg_3327;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            configReg_address0 <= configReg_addr_9_reg_3372;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            configReg_address0 <= configReg_addr_8_reg_3367;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            configReg_address0 <= configReg_addr_2_reg_3337;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            configReg_address0 <= configReg_addr_7_reg_3362;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            configReg_address0 <= configReg_addr_6_reg_3357;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            configReg_address0 <= configReg_addr_1_reg_3332;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            configReg_address0 <= configReg_addr_13_reg_3392;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            configReg_address0 <= configReg_addr_12_reg_3387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            configReg_address0 <= configReg_addr_5_reg_3352;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            configReg_address0 <= configReg_addr_11_reg_3382;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            configReg_address0 <= configReg_addr_10_reg_3377;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            configReg_address0 <= configReg_addr_4_reg_3347;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state43) and (id_fu_1768_p1 = ap_const_lv3_2)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (id_fu_1768_p1 = ap_const_lv3_1)))) then 
            configReg_address0 <= tmp_5_fu_1563_p3(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (id_fu_1768_p1 = ap_const_lv3_4))) then 
            configReg_address0 <= tmp_10_fu_1619_p3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            configReg_address0 <= zext_ln225_fu_1553_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            configReg_address0 <= grp_effect_delay_fu_1218_config_r_address0;
        else 
            configReg_address0 <= "XXXXXX";
        end if; 
    end process;


    configReg_ce0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state64, ap_CS_fsm_state51, ap_CS_fsm_state58, ap_CS_fsm_state53, ap_CS_fsm_state56, ap_CS_fsm_state65, ap_CS_fsm_state79, ap_CS_fsm_state42, ap_CS_fsm_state43, id_fu_1768_p1, ap_CS_fsm_state46, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state82, grp_effect_delay_fu_1218_config_r_ce0, ap_CS_fsm_state80, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state42) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (id_fu_1768_p1 = ap_const_lv3_4)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (id_fu_1768_p1 = ap_const_lv3_2)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (id_fu_1768_p1 = ap_const_lv3_1)))) then 
            configReg_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            configReg_ce0 <= grp_effect_delay_fu_1218_config_r_ce0;
        else 
            configReg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    configReg_d0_assign_proc : process(reg_1340, ap_CS_fsm_state64, reg_1369, ap_CS_fsm_state65, ap_CS_fsm_state79, configReg_load_13_reg_3426, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state82, grp_effect_delay_fu_1218_config_r_d0, ap_CS_fsm_state80, ap_CS_fsm_state62, bitcast_ln705_2_fu_1882_p1, ap_CS_fsm_state63, bitcast_ln705_3_fu_1886_p1, bitcast_ln705_fu_1890_p1, bitcast_ln705_1_fu_1895_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            configReg_d0 <= bitcast_ln705_1_fu_1895_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            configReg_d0 <= bitcast_ln705_fu_1890_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            configReg_d0 <= reg_1340;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            configReg_d0 <= configReg_load_13_reg_3426;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            configReg_d0 <= bitcast_ln705_3_fu_1886_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            configReg_d0 <= bitcast_ln705_2_fu_1882_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            configReg_d0 <= reg_1369;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            configReg_d0 <= grp_effect_delay_fu_1218_config_r_d0;
        else 
            configReg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    configReg_we0_assign_proc : process(ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state79, id_reg_3397, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state82, grp_effect_delay_fu_1218_config_r_we0, ap_CS_fsm_state80, ap_CS_fsm_state62, ap_CS_fsm_state63)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (id_reg_3397 = ap_const_lv3_4)))) then 
            configReg_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            configReg_we0 <= grp_effect_delay_fu_1218_config_r_we0;
        else 
            configReg_we0 <= ap_const_logic_0;
        end if; 
    end process;


    configSizePerStage_1_vld_in_assign_proc : process(ap_CS_fsm_state10, physMemPtr_V_RVALID)
    begin
        if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            configSizePerStage_1_vld_in <= ap_const_logic_1;
        else 
            configSizePerStage_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    counter_0_ack_out_assign_proc : process(ap_CS_fsm_state19, physMemPtr_V_RVALID, ap_CS_fsm_state130, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if ((((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state130)))) then 
            counter_0_ack_out <= ap_const_logic_1;
        else 
            counter_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    counter_1_vld_in_assign_proc : process(ap_CS_fsm_state19, physMemPtr_V_RVALID)
    begin
        if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            counter_1_vld_in <= ap_const_logic_1;
        else 
            counter_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dstDatas_0_l_5_fu_1776_p5 <= t_V_reg_529(2 - 1 downto 0);
    dst_l_1_fu_2221_p3 <= 
        x_assign_5_reg_3574 when (and_ln24_1_reg_3633(0) = '1') else 
        select_ln28_fu_2213_p3;
    dst_l_fu_2504_p3 <= 
        bitcast_ln11_1_fu_2500_p1 when (and_ln11_fu_2487_p2(0) = '1') else 
        monitorDstL_1_reg_3741;
    dst_r_1_fu_2264_p3 <= 
        x_assign_6_reg_3581 when (and_ln31_1_reg_3639(0) = '1') else 
        select_ln35_fu_2256_p3;
    dst_r_fu_2528_p3 <= 
        bitcast_ln12_1_fu_2524_p1 when (and_ln12_fu_2511_p2(0) = '1') else 
        monitorDstR_1_reg_3747;
    exp_V_1_fu_2751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_fu_2741_p4),9));
    exp_V_fu_2614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_2604_p4),9));

    extMemPtr_V_ARVALID_assign_proc : process(ap_CS_fsm_state81, ap_CS_fsm_state82, grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            extMemPtr_V_ARVALID <= grp_effect_delay_fu_1218_m_axi_extMemPtr_V_ARVALID;
        else 
            extMemPtr_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    extMemPtr_V_AWVALID_assign_proc : process(ap_CS_fsm_state81, ap_CS_fsm_state82, grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            extMemPtr_V_AWVALID <= grp_effect_delay_fu_1218_m_axi_extMemPtr_V_AWVALID;
        else 
            extMemPtr_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    extMemPtr_V_BREADY_assign_proc : process(ap_CS_fsm_state81, ap_CS_fsm_state82, grp_effect_delay_fu_1218_m_axi_extMemPtr_V_BREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            extMemPtr_V_BREADY <= grp_effect_delay_fu_1218_m_axi_extMemPtr_V_BREADY;
        else 
            extMemPtr_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    extMemPtr_V_RREADY_assign_proc : process(ap_CS_fsm_state81, ap_CS_fsm_state82, grp_effect_delay_fu_1218_m_axi_extMemPtr_V_RREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            extMemPtr_V_RREADY <= grp_effect_delay_fu_1218_m_axi_extMemPtr_V_RREADY;
        else 
            extMemPtr_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    extMemPtr_V_WVALID_assign_proc : process(ap_CS_fsm_state81, ap_CS_fsm_state82, grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            extMemPtr_V_WVALID <= grp_effect_delay_fu_1218_m_axi_extMemPtr_V_WVALID;
        else 
            extMemPtr_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_effect_delay_fu_1218_ap_start <= grp_effect_delay_fu_1218_ap_start_reg;

    grp_fu_1230_opcode_assign_proc : process(ap_CS_fsm_state52, and_ln24_1_reg_3633, ap_CS_fsm_state51, ap_CS_fsm_state58, ap_CS_fsm_state65, ap_CS_fsm_state72, ap_CS_fsm_state59, ap_CS_fsm_state66, ap_CS_fsm_state73, ap_CS_fsm_state87, ap_CS_fsm_state98)
    begin
        if (((ap_const_lv1_0 = and_ln24_1_reg_3633) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            grp_fu_1230_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state59) or ((ap_const_lv1_0 = and_ln24_1_reg_3633) and (ap_const_logic_1 = ap_CS_fsm_state98)))) then 
            grp_fu_1230_opcode <= ap_const_lv2_0;
        else 
            grp_fu_1230_opcode <= "XX";
        end if; 
    end process;


    grp_fu_1230_p0_assign_proc : process(ap_CS_fsm_state52, reg_1349, reg_1362, ap_CS_fsm_state51, ap_CS_fsm_state58, reg_1374, reg_1383, ap_CS_fsm_state65, ap_CS_fsm_state72, ap_CS_fsm_state59, thresh_reg_3599, absL_reg_3609, ap_CS_fsm_state66, ap_CS_fsm_state73, ap_CS_fsm_state87, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            grp_fu_1230_p0 <= thresh_reg_3599;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_fu_1230_p0 <= absL_reg_3609;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            grp_fu_1230_p0 <= reg_1383;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            grp_fu_1230_p0 <= reg_1374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_1230_p0 <= reg_1362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_1230_p0 <= reg_1349;
        else 
            grp_fu_1230_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1230_p1_assign_proc : process(ap_CS_fsm_state52, reg_1349, reg_1356, reg_1362, ap_CS_fsm_state51, ap_CS_fsm_state58, ap_CS_fsm_state65, ap_CS_fsm_state72, tmp_2_i_reg_3458, ap_CS_fsm_state59, tmp_12_i_reg_3530, tmp_14_i_reg_3535, thresh_reg_3599, ap_CS_fsm_state66, ap_CS_fsm_state73, ap_CS_fsm_state87, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_fu_1230_p1 <= thresh_reg_3599;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_fu_1230_p1 <= tmp_14_i_reg_3535;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_1230_p1 <= tmp_12_i_reg_3530;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_1230_p1 <= reg_1362;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state98))) then 
            grp_fu_1230_p1 <= reg_1349;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_1230_p1 <= tmp_2_i_reg_3458;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_fu_1230_p1 <= reg_1356;
        else 
            grp_fu_1230_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1234_opcode_assign_proc : process(and_ln31_1_reg_3639, ap_CS_fsm_state87, ap_CS_fsm_state98)
    begin
        if ((ap_const_lv1_0 = and_ln31_1_reg_3639)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                grp_fu_1234_opcode <= ap_const_lv2_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                grp_fu_1234_opcode <= ap_const_lv2_0;
            else 
                grp_fu_1234_opcode <= "XX";
            end if;
        else 
            grp_fu_1234_opcode <= "XX";
        end if; 
    end process;


    grp_fu_1234_p0_assign_proc : process(thresh_reg_3599, absR_reg_3615, ap_CS_fsm_state87, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            grp_fu_1234_p0 <= thresh_reg_3599;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_fu_1234_p0 <= absR_reg_3615;
        else 
            grp_fu_1234_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1234_p1_assign_proc : process(reg_1356, thresh_reg_3599, ap_CS_fsm_state87, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            grp_fu_1234_p1 <= reg_1356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_fu_1234_p1 <= thresh_reg_3599;
        else 
            grp_fu_1234_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1238_p0_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state55, reg_1388, ap_CS_fsm_state42, b0_fu_1820_p1, b0_reg_3438, ap_CS_fsm_state48, bz2L_fu_1844_p1, bz2R_fu_1849_p1, ap_CS_fsm_state61, az1L_fu_1865_p1, ap_CS_fsm_state94, ap_CS_fsm_state113, dstDatas_l_3_0_reg_481, dstDatas_3_r_3_fu_240)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            grp_fu_1238_p0 <= dstDatas_3_r_3_fu_240;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            grp_fu_1238_p0 <= reg_1388;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_1238_p0 <= az1L_fu_1865_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_1238_p0 <= bz2R_fu_1849_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_1238_p0 <= bz2L_fu_1844_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_1238_p0 <= b0_reg_3438;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_1238_p0 <= b0_fu_1820_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_1238_p0 <= dstDatas_l_3_0_reg_481;
        else 
            grp_fu_1238_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1238_p1_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state42, bz0L_reg_3420, bz0R_reg_3432, ap_CS_fsm_state48, b2_fu_1839_p1, b2_reg_3463, a1_fu_1854_p1, ap_CS_fsm_state61, ratio_fu_2178_p1, ap_CS_fsm_state94, ap_CS_fsm_state113)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            grp_fu_1238_p1 <= ratio_fu_2178_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_1238_p1 <= a1_fu_1854_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_1238_p1 <= b2_reg_3463;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_1238_p1 <= b2_fu_1839_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_1238_p1 <= bz0R_reg_3432;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_1238_p1 <= bz0L_reg_3420;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            grp_fu_1238_p1 <= ap_const_lv32_4AFFFFFE;
        else 
            grp_fu_1238_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1244_p0_assign_proc : process(ap_CS_fsm_state47, reg_1393, bz1L_fu_1830_p1, bz1R_fu_1834_p1, ap_CS_fsm_state48, ap_CS_fsm_state61, az2L_fu_1874_p1, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            grp_fu_1244_p0 <= reg_1393;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_1244_p0 <= az2L_fu_1874_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_1244_p0 <= bz1R_fu_1834_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_1244_p0 <= bz1L_fu_1830_p1;
        else 
            grp_fu_1244_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1244_p1_assign_proc : process(ap_CS_fsm_state47, b1_fu_1825_p1, b1_reg_3443, ap_CS_fsm_state48, ap_CS_fsm_state61, a2_fu_1860_p1, ratio_fu_2178_p1, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            grp_fu_1244_p1 <= ratio_fu_2178_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_1244_p1 <= a2_fu_1860_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_1244_p1 <= b1_reg_3443;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_1244_p1 <= b1_fu_1825_p1;
        else 
            grp_fu_1244_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1248_p0 <= configReg_load_10_reg_3478;
    grp_fu_1248_p1 <= reg_1345;
    grp_fu_1252_p0 <= configReg_load_12_reg_3493;
    grp_fu_1252_p1 <= configReg_load_5_reg_3483;
        grp_fu_1266_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(srcL_V_reg_3245),32));

        grp_fu_1269_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(srcR_V_reg_3255),32));


    grp_fu_1272_p0_assign_proc : process(x_assign_5_reg_3574, ap_CS_fsm_state85, absL_fu_2062_p1, ap_CS_fsm_state108, absL_1_fu_2370_p1, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            grp_fu_1272_p0 <= absL_1_fu_2370_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_fu_1272_p0 <= x_assign_5_reg_3574;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_1272_p0 <= absL_fu_2062_p1;
        else 
            grp_fu_1272_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1272_p1_assign_proc : process(thresh_fu_2037_p1, ap_CS_fsm_state85, thresh_1_fu_2345_p1, ap_CS_fsm_state108, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            grp_fu_1272_p1 <= thresh_1_fu_2345_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_fu_1272_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_1272_p1 <= thresh_fu_2037_p1;
        else 
            grp_fu_1272_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1276_p0_assign_proc : process(x_assign_6_reg_3581, ap_CS_fsm_state85, absR_fu_2086_p1, ap_CS_fsm_state108, absR_1_fu_2394_p1, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            grp_fu_1276_p0 <= absR_1_fu_2394_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_fu_1276_p0 <= x_assign_6_reg_3581;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_1276_p0 <= absR_fu_2086_p1;
        else 
            grp_fu_1276_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1276_p1_assign_proc : process(thresh_fu_2037_p1, ap_CS_fsm_state85, thresh_1_fu_2345_p1, ap_CS_fsm_state108, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            grp_fu_1276_p1 <= thresh_1_fu_2345_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_fu_1276_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_1276_p1 <= thresh_fu_2037_p1;
        else 
            grp_fu_1276_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1324_p4 <= configReg_q0(30 downto 23);
    grp_fu_1334_p2 <= "0" when (grp_fu_1324_p4 = ap_const_lv8_FF) else "1";
    icmp_ln207_fu_1488_p2 <= "1" when (unsigned(counter_0_data_reg) < unsigned(ap_const_lv32_FFFFFFFE)) else "0";
    icmp_ln24_1_fu_2107_p2 <= "1" when (trunc_ln24_fu_2050_p1 = ap_const_lv23_0) else "0";
    icmp_ln24_3_fu_2018_p2 <= "1" when (trunc_ln31_fu_2014_p1 = ap_const_lv23_0) else "0";
    icmp_ln24_fu_2101_p2 <= "0" when (tmp_27_fu_2091_p4 = ap_const_lv8_FF) else "1";
    icmp_ln257_1_fu_2415_p2 <= "1" when (trunc_ln257_1_fu_2358_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_3_fu_2326_p2 <= "1" when (trunc_ln257_fu_2322_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_4_fu_2437_p2 <= "0" when (tmp_14_fu_2427_p4 = ap_const_lv8_FF) else "1";
    icmp_ln257_5_fu_2443_p2 <= "1" when (trunc_ln257_2_fu_2382_p1 = ap_const_lv23_0) else "0";
    icmp_ln257_fu_2409_p2 <= "0" when (tmp_11_fu_2399_p4 = ap_const_lv8_FF) else "1";
    icmp_ln258_1_fu_3092_p2 <= "1" when (t_V_1_reg_1145 = ap_const_lv2_1) else "0";
    icmp_ln258_fu_3078_p2 <= "1" when (t_V_1_reg_1145 = ap_const_lv2_0) else "0";
    icmp_ln278_1_fu_2759_p2 <= "1" when (trunc_ln262_1_fu_2729_p1 = ap_const_lv31_0) else "0";
    icmp_ln278_fu_2622_p2 <= "1" when (trunc_ln262_fu_2592_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_1_fu_2771_p2 <= "1" when (p_Result_4_fu_2741_p4 = ap_const_lv8_96) else "0";
    icmp_ln282_fu_2634_p2 <= "1" when (p_Result_s_fu_2604_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_1_fu_2862_p2 <= "1" when (signed(sh_amt_2_reg_3873) > signed(ap_const_lv9_0)) else "0";
    icmp_ln284_fu_2650_p2 <= "1" when (signed(sh_amt_reg_3806) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_1_fu_2867_p2 <= "1" when (signed(sh_amt_2_reg_3873) < signed(ap_const_lv9_19)) else "0";
    icmp_ln285_fu_2655_p2 <= "1" when (signed(sh_amt_reg_3806) < signed(ap_const_lv9_19)) else "0";
    icmp_ln295_1_fu_2877_p2 <= "1" when (signed(sh_amt_3_fu_2872_p2) < signed(ap_const_lv9_18)) else "0";
    icmp_ln295_fu_2665_p2 <= "1" when (signed(sh_amt_1_fu_2660_p2) < signed(ap_const_lv9_18)) else "0";
    icmp_ln31_1_fu_2135_p2 <= "1" when (trunc_ln31_1_fu_2074_p1 = ap_const_lv23_0) else "0";
    icmp_ln31_fu_2129_p2 <= "0" when (tmp_32_fu_2119_p4 = ap_const_lv8_FF) else "1";
    icmp_ln761_fu_1428_p2 <= "1" when (status_V_reg_3183 = ap_const_lv32_0) else "0";
    icmp_ln887_1_fu_3057_p2 <= "1" when (t_V_1_reg_1145 = ap_const_lv2_3) else "0";
    icmp_ln887_fu_1533_p2 <= "1" when (t_V_reg_529 = ap_const_lv3_4) else "0";
    id_fu_1768_p1 <= configReg_q0(3 - 1 downto 0);

    lrclk_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state130, monitorSrcL_1_state, monitorSrcR_1_state, monitorDstL_1_state, monitorDstR_1_state, counter_1_state, numOfStage_1_state, configSizePerStage_1_state)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((configSizePerStage_1_state = ap_const_lv2_1) or (numOfStage_1_state = ap_const_lv2_1) or (counter_1_state = ap_const_lv2_1) or (monitorDstR_1_state = ap_const_lv2_1) or (monitorDstL_1_state = ap_const_lv2_1) or (monitorSrcR_1_state = ap_const_lv2_1) or (monitorSrcL_1_state = ap_const_lv2_1) or ((ap_const_logic_1 = ap_const_logic_0) and (configSizePerStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (numOfStage_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (counter_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorDstL_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcR_1_state = ap_const_lv2_3)) or ((ap_const_logic_1 = ap_const_logic_0) and (monitorSrcL_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state130)))) then 
            lrclk_0_ack_out <= ap_const_logic_1;
        else 
            lrclk_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln286_1_fu_2883_p2 <= std_logic_vector(shift_right(unsigned(tmp_s_fu_2852_p3),to_integer(unsigned('0' & sext_ln281_1_fu_2859_p1(24-1 downto 0)))));
    lshr_ln286_fu_2671_p2 <= std_logic_vector(shift_right(unsigned(tmp_2_fu_2640_p3),to_integer(unsigned('0' & sext_ln281_fu_2647_p1(24-1 downto 0)))));
    monitorDstL_1_fu_2465_p3 <= 
        absL_1_reg_3717 when (and_ln257_1_fu_2459_p2(0) = '1') else 
        thresh_1_reg_3709;

    monitorDstL_1_vld_in_assign_proc : process(ap_CS_fsm_state127, icmp_ln887_1_fu_3057_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state127) and (icmp_ln887_1_fu_3057_p2 = ap_const_lv1_1))) then 
            monitorDstL_1_vld_in <= ap_const_logic_1;
        else 
            monitorDstL_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    monitorDstR_1_fu_2481_p3 <= 
        absR_1_reg_3723 when (and_ln257_3_fu_2475_p2(0) = '1') else 
        thresh_1_reg_3709;

    monitorDstR_1_vld_in_assign_proc : process(ap_CS_fsm_state127, icmp_ln887_1_fu_3057_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state127) and (icmp_ln887_1_fu_3057_p2 = ap_const_lv1_1))) then 
            monitorDstR_1_vld_in <= ap_const_logic_1;
        else 
            monitorDstR_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    monitorSrcL_1_vld_in_assign_proc : process(ap_CS_fsm_state127, icmp_ln887_1_fu_3057_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state127) and (icmp_ln887_1_fu_3057_p2 = ap_const_lv1_1))) then 
            monitorSrcL_1_vld_in <= ap_const_logic_1;
        else 
            monitorSrcL_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    monitorSrcR_1_vld_in_assign_proc : process(ap_CS_fsm_state127, icmp_ln887_1_fu_3057_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state127) and (icmp_ln887_1_fu_3057_p2 = ap_const_lv1_1))) then 
            monitorSrcR_1_vld_in <= ap_const_logic_1;
        else 
            monitorSrcR_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    numOfStage_1_vld_in_assign_proc : process(ap_CS_fsm_state10, physMemPtr_V_RVALID)
    begin
        if (((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            numOfStage_1_vld_in <= ap_const_logic_1;
        else 
            numOfStage_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    or_ln110_fu_1586_p2 <= (tmp_4_reg_3298 or ap_const_lv7_3);
    or_ln111_fu_1600_p2 <= (tmp_4_reg_3298 or ap_const_lv7_4);
    or_ln112_fu_1614_p2 <= (tmp_4_reg_3298 or ap_const_lv7_5);
    or_ln113_fu_1628_p2 <= (tmp_4_reg_3298 or ap_const_lv7_6);
    or_ln114_fu_1642_p2 <= (tmp_4_reg_3298 or ap_const_lv7_7);
    or_ln117_fu_1656_p2 <= (tmp_4_reg_3298 or ap_const_lv7_8);
    or_ln118_fu_1670_p2 <= (tmp_4_reg_3298 or ap_const_lv7_9);
    or_ln119_fu_1684_p2 <= (tmp_4_reg_3298 or ap_const_lv7_A);
    or_ln120_fu_1698_p2 <= (tmp_4_reg_3298 or ap_const_lv7_B);
    or_ln121_fu_1712_p2 <= (tmp_4_reg_3298 or ap_const_lv7_C);
    or_ln122_fu_1726_p2 <= (tmp_4_reg_3298 or ap_const_lv7_D);
    or_ln123_fu_1740_p2 <= (tmp_4_reg_3298 or ap_const_lv7_E);
    or_ln124_fu_1754_p2 <= (tmp_4_reg_3298 or ap_const_lv7_F);
    or_ln18_fu_1572_p2 <= (tmp_4_reg_3298 or ap_const_lv7_2);
    or_ln193_fu_1441_p1 <= (0=>lrclk_0_data_reg, others=>'-');
    or_ln193_fu_1441_p2 <= (readyRch or or_ln193_fu_1441_p1);
    or_ln198_fu_1468_p2 <= (xor_ln198_1_fu_1462_p2 or and_ln198_fu_1457_p2);
    or_ln24_1_fu_2024_p2 <= (icmp_ln24_3_fu_2018_p2 or grp_fu_1334_p2);
    or_ln24_fu_2113_p2 <= (icmp_ln24_fu_2101_p2 or icmp_ln24_1_fu_2107_p2);
    or_ln257_1_fu_2332_p2 <= (icmp_ln257_3_fu_2326_p2 or grp_fu_1334_p2);
    or_ln257_2_fu_2449_p2 <= (icmp_ln257_5_fu_2443_p2 or icmp_ln257_4_fu_2437_p2);
    or_ln257_fu_2421_p2 <= (icmp_ln257_fu_2409_p2 or icmp_ln257_1_fu_2415_p2);
    or_ln282_1_fu_2889_p2 <= (icmp_ln282_1_reg_3881 or icmp_ln278_1_reg_3866);
    or_ln282_fu_2677_p2 <= (icmp_ln282_reg_3814 or icmp_ln278_reg_3799);
    or_ln284_1_fu_2919_p2 <= (or_ln282_1_fu_2889_p2 or icmp_ln284_1_fu_2862_p2);
    or_ln284_fu_2707_p2 <= (or_ln282_fu_2677_p2 or icmp_ln284_fu_2650_p2);
    or_ln31_fu_2141_p2 <= (icmp_ln31_fu_2129_p2 or icmp_ln31_1_fu_2135_p2);
    or_ln4_fu_1558_p2 <= (tmp_4_reg_3298 or ap_const_lv7_1);
    p_Result_11_fu_2338_p3 <= (ap_const_lv1_0 & trunc_ln368_reg_3698);
    p_Result_12_fu_2362_p3 <= (ap_const_lv1_0 & trunc_ln368_1_fu_2354_p1);
    p_Result_13_fu_2386_p3 <= (ap_const_lv1_0 & trunc_ln368_2_fu_2378_p1);
    p_Result_14_fu_2030_p3 <= (ap_const_lv1_0 & trunc_ln368_3_reg_3588);
    p_Result_15_fu_2171_p3 <= (ap_const_lv1_0 & trunc_ln368_4_reg_3645);
    p_Result_16_fu_2054_p3 <= (ap_const_lv1_0 & trunc_ln368_5_fu_2046_p1);
    p_Result_17_fu_2078_p3 <= (ap_const_lv1_0 & trunc_ln368_6_fu_2070_p1);
    p_Result_4_fu_2741_p4 <= reg_V_1_fu_2725_p1(30 downto 23);
    p_Result_s_fu_2604_p4 <= reg_V_fu_2588_p1(30 downto 23);
    p_Val2_10_fu_2067_p1 <= x_assign_6_reg_3581;
    p_Val2_5_fu_2351_p1 <= x_assign_4_reg_3686;
    p_Val2_6_fu_2375_p1 <= x_assign_reg_3692;
    p_Val2_9_fu_2043_p1 <= x_assign_5_reg_3574;

    physMemPtr_V_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, physMemPtr_V_ARREADY, ap_predicate_op196_readreq_state11, ap_block_state11_io, zext_ln544_fu_1418_p1, zext_ln544_1_fu_1474_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_predicate_op196_readreq_state11 = ap_const_boolean_1))) then 
            physMemPtr_V_ARADDR <= zext_ln544_1_fu_1474_p1(32 - 1 downto 0);
        elsif (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            physMemPtr_V_ARADDR <= zext_ln544_fu_1418_p1(32 - 1 downto 0);
        else 
            physMemPtr_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, physMemPtr_V_ARREADY, ap_predicate_op196_readreq_state11, ap_block_state11_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_predicate_op196_readreq_state11 = ap_const_boolean_1))) then 
            physMemPtr_V_ARLEN <= ap_const_lv32_2;
        elsif (((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            physMemPtr_V_ARLEN <= ap_const_lv32_1;
        else 
            physMemPtr_V_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, physMemPtr_V_ARREADY, ap_predicate_op196_readreq_state11, ap_block_state11_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state11_io) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_predicate_op196_readreq_state11 = ap_const_boolean_1)) or ((physMemPtr_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            physMemPtr_V_ARVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    physMemPtr_V_AWADDR <= zext_ln544_2_fu_3028_p1(32 - 1 downto 0);

    physMemPtr_V_AWVALID_assign_proc : process(ap_CS_fsm_state119, physMemPtr_V_AWREADY)
    begin
        if (((physMemPtr_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            physMemPtr_V_AWVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_BREADY_assign_proc : process(ap_CS_fsm_state126, physMemPtr_V_BVALID)
    begin
        if (((physMemPtr_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state126))) then 
            physMemPtr_V_BREADY <= ap_const_logic_1;
        else 
            physMemPtr_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state19, physMemPtr_V_RVALID)
    begin
        if ((((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((physMemPtr_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            physMemPtr_V_RREADY <= ap_const_logic_1;
        else 
            physMemPtr_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_WDATA_assign_proc : process(ap_CS_fsm_state120, ap_CS_fsm_state121, sext_ln214_fu_3049_p1, sext_ln214_1_fu_3053_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            physMemPtr_V_WDATA <= sext_ln214_1_fu_3053_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            physMemPtr_V_WDATA <= sext_ln214_fu_3049_p1;
        else 
            physMemPtr_V_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    physMemPtr_V_WVALID_assign_proc : process(ap_CS_fsm_state120, ap_CS_fsm_state121, physMemPtr_V_WREADY)
    begin
        if ((((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state121)) or ((physMemPtr_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state120)))) then 
            physMemPtr_V_WVALID <= ap_const_logic_1;
        else 
            physMemPtr_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    physMemPtr_V_blk_n_AR_assign_proc : process(m_axi_physMemPtr_V_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state11, icmp_ln761_fu_1428_p2, or_ln198_fu_1468_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((or_ln198_fu_1468_p2 = ap_const_lv1_0) and (icmp_ln761_fu_1428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            physMemPtr_V_blk_n_AR <= m_axi_physMemPtr_V_ARREADY;
        else 
            physMemPtr_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_AW_assign_proc : process(m_axi_physMemPtr_V_AWREADY, ap_CS_fsm_state119)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            physMemPtr_V_blk_n_AW <= m_axi_physMemPtr_V_AWREADY;
        else 
            physMemPtr_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_B_assign_proc : process(m_axi_physMemPtr_V_BVALID, ap_CS_fsm_state126)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            physMemPtr_V_blk_n_B <= m_axi_physMemPtr_V_BVALID;
        else 
            physMemPtr_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_R_assign_proc : process(m_axi_physMemPtr_V_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            physMemPtr_V_blk_n_R <= m_axi_physMemPtr_V_RVALID;
        else 
            physMemPtr_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    physMemPtr_V_blk_n_W_assign_proc : process(m_axi_physMemPtr_V_WREADY, ap_CS_fsm_state120, ap_CS_fsm_state121)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120))) then 
            physMemPtr_V_blk_n_W <= m_axi_physMemPtr_V_WREADY;
        else 
            physMemPtr_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    r_V_fu_1398_p4 <= basePhysAddr_V_0_data_reg(31 downto 2);
    ratio_fu_2178_p1 <= p_Result_15_fu_2171_p3;
    reg_V_1_fu_2725_p1 <= reg_1362;
    reg_V_fu_2588_p1 <= reg_1349;
    ret_V_1_fu_2937_p2 <= std_logic_vector(unsigned(ap_const_lv31_2) + unsigned(zext_ln215_reg_3167));
    ret_V_fu_1412_p2 <= std_logic_vector(unsigned(zext_ln215_fu_1408_p1) + unsigned(ap_const_lv31_4));
    select_ln207_fu_1500_p3 <= 
        add_ln207_fu_1494_p2 when (icmp_ln207_fu_1488_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln258_1_fu_3098_p3 <= 
        dstDatas_3_r_1_fu_232 when (icmp_ln258_1_fu_3092_p2(0) = '1') else 
        select_ln258_fu_3084_p3;
    select_ln258_fu_3084_p3 <= 
        dstDatas_3_r_fu_228 when (icmp_ln258_fu_3078_p2(0) = '1') else 
        dstDatas_3_r_2_fu_236;
    select_ln278_1_fu_2986_p3 <= 
        ap_const_lv24_0 when (icmp_ln278_1_reg_3866(0) = '1') else 
        select_ln295_1_fu_2980_p3;
    select_ln278_fu_2810_p3 <= 
        ap_const_lv24_0 when (icmp_ln278_reg_3799(0) = '1') else 
        select_ln295_fu_2804_p3;
    select_ln282_1_fu_3021_p3 <= 
        tmp_s_reg_3893 when (and_ln282_1_fu_3016_p2(0) = '1') else 
        select_ln285_3_fu_3003_p3;
    select_ln282_fu_2845_p3 <= 
        tmp_2_reg_3820 when (and_ln282_fu_2840_p2(0) = '1') else 
        select_ln285_1_fu_2827_p3;
    select_ln285_1_fu_2827_p3 <= 
        select_ln288_fu_2787_p3 when (and_ln285_1_fu_2822_p2(0) = '1') else 
        select_ln278_fu_2810_p3;
    select_ln285_2_fu_2911_p3 <= 
        lshr_ln286_1_fu_2883_p2 when (and_ln285_2_fu_2905_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln285_3_fu_3003_p3 <= 
        select_ln288_1_fu_2963_p3 when (and_ln285_3_fu_2998_p2(0) = '1') else 
        select_ln278_1_fu_2986_p3;
    select_ln285_fu_2699_p3 <= 
        lshr_ln286_fu_2671_p2 when (and_ln285_fu_2693_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln288_1_fu_2963_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_9_fu_2956_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln288_fu_2787_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_6_fu_2780_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln28_fu_2213_p3 <= 
        bitcast_ln28_1_fu_2198_p1 when (and_ln28_1_fu_2207_p2(0) = '1') else 
        reg_1388;
    select_ln295_1_fu_2980_p3 <= 
        shl_ln297_1_fu_2975_p2 when (and_ln295_1_reg_3919(0) = '1') else 
        select_ln285_2_reg_3914;
    select_ln295_fu_2804_p3 <= 
        shl_ln297_fu_2799_p2 when (and_ln295_reg_3846(0) = '1') else 
        select_ln285_reg_3841;
    select_ln303_1_fu_3043_p3 <= 
        sub_ln461_1_fu_3038_p2 when (p_Result_19_reg_3856(0) = '1') else 
        select_ln282_1_reg_3934;
    select_ln303_fu_2947_p3 <= 
        sub_ln461_fu_2942_p2 when (p_Result_18_reg_3789(0) = '1') else 
        select_ln282_reg_3887;
    select_ln35_fu_2256_p3 <= 
        bitcast_ln35_1_fu_2241_p1 when (and_ln35_1_fu_2250_p2(0) = '1') else 
        reg_1393;
        sext_ln214_1_fu_3053_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln303_1_reg_3947),32));

        sext_ln214_fu_3049_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln303_reg_3929),32));

        sext_ln281_1_fu_2859_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_reg_3873),24));

        sext_ln281_fu_2647_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_3806),24));

        sext_ln294_1_fu_2953_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_3_reg_3904),32));

    sext_ln294_1cast_fu_2971_p1 <= sext_ln294_1_fu_2953_p1(24 - 1 downto 0);
        sext_ln294_fu_2777_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_3831),32));

    sext_ln294cast_fu_2795_p1 <= sext_ln294_fu_2777_p1(24 - 1 downto 0);
    sh_amt_1_fu_2660_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_reg_3806));
    sh_amt_2_fu_2765_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_1_fu_2751_p1));
    sh_amt_3_fu_2872_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_2_reg_3873));
    sh_amt_fu_2628_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_fu_2614_p1));
    shl_ln297_1_fu_2975_p2 <= std_logic_vector(shift_left(unsigned(tmp_s_reg_3893),to_integer(unsigned('0' & sext_ln294_1cast_fu_2971_p1(24-1 downto 0)))));
    shl_ln297_fu_2799_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_reg_3820),to_integer(unsigned('0' & sext_ln294cast_fu_2795_p1(24-1 downto 0)))));
    srcL_V_fu_1484_p1 <= physMemPtr_V_RDATA(24 - 1 downto 0);
    srcR_V_fu_1509_p1 <= physMemPtr_V_RDATA(24 - 1 downto 0);
    stageIndex_V_1_fu_3063_p2 <= std_logic_vector(unsigned(t_V_1_reg_1145) + unsigned(ap_const_lv2_1));
    stageIndex_V_fu_1539_p2 <= std_logic_vector(unsigned(t_V_reg_529) + unsigned(ap_const_lv3_1));
    sub_ln461_1_fu_3038_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(select_ln282_1_reg_3934));
    sub_ln461_fu_2942_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(select_ln282_reg_3887));
    thresh_1_fu_2345_p1 <= p_Result_11_fu_2338_p3;
    thresh_fu_2037_p1 <= p_Result_14_fu_2030_p3;
    tmp_10_fu_1619_p3 <= (ap_const_lv57_0 & or_ln112_fu_1614_p2);
    tmp_11_fu_2399_p4 <= p_Val2_5_fu_2351_p1(30 downto 23);
    tmp_14_fu_2427_p4 <= p_Val2_6_fu_2375_p1(30 downto 23);
    tmp_15_fu_1633_p3 <= (ap_const_lv57_0 & or_ln113_fu_1628_p2);
    tmp_17_fu_1647_p3 <= (ap_const_lv57_0 & or_ln114_fu_1642_p2);
    tmp_19_fu_1661_p3 <= (ap_const_lv57_0 & or_ln117_fu_1656_p2);
    tmp_21_fu_1675_p3 <= (ap_const_lv57_0 & or_ln118_fu_1670_p2);
    tmp_22_fu_1689_p3 <= (ap_const_lv57_0 & or_ln119_fu_1684_p2);
    tmp_23_fu_1703_p3 <= (ap_const_lv57_0 & or_ln120_fu_1698_p2);
    tmp_24_fu_1717_p3 <= (ap_const_lv57_0 & or_ln121_fu_1712_p2);
    tmp_25_fu_1731_p3 <= (ap_const_lv57_0 & or_ln122_fu_1726_p2);
    tmp_26_fu_1745_p3 <= (ap_const_lv57_0 & or_ln123_fu_1740_p2);
    tmp_27_fu_2091_p4 <= p_Val2_9_fu_2043_p1(30 downto 23);
    tmp_2_fu_2640_p3 <= (ap_const_lv1_1 & trunc_ln270_reg_3794);
    tmp_30_fu_1759_p3 <= (ap_const_lv57_0 & or_ln124_fu_1754_p2);
    tmp_32_fu_2119_p4 <= p_Val2_10_fu_2067_p1(30 downto 23);
    tmp_3_fu_1591_p3 <= (ap_const_lv57_0 & or_ln110_fu_1586_p2);
    tmp_4_fu_1545_p3 <= (t_V_reg_529 & ap_const_lv4_0);
    tmp_5_fu_1563_p3 <= (ap_const_lv57_0 & or_ln4_fu_1558_p2);
    tmp_6_fu_2780_p3 <= reg_V_reg_3784(31 downto 31);
    tmp_7_fu_1577_p3 <= (ap_const_lv57_0 & or_ln18_fu_1572_p2);
    tmp_8_fu_1605_p3 <= (ap_const_lv57_0 & or_ln111_fu_1600_p2);
    tmp_9_fu_2956_p3 <= reg_V_1_reg_3851(31 downto 31);
    tmp_s_fu_2852_p3 <= (ap_const_lv1_1 & trunc_ln270_1_reg_3861);
    trunc_ln228_fu_2286_p1 <= t_V_reg_529(2 - 1 downto 0);
    trunc_ln231_fu_1978_p1 <= t_V_reg_529(2 - 1 downto 0);
    trunc_ln234_fu_1920_p1 <= t_V_reg_529(2 - 1 downto 0);
    trunc_ln237_fu_1790_p1 <= t_V_reg_529(2 - 1 downto 0);
    trunc_ln241_fu_1772_p1 <= t_V_reg_529(2 - 1 downto 0);
    trunc_ln24_fu_2050_p1 <= p_Val2_9_fu_2043_p1(23 - 1 downto 0);
    trunc_ln257_1_fu_2358_p1 <= p_Val2_5_fu_2351_p1(23 - 1 downto 0);
    trunc_ln257_2_fu_2382_p1 <= p_Val2_6_fu_2375_p1(23 - 1 downto 0);
    trunc_ln257_fu_2322_p1 <= configReg_q0(23 - 1 downto 0);
    trunc_ln262_1_fu_2729_p1 <= reg_V_1_fu_2725_p1(31 - 1 downto 0);
    trunc_ln262_fu_2592_p1 <= reg_V_fu_2588_p1(31 - 1 downto 0);
    trunc_ln270_1_fu_2755_p1 <= reg_V_1_fu_2725_p1(23 - 1 downto 0);
    trunc_ln270_fu_2618_p1 <= reg_V_fu_2588_p1(23 - 1 downto 0);
    trunc_ln31_1_fu_2074_p1 <= p_Val2_10_fu_2067_p1(23 - 1 downto 0);
    trunc_ln31_fu_2014_p1 <= configReg_q0(23 - 1 downto 0);
    trunc_ln368_1_fu_2354_p1 <= p_Val2_5_fu_2351_p1(31 - 1 downto 0);
    trunc_ln368_2_fu_2378_p1 <= p_Val2_6_fu_2375_p1(31 - 1 downto 0);
    trunc_ln368_3_fu_2010_p1 <= configReg_q0(31 - 1 downto 0);
    trunc_ln368_4_fu_2167_p1 <= configReg_q0(31 - 1 downto 0);
    trunc_ln368_5_fu_2046_p1 <= p_Val2_9_fu_2043_p1(31 - 1 downto 0);
    trunc_ln368_6_fu_2070_p1 <= p_Val2_10_fu_2067_p1(31 - 1 downto 0);
    trunc_ln368_fu_2318_p1 <= configReg_q0(31 - 1 downto 0);
    xor_ln11_fu_2494_p2 <= (bitcast_ln11_fu_2491_p1 xor ap_const_lv32_80000000);
    xor_ln12_fu_2518_p2 <= (bitcast_ln12_fu_2515_p1 xor ap_const_lv32_80000000);
    xor_ln193_fu_1446_p0 <= (0=>lrclk_0_data_reg, others=>'-');
    xor_ln193_fu_1446_p2 <= (xor_ln193_fu_1446_p0 xor ap_const_lv1_1);
    xor_ln198_1_fu_1462_p2 <= (or_ln193_fu_1441_p2 xor ap_const_lv1_1);
    xor_ln198_fu_1451_p2 <= (readyLch xor ap_const_lv1_1);
    xor_ln24_fu_2202_p2 <= (ap_const_lv1_1 xor and_ln24_1_reg_3633);
    xor_ln278_1_fu_3011_p2 <= (icmp_ln278_1_reg_3866 xor ap_const_lv1_1);
    xor_ln278_fu_2835_p2 <= (icmp_ln278_reg_3799 xor ap_const_lv1_1);
    xor_ln282_1_fu_2893_p2 <= (or_ln282_1_fu_2889_p2 xor ap_const_lv1_1);
    xor_ln282_fu_2681_p2 <= (or_ln282_fu_2677_p2 xor ap_const_lv1_1);
    xor_ln284_1_fu_2925_p2 <= (or_ln284_1_fu_2919_p2 xor ap_const_lv1_1);
    xor_ln284_fu_2713_p2 <= (or_ln284_fu_2707_p2 xor ap_const_lv1_1);
    xor_ln285_1_fu_2993_p2 <= (icmp_ln285_1_reg_3899 xor ap_const_lv1_1);
    xor_ln285_fu_2817_p2 <= (icmp_ln285_reg_3826 xor ap_const_lv1_1);
    xor_ln28_fu_2192_p2 <= (bitcast_ln28_fu_2188_p1 xor ap_const_lv32_80000000);
    xor_ln31_fu_2245_p2 <= (ap_const_lv1_1 xor and_ln31_1_reg_3639);
    xor_ln35_fu_2235_p2 <= (bitcast_ln35_fu_2231_p1 xor ap_const_lv32_80000000);
    zext_ln215_fu_1408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_1398_p4),31));
    zext_ln225_fu_1553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_1545_p3),64));
    zext_ln544_1_fu_1474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_3162),64));
    zext_ln544_2_fu_3028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_reg_3924),64));
    zext_ln544_fu_1418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_3172),64));
end behav;
