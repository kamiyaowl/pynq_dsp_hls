// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _effect_distortion_HH_
#define _effect_distortion_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "pynq_dsp_hls_fcmpeOg.h"

namespace ap_rtl {

struct effect_distortion : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > inData_l;
    sc_in< sc_lv<32> > inData_r;
    sc_out< sc_lv<8> > config_r_address0;
    sc_out< sc_logic > config_r_ce0;
    sc_in< sc_lv<32> > config_r_q0;
    sc_in< sc_lv<5> > config_offset;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<5> > ap_var_for_const1;


    // Module declarations
    effect_distortion(sc_module_name name);
    SC_HAS_PROCESS(effect_distortion);

    ~effect_distortion();

    sc_trace_file* mVcdFile;

    pynq_dsp_hls_fcmpeOg<1,2,32,32,1>* pynq_dsp_hls_fcmpeOg_U41;
    pynq_dsp_hls_fcmpeOg<1,2,32,32,1>* pynq_dsp_hls_fcmpeOg_U42;
    pynq_dsp_hls_fcmpeOg<1,2,32,32,1>* pynq_dsp_hls_fcmpeOg_U43;
    pynq_dsp_hls_fcmpeOg<1,2,32,32,1>* pynq_dsp_hls_fcmpeOg_U44;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<31> > trunc_ln368_fu_126_p1;
    sc_signal< sc_lv<31> > trunc_ln368_reg_378;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > or_ln257_1_fu_156_p2;
    sc_signal< sc_lv<1> > or_ln257_1_reg_383;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > thresh_fu_169_p1;
    sc_signal< sc_lv<32> > thresh_reg_399;
    sc_signal< sc_lv<32> > absL_fu_195_p1;
    sc_signal< sc_lv<32> > absL_reg_407;
    sc_signal< sc_lv<32> > absR_fu_220_p1;
    sc_signal< sc_lv<32> > absR_reg_413;
    sc_signal< sc_lv<1> > or_ln257_fu_247_p2;
    sc_signal< sc_lv<1> > or_ln257_reg_419;
    sc_signal< sc_lv<1> > or_ln257_2_fu_275_p2;
    sc_signal< sc_lv<1> > or_ln257_2_reg_425;
    sc_signal< sc_lv<32> > monitorDstL_fu_291_p3;
    sc_signal< sc_lv<32> > monitorDstL_reg_431;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > monitorDstR_fu_307_p3;
    sc_signal< sc_lv<32> > monitorDstR_reg_437;
    sc_signal< sc_lv<1> > grp_fu_91_p2;
    sc_signal< sc_lv<1> > tmp_14_reg_443;
    sc_signal< sc_lv<1> > grp_fu_97_p2;
    sc_signal< sc_lv<1> > tmp_16_reg_448;
    sc_signal< sc_lv<64> > tmp_30_fu_117_p3;
    sc_signal< sc_lv<32> > grp_fu_83_p0;
    sc_signal< sc_lv<32> > grp_fu_87_p0;
    sc_signal< sc_lv<9> > tmp_29_fu_103_p3;
    sc_signal< sc_lv<9> > or_ln4_fu_111_p2;
    sc_signal< sc_lv<8> > tmp_8_fu_134_p4;
    sc_signal< sc_lv<23> > trunc_ln257_fu_130_p1;
    sc_signal< sc_lv<1> > icmp_ln257_3_fu_150_p2;
    sc_signal< sc_lv<1> > icmp_ln257_2_fu_144_p2;
    sc_signal< sc_lv<32> > p_Result_s_fu_162_p3;
    sc_signal< sc_lv<32> > p_Val2_4_fu_175_p1;
    sc_signal< sc_lv<31> > trunc_ln368_1_fu_179_p1;
    sc_signal< sc_lv<32> > p_Result_6_fu_187_p3;
    sc_signal< sc_lv<32> > p_Val2_5_fu_200_p1;
    sc_signal< sc_lv<31> > trunc_ln368_2_fu_204_p1;
    sc_signal< sc_lv<32> > p_Result_7_fu_212_p3;
    sc_signal< sc_lv<8> > tmp_7_fu_225_p4;
    sc_signal< sc_lv<23> > trunc_ln257_1_fu_183_p1;
    sc_signal< sc_lv<1> > icmp_ln257_1_fu_241_p2;
    sc_signal< sc_lv<1> > icmp_ln257_fu_235_p2;
    sc_signal< sc_lv<8> > tmp_10_fu_253_p4;
    sc_signal< sc_lv<23> > trunc_ln257_2_fu_208_p1;
    sc_signal< sc_lv<1> > icmp_ln257_5_fu_269_p2;
    sc_signal< sc_lv<1> > icmp_ln257_4_fu_263_p2;
    sc_signal< sc_lv<1> > and_ln257_fu_281_p2;
    sc_signal< sc_lv<1> > grp_fu_83_p2;
    sc_signal< sc_lv<1> > and_ln257_1_fu_285_p2;
    sc_signal< sc_lv<1> > and_ln257_2_fu_297_p2;
    sc_signal< sc_lv<1> > grp_fu_87_p2;
    sc_signal< sc_lv<1> > and_ln257_3_fu_301_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > bitcast_ln11_fu_317_p1;
    sc_signal< sc_lv<32> > xor_ln11_fu_320_p2;
    sc_signal< sc_lv<1> > and_ln11_fu_313_p2;
    sc_signal< sc_lv<32> > bitcast_ln11_1_fu_326_p1;
    sc_signal< sc_lv<32> > bitcast_ln12_fu_341_p1;
    sc_signal< sc_lv<32> > xor_ln12_fu_344_p2;
    sc_signal< sc_lv<1> > and_ln12_fu_337_p2;
    sc_signal< sc_lv<32> > bitcast_ln12_1_fu_350_p1;
    sc_signal< sc_lv<32> > dst_l_fu_330_p3;
    sc_signal< sc_lv<32> > dst_r_fu_354_p3;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<55> ap_const_lv55_0;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_80000000;
    static const sc_lv<5> ap_const_lv5_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_absL_fu_195_p1();
    void thread_absR_fu_220_p1();
    void thread_and_ln11_fu_313_p2();
    void thread_and_ln12_fu_337_p2();
    void thread_and_ln257_1_fu_285_p2();
    void thread_and_ln257_2_fu_297_p2();
    void thread_and_ln257_3_fu_301_p2();
    void thread_and_ln257_fu_281_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_bitcast_ln11_1_fu_326_p1();
    void thread_bitcast_ln11_fu_317_p1();
    void thread_bitcast_ln12_1_fu_350_p1();
    void thread_bitcast_ln12_fu_341_p1();
    void thread_config_r_address0();
    void thread_config_r_ce0();
    void thread_dst_l_fu_330_p3();
    void thread_dst_r_fu_354_p3();
    void thread_grp_fu_83_p0();
    void thread_grp_fu_87_p0();
    void thread_icmp_ln257_1_fu_241_p2();
    void thread_icmp_ln257_2_fu_144_p2();
    void thread_icmp_ln257_3_fu_150_p2();
    void thread_icmp_ln257_4_fu_263_p2();
    void thread_icmp_ln257_5_fu_269_p2();
    void thread_icmp_ln257_fu_235_p2();
    void thread_monitorDstL_fu_291_p3();
    void thread_monitorDstR_fu_307_p3();
    void thread_or_ln257_1_fu_156_p2();
    void thread_or_ln257_2_fu_275_p2();
    void thread_or_ln257_fu_247_p2();
    void thread_or_ln4_fu_111_p2();
    void thread_p_Result_6_fu_187_p3();
    void thread_p_Result_7_fu_212_p3();
    void thread_p_Result_s_fu_162_p3();
    void thread_p_Val2_4_fu_175_p1();
    void thread_p_Val2_5_fu_200_p1();
    void thread_thresh_fu_169_p1();
    void thread_tmp_10_fu_253_p4();
    void thread_tmp_29_fu_103_p3();
    void thread_tmp_30_fu_117_p3();
    void thread_tmp_7_fu_225_p4();
    void thread_tmp_8_fu_134_p4();
    void thread_trunc_ln257_1_fu_183_p1();
    void thread_trunc_ln257_2_fu_208_p1();
    void thread_trunc_ln257_fu_130_p1();
    void thread_trunc_ln368_1_fu_179_p1();
    void thread_trunc_ln368_2_fu_204_p1();
    void thread_trunc_ln368_fu_126_p1();
    void thread_xor_ln11_fu_320_p2();
    void thread_xor_ln12_fu_344_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
