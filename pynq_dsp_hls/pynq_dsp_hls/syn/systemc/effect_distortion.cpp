// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "effect_distortion.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic effect_distortion::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic effect_distortion::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> effect_distortion::ap_ST_fsm_state1 = "1";
const sc_lv<5> effect_distortion::ap_ST_fsm_state2 = "10";
const sc_lv<5> effect_distortion::ap_ST_fsm_state3 = "100";
const sc_lv<5> effect_distortion::ap_ST_fsm_state4 = "1000";
const sc_lv<5> effect_distortion::ap_ST_fsm_state5 = "10000";
const sc_lv<32> effect_distortion::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> effect_distortion::ap_const_lv32_1 = "1";
const sc_lv<32> effect_distortion::ap_const_lv32_2 = "10";
const sc_lv<32> effect_distortion::ap_const_lv32_3 = "11";
const sc_lv<4> effect_distortion::ap_const_lv4_0 = "0000";
const sc_lv<9> effect_distortion::ap_const_lv9_1 = "1";
const sc_lv<55> effect_distortion::ap_const_lv55_0 = "0000000000000000000000000000000000000000000000000000000";
const sc_lv<32> effect_distortion::ap_const_lv32_17 = "10111";
const sc_lv<32> effect_distortion::ap_const_lv32_1E = "11110";
const sc_lv<8> effect_distortion::ap_const_lv8_FF = "11111111";
const sc_lv<23> effect_distortion::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<1> effect_distortion::ap_const_lv1_0 = "0";
const sc_lv<32> effect_distortion::ap_const_lv32_4 = "100";
const sc_lv<32> effect_distortion::ap_const_lv32_80000000 = "10000000000000000000000000000000";
const sc_lv<5> effect_distortion::ap_const_lv5_4 = "100";
const bool effect_distortion::ap_const_boolean_1 = true;

effect_distortion::effect_distortion(sc_module_name name) : sc_module(name), mVcdFile(0) {
    pynq_dsp_hls_fcmpeOg_U41 = new pynq_dsp_hls_fcmpeOg<1,2,32,32,1>("pynq_dsp_hls_fcmpeOg_U41");
    pynq_dsp_hls_fcmpeOg_U41->clk(ap_clk);
    pynq_dsp_hls_fcmpeOg_U41->reset(ap_rst);
    pynq_dsp_hls_fcmpeOg_U41->din0(grp_fu_83_p0);
    pynq_dsp_hls_fcmpeOg_U41->din1(thresh_fu_169_p1);
    pynq_dsp_hls_fcmpeOg_U41->ce(ap_var_for_const0);
    pynq_dsp_hls_fcmpeOg_U41->opcode(ap_var_for_const1);
    pynq_dsp_hls_fcmpeOg_U41->dout(grp_fu_83_p2);
    pynq_dsp_hls_fcmpeOg_U42 = new pynq_dsp_hls_fcmpeOg<1,2,32,32,1>("pynq_dsp_hls_fcmpeOg_U42");
    pynq_dsp_hls_fcmpeOg_U42->clk(ap_clk);
    pynq_dsp_hls_fcmpeOg_U42->reset(ap_rst);
    pynq_dsp_hls_fcmpeOg_U42->din0(grp_fu_87_p0);
    pynq_dsp_hls_fcmpeOg_U42->din1(thresh_fu_169_p1);
    pynq_dsp_hls_fcmpeOg_U42->ce(ap_var_for_const0);
    pynq_dsp_hls_fcmpeOg_U42->opcode(ap_var_for_const1);
    pynq_dsp_hls_fcmpeOg_U42->dout(grp_fu_87_p2);
    pynq_dsp_hls_fcmpeOg_U43 = new pynq_dsp_hls_fcmpeOg<1,2,32,32,1>("pynq_dsp_hls_fcmpeOg_U43");
    pynq_dsp_hls_fcmpeOg_U43->clk(ap_clk);
    pynq_dsp_hls_fcmpeOg_U43->reset(ap_rst);
    pynq_dsp_hls_fcmpeOg_U43->din0(inData_l);
    pynq_dsp_hls_fcmpeOg_U43->din1(ap_var_for_const2);
    pynq_dsp_hls_fcmpeOg_U43->ce(ap_var_for_const0);
    pynq_dsp_hls_fcmpeOg_U43->opcode(ap_var_for_const1);
    pynq_dsp_hls_fcmpeOg_U43->dout(grp_fu_91_p2);
    pynq_dsp_hls_fcmpeOg_U44 = new pynq_dsp_hls_fcmpeOg<1,2,32,32,1>("pynq_dsp_hls_fcmpeOg_U44");
    pynq_dsp_hls_fcmpeOg_U44->clk(ap_clk);
    pynq_dsp_hls_fcmpeOg_U44->reset(ap_rst);
    pynq_dsp_hls_fcmpeOg_U44->din0(inData_r);
    pynq_dsp_hls_fcmpeOg_U44->din1(ap_var_for_const2);
    pynq_dsp_hls_fcmpeOg_U44->ce(ap_var_for_const0);
    pynq_dsp_hls_fcmpeOg_U44->opcode(ap_var_for_const1);
    pynq_dsp_hls_fcmpeOg_U44->dout(grp_fu_97_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_absL_fu_195_p1);
    sensitive << ( p_Result_6_fu_187_p3 );

    SC_METHOD(thread_absR_fu_220_p1);
    sensitive << ( p_Result_7_fu_212_p3 );

    SC_METHOD(thread_and_ln11_fu_313_p2);
    sensitive << ( or_ln257_reg_419 );
    sensitive << ( tmp_14_reg_443 );

    SC_METHOD(thread_and_ln12_fu_337_p2);
    sensitive << ( or_ln257_2_reg_425 );
    sensitive << ( tmp_16_reg_448 );

    SC_METHOD(thread_and_ln257_1_fu_285_p2);
    sensitive << ( and_ln257_fu_281_p2 );
    sensitive << ( grp_fu_83_p2 );

    SC_METHOD(thread_and_ln257_2_fu_297_p2);
    sensitive << ( or_ln257_1_reg_383 );
    sensitive << ( or_ln257_2_reg_425 );

    SC_METHOD(thread_and_ln257_3_fu_301_p2);
    sensitive << ( and_ln257_2_fu_297_p2 );
    sensitive << ( grp_fu_87_p2 );

    SC_METHOD(thread_and_ln257_fu_281_p2);
    sensitive << ( or_ln257_1_reg_383 );
    sensitive << ( or_ln257_reg_419 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( dst_l_fu_330_p3 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( dst_r_fu_354_p3 );

    SC_METHOD(thread_bitcast_ln11_1_fu_326_p1);
    sensitive << ( xor_ln11_fu_320_p2 );

    SC_METHOD(thread_bitcast_ln11_fu_317_p1);
    sensitive << ( monitorDstL_reg_431 );

    SC_METHOD(thread_bitcast_ln12_1_fu_350_p1);
    sensitive << ( xor_ln12_fu_344_p2 );

    SC_METHOD(thread_bitcast_ln12_fu_341_p1);
    sensitive << ( monitorDstR_reg_437 );

    SC_METHOD(thread_config_r_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_30_fu_117_p3 );

    SC_METHOD(thread_config_r_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_dst_l_fu_330_p3);
    sensitive << ( monitorDstL_reg_431 );
    sensitive << ( and_ln11_fu_313_p2 );
    sensitive << ( bitcast_ln11_1_fu_326_p1 );

    SC_METHOD(thread_dst_r_fu_354_p3);
    sensitive << ( monitorDstR_reg_437 );
    sensitive << ( and_ln12_fu_337_p2 );
    sensitive << ( bitcast_ln12_1_fu_350_p1 );

    SC_METHOD(thread_grp_fu_83_p0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( p_Result_6_fu_187_p3 );

    SC_METHOD(thread_grp_fu_87_p0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( p_Result_7_fu_212_p3 );

    SC_METHOD(thread_icmp_ln257_1_fu_241_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln257_1_fu_183_p1 );

    SC_METHOD(thread_icmp_ln257_2_fu_144_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_8_fu_134_p4 );

    SC_METHOD(thread_icmp_ln257_3_fu_150_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( trunc_ln257_fu_130_p1 );

    SC_METHOD(thread_icmp_ln257_4_fu_263_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_10_fu_253_p4 );

    SC_METHOD(thread_icmp_ln257_5_fu_269_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln257_2_fu_208_p1 );

    SC_METHOD(thread_icmp_ln257_fu_235_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_7_fu_225_p4 );

    SC_METHOD(thread_monitorDstL_fu_291_p3);
    sensitive << ( thresh_reg_399 );
    sensitive << ( absL_reg_407 );
    sensitive << ( and_ln257_1_fu_285_p2 );

    SC_METHOD(thread_monitorDstR_fu_307_p3);
    sensitive << ( thresh_reg_399 );
    sensitive << ( absR_reg_413 );
    sensitive << ( and_ln257_3_fu_301_p2 );

    SC_METHOD(thread_or_ln257_1_fu_156_p2);
    sensitive << ( icmp_ln257_3_fu_150_p2 );
    sensitive << ( icmp_ln257_2_fu_144_p2 );

    SC_METHOD(thread_or_ln257_2_fu_275_p2);
    sensitive << ( icmp_ln257_5_fu_269_p2 );
    sensitive << ( icmp_ln257_4_fu_263_p2 );

    SC_METHOD(thread_or_ln257_fu_247_p2);
    sensitive << ( icmp_ln257_1_fu_241_p2 );
    sensitive << ( icmp_ln257_fu_235_p2 );

    SC_METHOD(thread_or_ln4_fu_111_p2);
    sensitive << ( tmp_29_fu_103_p3 );

    SC_METHOD(thread_p_Result_6_fu_187_p3);
    sensitive << ( trunc_ln368_1_fu_179_p1 );

    SC_METHOD(thread_p_Result_7_fu_212_p3);
    sensitive << ( trunc_ln368_2_fu_204_p1 );

    SC_METHOD(thread_p_Result_s_fu_162_p3);
    sensitive << ( trunc_ln368_reg_378 );

    SC_METHOD(thread_p_Val2_4_fu_175_p1);
    sensitive << ( inData_l );

    SC_METHOD(thread_p_Val2_5_fu_200_p1);
    sensitive << ( inData_r );

    SC_METHOD(thread_thresh_fu_169_p1);
    sensitive << ( p_Result_s_fu_162_p3 );

    SC_METHOD(thread_tmp_10_fu_253_p4);
    sensitive << ( p_Val2_5_fu_200_p1 );

    SC_METHOD(thread_tmp_29_fu_103_p3);
    sensitive << ( config_offset );

    SC_METHOD(thread_tmp_30_fu_117_p3);
    sensitive << ( or_ln4_fu_111_p2 );

    SC_METHOD(thread_tmp_7_fu_225_p4);
    sensitive << ( p_Val2_4_fu_175_p1 );

    SC_METHOD(thread_tmp_8_fu_134_p4);
    sensitive << ( config_r_q0 );

    SC_METHOD(thread_trunc_ln257_1_fu_183_p1);
    sensitive << ( p_Val2_4_fu_175_p1 );

    SC_METHOD(thread_trunc_ln257_2_fu_208_p1);
    sensitive << ( p_Val2_5_fu_200_p1 );

    SC_METHOD(thread_trunc_ln257_fu_130_p1);
    sensitive << ( config_r_q0 );

    SC_METHOD(thread_trunc_ln368_1_fu_179_p1);
    sensitive << ( p_Val2_4_fu_175_p1 );

    SC_METHOD(thread_trunc_ln368_2_fu_204_p1);
    sensitive << ( p_Val2_5_fu_200_p1 );

    SC_METHOD(thread_trunc_ln368_fu_126_p1);
    sensitive << ( config_r_q0 );

    SC_METHOD(thread_xor_ln11_fu_320_p2);
    sensitive << ( bitcast_ln11_fu_317_p1 );

    SC_METHOD(thread_xor_ln12_fu_344_p2);
    sensitive << ( bitcast_ln12_fu_341_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "effect_distortion_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, inData_l, "(port)inData_l");
    sc_trace(mVcdFile, inData_r, "(port)inData_r");
    sc_trace(mVcdFile, config_r_address0, "(port)config_r_address0");
    sc_trace(mVcdFile, config_r_ce0, "(port)config_r_ce0");
    sc_trace(mVcdFile, config_r_q0, "(port)config_r_q0");
    sc_trace(mVcdFile, config_offset, "(port)config_offset");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, trunc_ln368_fu_126_p1, "trunc_ln368_fu_126_p1");
    sc_trace(mVcdFile, trunc_ln368_reg_378, "trunc_ln368_reg_378");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, or_ln257_1_fu_156_p2, "or_ln257_1_fu_156_p2");
    sc_trace(mVcdFile, or_ln257_1_reg_383, "or_ln257_1_reg_383");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, thresh_fu_169_p1, "thresh_fu_169_p1");
    sc_trace(mVcdFile, thresh_reg_399, "thresh_reg_399");
    sc_trace(mVcdFile, absL_fu_195_p1, "absL_fu_195_p1");
    sc_trace(mVcdFile, absL_reg_407, "absL_reg_407");
    sc_trace(mVcdFile, absR_fu_220_p1, "absR_fu_220_p1");
    sc_trace(mVcdFile, absR_reg_413, "absR_reg_413");
    sc_trace(mVcdFile, or_ln257_fu_247_p2, "or_ln257_fu_247_p2");
    sc_trace(mVcdFile, or_ln257_reg_419, "or_ln257_reg_419");
    sc_trace(mVcdFile, or_ln257_2_fu_275_p2, "or_ln257_2_fu_275_p2");
    sc_trace(mVcdFile, or_ln257_2_reg_425, "or_ln257_2_reg_425");
    sc_trace(mVcdFile, monitorDstL_fu_291_p3, "monitorDstL_fu_291_p3");
    sc_trace(mVcdFile, monitorDstL_reg_431, "monitorDstL_reg_431");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, monitorDstR_fu_307_p3, "monitorDstR_fu_307_p3");
    sc_trace(mVcdFile, monitorDstR_reg_437, "monitorDstR_reg_437");
    sc_trace(mVcdFile, grp_fu_91_p2, "grp_fu_91_p2");
    sc_trace(mVcdFile, tmp_14_reg_443, "tmp_14_reg_443");
    sc_trace(mVcdFile, grp_fu_97_p2, "grp_fu_97_p2");
    sc_trace(mVcdFile, tmp_16_reg_448, "tmp_16_reg_448");
    sc_trace(mVcdFile, tmp_30_fu_117_p3, "tmp_30_fu_117_p3");
    sc_trace(mVcdFile, grp_fu_83_p0, "grp_fu_83_p0");
    sc_trace(mVcdFile, grp_fu_87_p0, "grp_fu_87_p0");
    sc_trace(mVcdFile, tmp_29_fu_103_p3, "tmp_29_fu_103_p3");
    sc_trace(mVcdFile, or_ln4_fu_111_p2, "or_ln4_fu_111_p2");
    sc_trace(mVcdFile, tmp_8_fu_134_p4, "tmp_8_fu_134_p4");
    sc_trace(mVcdFile, trunc_ln257_fu_130_p1, "trunc_ln257_fu_130_p1");
    sc_trace(mVcdFile, icmp_ln257_3_fu_150_p2, "icmp_ln257_3_fu_150_p2");
    sc_trace(mVcdFile, icmp_ln257_2_fu_144_p2, "icmp_ln257_2_fu_144_p2");
    sc_trace(mVcdFile, p_Result_s_fu_162_p3, "p_Result_s_fu_162_p3");
    sc_trace(mVcdFile, p_Val2_4_fu_175_p1, "p_Val2_4_fu_175_p1");
    sc_trace(mVcdFile, trunc_ln368_1_fu_179_p1, "trunc_ln368_1_fu_179_p1");
    sc_trace(mVcdFile, p_Result_6_fu_187_p3, "p_Result_6_fu_187_p3");
    sc_trace(mVcdFile, p_Val2_5_fu_200_p1, "p_Val2_5_fu_200_p1");
    sc_trace(mVcdFile, trunc_ln368_2_fu_204_p1, "trunc_ln368_2_fu_204_p1");
    sc_trace(mVcdFile, p_Result_7_fu_212_p3, "p_Result_7_fu_212_p3");
    sc_trace(mVcdFile, tmp_7_fu_225_p4, "tmp_7_fu_225_p4");
    sc_trace(mVcdFile, trunc_ln257_1_fu_183_p1, "trunc_ln257_1_fu_183_p1");
    sc_trace(mVcdFile, icmp_ln257_1_fu_241_p2, "icmp_ln257_1_fu_241_p2");
    sc_trace(mVcdFile, icmp_ln257_fu_235_p2, "icmp_ln257_fu_235_p2");
    sc_trace(mVcdFile, tmp_10_fu_253_p4, "tmp_10_fu_253_p4");
    sc_trace(mVcdFile, trunc_ln257_2_fu_208_p1, "trunc_ln257_2_fu_208_p1");
    sc_trace(mVcdFile, icmp_ln257_5_fu_269_p2, "icmp_ln257_5_fu_269_p2");
    sc_trace(mVcdFile, icmp_ln257_4_fu_263_p2, "icmp_ln257_4_fu_263_p2");
    sc_trace(mVcdFile, and_ln257_fu_281_p2, "and_ln257_fu_281_p2");
    sc_trace(mVcdFile, grp_fu_83_p2, "grp_fu_83_p2");
    sc_trace(mVcdFile, and_ln257_1_fu_285_p2, "and_ln257_1_fu_285_p2");
    sc_trace(mVcdFile, and_ln257_2_fu_297_p2, "and_ln257_2_fu_297_p2");
    sc_trace(mVcdFile, grp_fu_87_p2, "grp_fu_87_p2");
    sc_trace(mVcdFile, and_ln257_3_fu_301_p2, "and_ln257_3_fu_301_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, bitcast_ln11_fu_317_p1, "bitcast_ln11_fu_317_p1");
    sc_trace(mVcdFile, xor_ln11_fu_320_p2, "xor_ln11_fu_320_p2");
    sc_trace(mVcdFile, and_ln11_fu_313_p2, "and_ln11_fu_313_p2");
    sc_trace(mVcdFile, bitcast_ln11_1_fu_326_p1, "bitcast_ln11_1_fu_326_p1");
    sc_trace(mVcdFile, bitcast_ln12_fu_341_p1, "bitcast_ln12_fu_341_p1");
    sc_trace(mVcdFile, xor_ln12_fu_344_p2, "xor_ln12_fu_344_p2");
    sc_trace(mVcdFile, and_ln12_fu_337_p2, "and_ln12_fu_337_p2");
    sc_trace(mVcdFile, bitcast_ln12_1_fu_350_p1, "bitcast_ln12_1_fu_350_p1");
    sc_trace(mVcdFile, dst_l_fu_330_p3, "dst_l_fu_330_p3");
    sc_trace(mVcdFile, dst_r_fu_354_p3, "dst_r_fu_354_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

effect_distortion::~effect_distortion() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete pynq_dsp_hls_fcmpeOg_U41;
    delete pynq_dsp_hls_fcmpeOg_U42;
    delete pynq_dsp_hls_fcmpeOg_U43;
    delete pynq_dsp_hls_fcmpeOg_U44;
}

void effect_distortion::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void effect_distortion::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void effect_distortion::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv5_4;
}

void effect_distortion::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        absL_reg_407 = absL_fu_195_p1.read();
        absR_reg_413 = absR_fu_220_p1.read();
        or_ln257_2_reg_425 = or_ln257_2_fu_275_p2.read();
        or_ln257_reg_419 = or_ln257_fu_247_p2.read();
        thresh_reg_399 = thresh_fu_169_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        monitorDstL_reg_431 = monitorDstL_fu_291_p3.read();
        monitorDstR_reg_437 = monitorDstR_fu_307_p3.read();
        tmp_14_reg_443 = grp_fu_91_p2.read();
        tmp_16_reg_448 = grp_fu_97_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        or_ln257_1_reg_383 = or_ln257_1_fu_156_p2.read();
        trunc_ln368_reg_378 = trunc_ln368_fu_126_p1.read();
    }
}

void effect_distortion::thread_absL_fu_195_p1() {
    absL_fu_195_p1 = p_Result_6_fu_187_p3.read();
}

void effect_distortion::thread_absR_fu_220_p1() {
    absR_fu_220_p1 = p_Result_7_fu_212_p3.read();
}

void effect_distortion::thread_and_ln11_fu_313_p2() {
    and_ln11_fu_313_p2 = (or_ln257_reg_419.read() & tmp_14_reg_443.read());
}

void effect_distortion::thread_and_ln12_fu_337_p2() {
    and_ln12_fu_337_p2 = (or_ln257_2_reg_425.read() & tmp_16_reg_448.read());
}

void effect_distortion::thread_and_ln257_1_fu_285_p2() {
    and_ln257_1_fu_285_p2 = (and_ln257_fu_281_p2.read() & grp_fu_83_p2.read());
}

void effect_distortion::thread_and_ln257_2_fu_297_p2() {
    and_ln257_2_fu_297_p2 = (or_ln257_2_reg_425.read() & or_ln257_1_reg_383.read());
}

void effect_distortion::thread_and_ln257_3_fu_301_p2() {
    and_ln257_3_fu_301_p2 = (and_ln257_2_fu_297_p2.read() & grp_fu_87_p2.read());
}

void effect_distortion::thread_and_ln257_fu_281_p2() {
    and_ln257_fu_281_p2 = (or_ln257_reg_419.read() & or_ln257_1_reg_383.read());
}

void effect_distortion::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void effect_distortion::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void effect_distortion::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void effect_distortion::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void effect_distortion::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void effect_distortion::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void effect_distortion::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void effect_distortion::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void effect_distortion::thread_ap_return_0() {
    ap_return_0 = dst_l_fu_330_p3.read();
}

void effect_distortion::thread_ap_return_1() {
    ap_return_1 = dst_r_fu_354_p3.read();
}

void effect_distortion::thread_bitcast_ln11_1_fu_326_p1() {
    bitcast_ln11_1_fu_326_p1 = xor_ln11_fu_320_p2.read();
}

void effect_distortion::thread_bitcast_ln11_fu_317_p1() {
    bitcast_ln11_fu_317_p1 = monitorDstL_reg_431.read();
}

void effect_distortion::thread_bitcast_ln12_1_fu_350_p1() {
    bitcast_ln12_1_fu_350_p1 = xor_ln12_fu_344_p2.read();
}

void effect_distortion::thread_bitcast_ln12_fu_341_p1() {
    bitcast_ln12_fu_341_p1 = monitorDstR_reg_437.read();
}

void effect_distortion::thread_config_r_address0() {
    config_r_address0 =  (sc_lv<8>) (tmp_30_fu_117_p3.read());
}

void effect_distortion::thread_config_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        config_r_ce0 = ap_const_logic_1;
    } else {
        config_r_ce0 = ap_const_logic_0;
    }
}

void effect_distortion::thread_dst_l_fu_330_p3() {
    dst_l_fu_330_p3 = (!and_ln11_fu_313_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln11_fu_313_p2.read()[0].to_bool())? bitcast_ln11_1_fu_326_p1.read(): monitorDstL_reg_431.read());
}

void effect_distortion::thread_dst_r_fu_354_p3() {
    dst_r_fu_354_p3 = (!and_ln12_fu_337_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln12_fu_337_p2.read()[0].to_bool())? bitcast_ln12_1_fu_350_p1.read(): monitorDstR_reg_437.read());
}

void effect_distortion::thread_grp_fu_83_p0() {
    grp_fu_83_p0 = p_Result_6_fu_187_p3.read();
}

void effect_distortion::thread_grp_fu_87_p0() {
    grp_fu_87_p0 = p_Result_7_fu_212_p3.read();
}

void effect_distortion::thread_icmp_ln257_1_fu_241_p2() {
    icmp_ln257_1_fu_241_p2 = (!trunc_ln257_1_fu_183_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln257_1_fu_183_p1.read() == ap_const_lv23_0);
}

void effect_distortion::thread_icmp_ln257_2_fu_144_p2() {
    icmp_ln257_2_fu_144_p2 = (!tmp_8_fu_134_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_8_fu_134_p4.read() != ap_const_lv8_FF);
}

void effect_distortion::thread_icmp_ln257_3_fu_150_p2() {
    icmp_ln257_3_fu_150_p2 = (!trunc_ln257_fu_130_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln257_fu_130_p1.read() == ap_const_lv23_0);
}

void effect_distortion::thread_icmp_ln257_4_fu_263_p2() {
    icmp_ln257_4_fu_263_p2 = (!tmp_10_fu_253_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_10_fu_253_p4.read() != ap_const_lv8_FF);
}

void effect_distortion::thread_icmp_ln257_5_fu_269_p2() {
    icmp_ln257_5_fu_269_p2 = (!trunc_ln257_2_fu_208_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln257_2_fu_208_p1.read() == ap_const_lv23_0);
}

void effect_distortion::thread_icmp_ln257_fu_235_p2() {
    icmp_ln257_fu_235_p2 = (!tmp_7_fu_225_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_7_fu_225_p4.read() != ap_const_lv8_FF);
}

void effect_distortion::thread_monitorDstL_fu_291_p3() {
    monitorDstL_fu_291_p3 = (!and_ln257_1_fu_285_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln257_1_fu_285_p2.read()[0].to_bool())? absL_reg_407.read(): thresh_reg_399.read());
}

void effect_distortion::thread_monitorDstR_fu_307_p3() {
    monitorDstR_fu_307_p3 = (!and_ln257_3_fu_301_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln257_3_fu_301_p2.read()[0].to_bool())? absR_reg_413.read(): thresh_reg_399.read());
}

void effect_distortion::thread_or_ln257_1_fu_156_p2() {
    or_ln257_1_fu_156_p2 = (icmp_ln257_3_fu_150_p2.read() | icmp_ln257_2_fu_144_p2.read());
}

void effect_distortion::thread_or_ln257_2_fu_275_p2() {
    or_ln257_2_fu_275_p2 = (icmp_ln257_5_fu_269_p2.read() | icmp_ln257_4_fu_263_p2.read());
}

void effect_distortion::thread_or_ln257_fu_247_p2() {
    or_ln257_fu_247_p2 = (icmp_ln257_1_fu_241_p2.read() | icmp_ln257_fu_235_p2.read());
}

void effect_distortion::thread_or_ln4_fu_111_p2() {
    or_ln4_fu_111_p2 = (tmp_29_fu_103_p3.read() | ap_const_lv9_1);
}

void effect_distortion::thread_p_Result_6_fu_187_p3() {
    p_Result_6_fu_187_p3 = esl_concat<1,31>(ap_const_lv1_0, trunc_ln368_1_fu_179_p1.read());
}

void effect_distortion::thread_p_Result_7_fu_212_p3() {
    p_Result_7_fu_212_p3 = esl_concat<1,31>(ap_const_lv1_0, trunc_ln368_2_fu_204_p1.read());
}

void effect_distortion::thread_p_Result_s_fu_162_p3() {
    p_Result_s_fu_162_p3 = esl_concat<1,31>(ap_const_lv1_0, trunc_ln368_reg_378.read());
}

void effect_distortion::thread_p_Val2_4_fu_175_p1() {
    p_Val2_4_fu_175_p1 = inData_l.read();
}

void effect_distortion::thread_p_Val2_5_fu_200_p1() {
    p_Val2_5_fu_200_p1 = inData_r.read();
}

void effect_distortion::thread_thresh_fu_169_p1() {
    thresh_fu_169_p1 = p_Result_s_fu_162_p3.read();
}

void effect_distortion::thread_tmp_10_fu_253_p4() {
    tmp_10_fu_253_p4 = p_Val2_5_fu_200_p1.read().range(30, 23);
}

void effect_distortion::thread_tmp_29_fu_103_p3() {
    tmp_29_fu_103_p3 = esl_concat<5,4>(config_offset.read(), ap_const_lv4_0);
}

void effect_distortion::thread_tmp_30_fu_117_p3() {
    tmp_30_fu_117_p3 = esl_concat<55,9>(ap_const_lv55_0, or_ln4_fu_111_p2.read());
}

void effect_distortion::thread_tmp_7_fu_225_p4() {
    tmp_7_fu_225_p4 = p_Val2_4_fu_175_p1.read().range(30, 23);
}

void effect_distortion::thread_tmp_8_fu_134_p4() {
    tmp_8_fu_134_p4 = config_r_q0.read().range(30, 23);
}

void effect_distortion::thread_trunc_ln257_1_fu_183_p1() {
    trunc_ln257_1_fu_183_p1 = p_Val2_4_fu_175_p1.read().range(23-1, 0);
}

void effect_distortion::thread_trunc_ln257_2_fu_208_p1() {
    trunc_ln257_2_fu_208_p1 = p_Val2_5_fu_200_p1.read().range(23-1, 0);
}

void effect_distortion::thread_trunc_ln257_fu_130_p1() {
    trunc_ln257_fu_130_p1 = config_r_q0.read().range(23-1, 0);
}

void effect_distortion::thread_trunc_ln368_1_fu_179_p1() {
    trunc_ln368_1_fu_179_p1 = p_Val2_4_fu_175_p1.read().range(31-1, 0);
}

void effect_distortion::thread_trunc_ln368_2_fu_204_p1() {
    trunc_ln368_2_fu_204_p1 = p_Val2_5_fu_200_p1.read().range(31-1, 0);
}

void effect_distortion::thread_trunc_ln368_fu_126_p1() {
    trunc_ln368_fu_126_p1 = config_r_q0.read().range(31-1, 0);
}

void effect_distortion::thread_xor_ln11_fu_320_p2() {
    xor_ln11_fu_320_p2 = (bitcast_ln11_fu_317_p1.read() ^ ap_const_lv32_80000000);
}

void effect_distortion::thread_xor_ln12_fu_344_p2() {
    xor_ln12_fu_344_p2 = (bitcast_ln12_fu_341_p1.read() ^ ap_const_lv32_80000000);
}

void effect_distortion::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

